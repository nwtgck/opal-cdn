/* Generated by Opal 0.11.99.dev */
Opal.modules["e2mmap"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$<', '$bind', '$module_eval', '$Raise', '$class', '$extend', '$def_e2message', '$def_exception', '$instance_eval', '$[]=', '$-', '$new', '$const_defined?', '$remove_const', '$const_set', '$e2mm_message', '$nil?', '$caller', '$=~', '$[]', '$quote', '$shift', '$raise', '$sprintf', '$Fail', '$inspect', '$each', '$ancestors']);
  return (function($base, $parent_nesting) {
    function $Exception2MessageMapper() {};
    var self = $Exception2MessageMapper = $module($base, 'Exception2MessageMapper', $Exception2MessageMapper);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Exception2MessageMapper_extend_object_1, TMP_Exception2MessageMapper_bind_2, TMP_Exception2MessageMapper_Raise_6, TMP_Exception2MessageMapper_def_e2message_7, TMP_Exception2MessageMapper_def_exception_8, TMP_Exception2MessageMapper_def_e2message_9, TMP_Exception2MessageMapper_def_exception_11, TMP_Exception2MessageMapper_Raise_14, TMP_Exception2MessageMapper_e2mm_message_15;

    
    Opal.const_set($nesting[0], 'E2MM', $$($nesting, 'Exception2MessageMapper'));
    Opal.defs($$($nesting, 'E2MM'), '$extend_object', TMP_Exception2MessageMapper_extend_object_1 = function $$extend_object(cl) {
      var $iter = TMP_Exception2MessageMapper_extend_object_1.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

      if ($iter) TMP_Exception2MessageMapper_extend_object_1.$$p = null;
      // Prepare super implicit arguments
      for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
        $zuper[$zuper_i] = arguments[$zuper_i];
      }
      
      $send(self, Opal.find_super_dispatcher(self, 'extend_object', TMP_Exception2MessageMapper_extend_object_1, false, $Exception2MessageMapper), $zuper, $iter);
      if ($truthy($rb_lt(cl, $$($nesting, 'E2MM')))) {
        return nil
      } else {
        return cl.$bind(self)
      };
    }, TMP_Exception2MessageMapper_extend_object_1.$$arity = 1);
    
    Opal.def(self, '$bind', TMP_Exception2MessageMapper_bind_2 = function $$bind(cl) {
      var TMP_3, self = this;

      return $send(self, 'module_eval', [], (TMP_3 = function(){var self = TMP_3.$$s || this, TMP_Raise_4, TMP_included_5;

      
        
        Opal.def(self, '$Raise', TMP_Raise_4 = function $$Raise($a, $b) {
          var $post_args, err, rest, self = this;

          
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          if ($post_args.length > 0) {
            err = $post_args[0];
            $post_args.splice(0, 1);
          }
          if (err == null) {
            err = nil;
          };
          
          rest = $post_args;;
          return $send($$($nesting, 'Exception2MessageMapper'), 'Raise', [self.$class(), err].concat(Opal.to_a(rest)));
        }, TMP_Raise_4.$$arity = -1);
        Opal.alias(self, "Fail", "Raise");
        (function(self, $parent_nesting) {
          var def = self.prototype, $nesting = [self].concat($parent_nesting);

          
          
          Opal.udef(self, '$' + "included");;
          return nil;
        })(Opal.get_singleton_class(self), $nesting);
        return (Opal.defs(self, '$included', TMP_included_5 = function $$included(mod) {
          var self = this;

          return mod.$extend($$($nesting, 'Exception2MessageMapper'))
        }, TMP_included_5.$$arity = 1), nil) && 'included';}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3))
    }, TMP_Exception2MessageMapper_bind_2.$$arity = 1);
    
    Opal.def(self, '$Raise', TMP_Exception2MessageMapper_Raise_6 = function $$Raise($a, $b) {
      var $post_args, err, rest, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        err = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (err == null) {
        err = nil;
      };
      
      rest = $post_args;;
      return $send($$($nesting, 'E2MM'), 'Raise', [self, err].concat(Opal.to_a(rest)));
    }, TMP_Exception2MessageMapper_Raise_6.$$arity = -1);
    Opal.alias(self, "Fail", "Raise");
    Opal.alias(self, "fail", "Raise");
    
    Opal.def(self, '$def_e2message', TMP_Exception2MessageMapper_def_e2message_7 = function $$def_e2message(c, m) {
      var self = this;

      return $$($nesting, 'E2MM').$def_e2message(self, c, m)
    }, TMP_Exception2MessageMapper_def_e2message_7.$$arity = 2);
    
    Opal.def(self, '$def_exception', TMP_Exception2MessageMapper_def_exception_8 = function $$def_exception(n, m, s) {
      var self = this;

      
      
      if (s == null) {
        s = $$($nesting, 'StandardError');
      };
      return $$($nesting, 'E2MM').$def_exception(self, n, m, s);
    }, TMP_Exception2MessageMapper_def_exception_8.$$arity = -3);
    self.MessageMap = $hash2([], {});
    Opal.defs($$($nesting, 'E2MM'), '$def_e2message', TMP_Exception2MessageMapper_def_e2message_9 = function $$def_e2message(k, c, m) {
      var TMP_10, self = this;

      
      $send($$($nesting, 'E2MM'), 'instance_eval', [], (TMP_10 = function(){var self = TMP_10.$$s || this, $writer = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

      
        $writer = [[k, c], m];
        $send(self.MessageMap, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10));
      return c;
    }, TMP_Exception2MessageMapper_def_e2message_9.$$arity = 3);
    Opal.defs($$($nesting, 'E2MM'), '$def_exception', TMP_Exception2MessageMapper_def_exception_11 = function $$def_exception(k, n, m, s) {
      var TMP_12, TMP_13, self = this, e = nil;

      
      
      if (s == null) {
        s = $$($nesting, 'StandardError');
      };
      e = $$($nesting, 'Class').$new(s);
      $send($$($nesting, 'E2MM'), 'instance_eval', [], (TMP_12 = function(){var self = TMP_12.$$s || this, $writer = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

      
        $writer = [[k, e], m];
        $send(self.MessageMap, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12));
      if ($truthy(k['$const_defined?'](n, false))) {
        $send(k, 'module_eval', [], (TMP_13 = function(){var self = TMP_13.$$s || this;

        return self.$remove_const(n)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13))};
      return k.$const_set(n, e);
    }, TMP_Exception2MessageMapper_def_exception_11.$$arity = -4);
    Opal.defs($$($nesting, 'E2MM'), '$Raise', TMP_Exception2MessageMapper_Raise_14 = function $$Raise($a, $b, $c) {
      var $post_args, klass, err, rest, self = this, form = nil, b = nil;
      if ($gvars["@"] == null) $gvars["@"] = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      if ($post_args.length > 0) {
        klass = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (klass == null) {
        klass = $$($nesting, 'E2MM');
      };
      
      if ($post_args.length > 0) {
        err = $post_args[0];
        $post_args.splice(0, 1);
      }
      if (err == null) {
        err = nil;
      };
      
      rest = $post_args;;
      if ($truthy((form = self.$e2mm_message(klass, err)))) {
        
        b = (function() {if ($truthy($gvars["@"]['$nil?']())) {
          return self.$caller(1)
        } else {
          return $gvars["@"]
        }; return nil; })();
        if ($truthy(b['$[]'](0)['$=~'](new RegExp("" + "^" + ($$($nesting, 'Regexp').$quote("./e2mmap.rb".$force_encoding("US-ASCII"))) + ":")))) {
          b.$shift()};
        return self.$raise(err, $send(self, 'sprintf', [form].concat(Opal.to_a(rest))), b);
      } else {
        return $$($nesting, 'E2MM').$Fail($$($nesting, 'E2MM'), $$($nesting, 'ErrNotRegisteredException'), err.$inspect())
      };
    }, TMP_Exception2MessageMapper_Raise_14.$$arity = -1);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "Fail", "Raise")
    })(Opal.get_singleton_class($$($nesting, 'E2MM')), $nesting);
    Opal.defs($$($nesting, 'E2MM'), '$e2mm_message', TMP_Exception2MessageMapper_e2mm_message_15 = function $$e2mm_message(klass, exp) {try {

      var TMP_16, self = this;

      
      $send(klass.$ancestors(), 'each', [], (TMP_16 = function(c){var self = TMP_16.$$s || this, mes = nil;
        if (self.MessageMap == null) self.MessageMap = nil;

      
        
        if (c == null) {
          c = nil;
        };
        if ($truthy((mes = self.MessageMap['$[]']([c, exp])))) {
          Opal.ret(mes)
        } else {
          return nil
        };}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Exception2MessageMapper_e2mm_message_15.$$arity = 2);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return Opal.alias(self, "message", "e2mm_message")
    })(Opal.get_singleton_class(self), $nesting);
    $$($nesting, 'E2MM').$def_exception($$($nesting, 'E2MM'), "ErrNotRegisteredException", "not registered exception(%s)");
  })($nesting[0], $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["matrix/eigenvalue_decomposition"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$is_a?', '$raise', '$class', '$row_count', '$new', '$symmetric?', '$to_a', '$tridiagonalize', '$diagonalize', '$reduce_to_hessenberg', '$hessenberg_to_real_schur', '$send', '$transpose', '$build_eigenvectors', '$inverse', '$dup', '$each_with_index', '$==', '$Complex', '$[]', '$[]=', '$-', '$map', '$diagonal', '$eigenvalues', '$v', '$d', '$v_inv', '$alias_method', '$private', '$>', '$+', '$-@', '$abs', '$/', '$*', '$times', '$downto', '$sqrt', '$upto', '$!=', '$max', '$<', '$<=', '$hypot', '$>=', '$min', '$cdiv']);
  return (function($base, $super, $parent_nesting) {
    function $Matrix(){};
    var self = $Matrix = $klass($base, $super, 'Matrix', $Matrix);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $EigenvalueDecomposition(){};
      var self = $EigenvalueDecomposition = $klass($base, $super, 'EigenvalueDecomposition', $EigenvalueDecomposition);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_EigenvalueDecomposition_initialize_1, TMP_EigenvalueDecomposition_eigenvector_matrix_3, TMP_EigenvalueDecomposition_eigenvector_matrix_inv_4, TMP_EigenvalueDecomposition_eigenvalues_5, TMP_EigenvalueDecomposition_eigenvectors_7, TMP_EigenvalueDecomposition_eigenvalue_matrix_9, TMP_EigenvalueDecomposition_to_ary_10, TMP_EigenvalueDecomposition_build_eigenvectors_11, TMP_EigenvalueDecomposition_cdiv_16, TMP_EigenvalueDecomposition_tridiagonalize_17, TMP_EigenvalueDecomposition_diagonalize_37, TMP_EigenvalueDecomposition_reduce_to_hessenberg_46, TMP_EigenvalueDecomposition_hessenberg_to_real_schur_63;

      def.size = def.symmetric = def.d = def.e = def.v = def.h = nil;
      
      
      Opal.def(self, '$initialize', TMP_EigenvalueDecomposition_initialize_1 = function $$initialize(a) {
        var TMP_2, self = this;

        
        if ($truthy(a['$is_a?']($$($nesting, 'Matrix')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected Matrix but got " + (a.$class()))
        };
        self.size = a.$row_count();
        self.d = $$($nesting, 'Array').$new(self.size, 0);
        self.e = $$($nesting, 'Array').$new(self.size, 0);
        if ($truthy((self.symmetric = a['$symmetric?']()))) {
          
          self.v = a.$to_a();
          self.$tridiagonalize();
          return self.$diagonalize();
        } else {
          
          self.v = $send($$($nesting, 'Array'), 'new', [self.size], (TMP_2 = function(){var self = TMP_2.$$s || this;
            if (self.size == null) self.size = nil;

          return $$($nesting, 'Array').$new(self.size, 0)}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2));
          self.h = a.$to_a();
          self.ort = $$($nesting, 'Array').$new(self.size, 0);
          self.$reduce_to_hessenberg();
          return self.$hessenberg_to_real_schur();
        };
      }, TMP_EigenvalueDecomposition_initialize_1.$$arity = 1);
      
      Opal.def(self, '$eigenvector_matrix', TMP_EigenvalueDecomposition_eigenvector_matrix_3 = function $$eigenvector_matrix() {
        var self = this;

        return $$($nesting, 'Matrix').$send("new", self.$build_eigenvectors().$transpose())
      }, TMP_EigenvalueDecomposition_eigenvector_matrix_3.$$arity = 0);
      Opal.alias(self, "v", "eigenvector_matrix");
      
      Opal.def(self, '$eigenvector_matrix_inv', TMP_EigenvalueDecomposition_eigenvector_matrix_inv_4 = function $$eigenvector_matrix_inv() {
        var self = this, r = nil;

        
        r = $$($nesting, 'Matrix').$send("new", self.$build_eigenvectors());
        if ($truthy(self.symmetric)) {
        } else {
          r = r.$transpose().$inverse()
        };
        return r;
      }, TMP_EigenvalueDecomposition_eigenvector_matrix_inv_4.$$arity = 0);
      Opal.alias(self, "v_inv", "eigenvector_matrix_inv");
      
      Opal.def(self, '$eigenvalues', TMP_EigenvalueDecomposition_eigenvalues_5 = function $$eigenvalues() {
        var TMP_6, self = this, values = nil;

        
        values = self.d.$dup();
        $send(self.e, 'each_with_index', [], (TMP_6 = function(imag, i){var self = TMP_6.$$s || this, $writer = nil;

        
          
          if (imag == null) {
            imag = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          if (imag['$=='](0)) {
            return nil
          } else {
            
            $writer = [i, self.$Complex(values['$[]'](i), imag)];
            $send(values, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];
          };}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
        return values;
      }, TMP_EigenvalueDecomposition_eigenvalues_5.$$arity = 0);
      
      Opal.def(self, '$eigenvectors', TMP_EigenvalueDecomposition_eigenvectors_7 = function $$eigenvectors() {
        var TMP_8, self = this;

        return $send(self.$build_eigenvectors(), 'map', [], (TMP_8 = function(ev){var self = TMP_8.$$s || this;

        
          
          if (ev == null) {
            ev = nil;
          };
          return $$($nesting, 'Vector').$send("new", ev);}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8))
      }, TMP_EigenvalueDecomposition_eigenvectors_7.$$arity = 0);
      
      Opal.def(self, '$eigenvalue_matrix', TMP_EigenvalueDecomposition_eigenvalue_matrix_9 = function $$eigenvalue_matrix() {
        var self = this;

        return $send($$($nesting, 'Matrix'), 'diagonal', Opal.to_a(self.$eigenvalues()))
      }, TMP_EigenvalueDecomposition_eigenvalue_matrix_9.$$arity = 0);
      Opal.alias(self, "d", "eigenvalue_matrix");
      
      Opal.def(self, '$to_ary', TMP_EigenvalueDecomposition_to_ary_10 = function $$to_ary() {
        var self = this;

        return [self.$v(), self.$d(), self.$v_inv()]
      }, TMP_EigenvalueDecomposition_to_ary_10.$$arity = 0);
      self.$alias_method("to_a", "to_ary");
      self.$private();
      
      Opal.def(self, '$build_eigenvectors', TMP_EigenvalueDecomposition_build_eigenvectors_11 = function $$build_eigenvectors() {
        var TMP_12, self = this;

        return $send(self.e.$each_with_index(), 'map', [], (TMP_12 = function(imag, i){var self = TMP_12.$$s || this, TMP_13, TMP_14, TMP_15;
          if (self.size == null) self.size = nil;

        
          
          if (imag == null) {
            imag = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          if (imag['$=='](0)) {
            return $send($$($nesting, 'Array'), 'new', [self.size], (TMP_13 = function(j){var self = TMP_13.$$s || this;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              return self.v['$[]'](j)['$[]'](i);}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13))
          } else if ($truthy($rb_gt(imag, 0))) {
            return $send($$($nesting, 'Array'), 'new', [self.size], (TMP_14 = function(j){var self = TMP_14.$$s || this;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              return self.$Complex(self.v['$[]'](j)['$[]'](i), self.v['$[]'](j)['$[]']($rb_plus(i, 1)));}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14))
          } else {
            return $send($$($nesting, 'Array'), 'new', [self.size], (TMP_15 = function(j){var self = TMP_15.$$s || this;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              return self.$Complex(self.v['$[]'](j)['$[]']($rb_minus(i, 1)), self.v['$[]'](j)['$[]'](i)['$-@']());}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15))
          };}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12))
      }, TMP_EigenvalueDecomposition_build_eigenvectors_11.$$arity = 0);
      
      Opal.def(self, '$cdiv', TMP_EigenvalueDecomposition_cdiv_16 = function $$cdiv(xr, xi, yr, yi) {
        var self = this, r = nil, d = nil;

        if ($truthy($rb_gt(yr.$abs(), yi.$abs()))) {
          
          r = $rb_divide(yi, yr);
          d = $rb_plus(yr, $rb_times(r, yi));
          return [$rb_divide($rb_plus(xr, $rb_times(r, xi)), d), $rb_divide($rb_minus(xi, $rb_times(r, xr)), d)];
        } else {
          
          r = $rb_divide(yr, yi);
          d = $rb_plus(yi, $rb_times(r, yr));
          return [$rb_divide($rb_plus($rb_times(r, xr), xi), d), $rb_divide($rb_minus($rb_times(r, xi), xr), d)];
        }
      }, TMP_EigenvalueDecomposition_cdiv_16.$$arity = 4);
      
      Opal.def(self, '$tridiagonalize', TMP_EigenvalueDecomposition_tridiagonalize_17 = function $$tridiagonalize() {
        var TMP_18, TMP_19, TMP_30, TMP_36, self = this, $writer = nil;

        
        $send(self.size, 'times', [], (TMP_18 = function(j){var self = TMP_18.$$s || this, $writer = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

        
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j)];
          $send(self.d, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
        $send($rb_minus(self.size, 1), 'downto', [$rb_plus(0, 1)], (TMP_19 = function(i){var self = TMP_19.$$s || this, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24, TMP_26, TMP_27, TMP_28, scale = nil, h = nil, $writer = nil, f = nil, g = nil, hh = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;

        
          
          if (i == null) {
            i = nil;
          };
          scale = 0.0;
          h = 0.0;
          $send(i, 'times', [], (TMP_20 = function(k){var self = TMP_20.$$s || this;
            if (self.d == null) self.d = nil;

          
            
            if (k == null) {
              k = nil;
            };
            return (scale = $rb_plus(scale, self.d['$[]'](k).$abs()));}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20));
          if ($truthy(scale['$=='](0.0))) {
            
            
            $writer = [i, self.d['$[]']($rb_minus(i, 1))];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(i, 'times', [], (TMP_21 = function(j){var self = TMP_21.$$s || this;
              if (self.v == null) self.v = nil;
              if (self.d == null) self.d = nil;

            
              
              if (j == null) {
                j = nil;
              };
              
              $writer = [j, self.v['$[]']($rb_minus(i, 1))['$[]'](j)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [j, 0.0];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [i, 0.0];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
          } else {
            
            $send(i, 'times', [], (TMP_22 = function(k){var self = TMP_22.$$s || this;
              if (self.d == null) self.d = nil;

            
              
              if (k == null) {
                k = nil;
              };
              
              $writer = [k, $rb_divide(self.d['$[]'](k), scale)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (h = $rb_plus(h, $rb_times(self.d['$[]'](k), self.d['$[]'](k))));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
            f = self.d['$[]']($rb_minus(i, 1));
            g = $$($nesting, 'Math').$sqrt(h);
            if ($truthy($rb_gt(f, 0))) {
              g = g['$-@']()};
            
            $writer = [i, $rb_times(scale, g)];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            h = $rb_minus(h, $rb_times(f, g));
            
            $writer = [$rb_minus(i, 1), $rb_minus(f, g)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(i, 'times', [], (TMP_23 = function(j){var self = TMP_23.$$s || this;
              if (self.e == null) self.e = nil;

            
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));
            $send(i, 'times', [], (TMP_24 = function(j){var self = TMP_24.$$s || this, TMP_25;
              if (self.d == null) self.d = nil;
              if (self.v == null) self.v = nil;
              if (self.e == null) self.e = nil;

            
              
              if (j == null) {
                j = nil;
              };
              f = self.d['$[]'](j);
              
              $writer = [i, f];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              g = $rb_plus(self.e['$[]'](j), $rb_times(self.v['$[]'](j)['$[]'](j), f));
              $send($rb_plus(j, 1), 'upto', [$rb_minus(i, 1)], (TMP_25 = function(k){var self = TMP_25.$$s || this;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;
                if (self.e == null) self.e = nil;

              
                
                if (k == null) {
                  k = nil;
                };
                g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]'](j), self.d['$[]'](k)));
                
                $writer = [k, $rb_plus(self.e['$[]'](k), $rb_times(self.v['$[]'](k)['$[]'](j), f))];
                $send(self.e, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
              
              $writer = [j, g];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24));
            f = 0.0;
            $send(i, 'times', [], (TMP_26 = function(j){var self = TMP_26.$$s || this;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

            
              
              if (j == null) {
                j = nil;
              };
              
              $writer = [j, $rb_divide(self.e['$[]'](j), h)];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (f = $rb_plus(f, $rb_times(self.e['$[]'](j), self.d['$[]'](j))));}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));
            hh = $rb_divide(f, $rb_plus(h, h));
            $send(i, 'times', [], (TMP_27 = function(j){var self = TMP_27.$$s || this;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

            
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, $rb_minus(self.e['$[]'](j), $rb_times(hh, self.d['$[]'](j)))];
              $send(self.e, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
            $send(i, 'times', [], (TMP_28 = function(j){var self = TMP_28.$$s || this, TMP_29;
              if (self.d == null) self.d = nil;
              if (self.e == null) self.e = nil;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              f = self.d['$[]'](j);
              g = self.e['$[]'](j);
              $send(j, 'upto', [$rb_minus(i, 1)], (TMP_29 = function(k){var self = TMP_29.$$s || this, $binary_op_recvr_tmp_3 = nil;
                if (self.v == null) self.v = nil;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;

              
                
                if (k == null) {
                  k = nil;
                };
                $binary_op_recvr_tmp_3 = self.v['$[]'](k);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_3['$[]'](j), $rb_plus($rb_times(f, self.e['$[]'](k)), $rb_times(g, self.d['$[]'](k))))];
                $send($binary_op_recvr_tmp_3, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
              
              $writer = [j, self.v['$[]']($rb_minus(i, 1))['$[]'](j)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [j, 0.0];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
          };
          
          $writer = [i, h];
          $send(self.d, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
        $send((0), 'upto', [$rb_minus($rb_minus(self.size, 1), 1)], (TMP_30 = function(i){var self = TMP_30.$$s || this, TMP_31, TMP_32, TMP_35, $writer = nil, h = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

        
          
          if (i == null) {
            i = nil;
          };
          
          $writer = [i, self.v['$[]'](i)['$[]'](i)];
          $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [i, 1.0];
          $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          h = self.d['$[]']($rb_plus(i, 1));
          if ($truthy(h['$!='](0.0))) {
            
            $send((0), 'upto', [i], (TMP_31 = function(k){var self = TMP_31.$$s || this;
              if (self.v == null) self.v = nil;
              if (self.d == null) self.d = nil;

            
              
              if (k == null) {
                k = nil;
              };
              $writer = [k, $rb_divide(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), h)];
              $send(self.d, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
            $send((0), 'upto', [i], (TMP_32 = function(j){var self = TMP_32.$$s || this, TMP_33, TMP_34, g = nil;

            
              
              if (j == null) {
                j = nil;
              };
              g = 0.0;
              $send((0), 'upto', [i], (TMP_33 = function(k){var self = TMP_33.$$s || this;
                if (self.v == null) self.v = nil;

              
                
                if (k == null) {
                  k = nil;
                };
                return (g = $rb_plus(g, $rb_times(self.v['$[]'](k)['$[]']($rb_plus(i, 1)), self.v['$[]'](k)['$[]'](j))));}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
              return $send((0), 'upto', [i], (TMP_34 = function(k){var self = TMP_34.$$s || this, $binary_op_recvr_tmp_4 = nil;
                if (self.v == null) self.v = nil;
                if (self.d == null) self.d = nil;

              
                
                if (k == null) {
                  k = nil;
                };
                $binary_op_recvr_tmp_4 = self.v['$[]'](k);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_4['$[]'](j), $rb_times(g, self.d['$[]'](k)))];
                $send($binary_op_recvr_tmp_4, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34));}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));};
          return $send((0), 'upto', [i], (TMP_35 = function(k){var self = TMP_35.$$s || this;
            if (self.v == null) self.v = nil;

          
            
            if (k == null) {
              k = nil;
            };
            $writer = [$rb_plus(i, 1), 0.0];
            $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35));}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
        $send(self.size, 'times', [], (TMP_36 = function(j){var self = TMP_36.$$s || this, $writer = nil;
          if (self.v == null) self.v = nil;
          if (self.size == null) self.size = nil;
          if (self.d == null) self.d = nil;

        
          
          if (j == null) {
            j = nil;
          };
          
          $writer = [j, self.v['$[]']($rb_minus(self.size, 1))['$[]'](j)];
          $send(self.d, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [j, 0.0];
          $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36));
        
        $writer = [$rb_minus(self.size, 1), 1.0];
        $send(self.v['$[]']($rb_minus(self.size, 1)), '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        
        $writer = [0, 0.0];
        $send(self.e, '[]=', Opal.to_a($writer));
        return $writer[$rb_minus($writer["length"], 1)];;
      }, TMP_EigenvalueDecomposition_tridiagonalize_17.$$arity = 0);
      
      Opal.def(self, '$diagonalize', TMP_EigenvalueDecomposition_diagonalize_37 = function $$diagonalize() {
        var TMP_38, TMP_39, TMP_43, self = this, $writer = nil, f = nil, tst1 = nil, eps = nil;

        
        $send((1), 'upto', [$rb_minus(self.size, 1)], (TMP_38 = function(i){var self = TMP_38.$$s || this, $writer = nil;
          if (self.e == null) self.e = nil;

        
          
          if (i == null) {
            i = nil;
          };
          $writer = [$rb_minus(i, 1), self.e['$[]'](i)];
          $send(self.e, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38));
        
        $writer = [$rb_minus(self.size, 1), 0.0];
        $send(self.e, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        f = 0.0;
        tst1 = 0.0;
        eps = $$$($$($nesting, 'Float'), 'EPSILON');
        $send(self.size, 'times', [], (TMP_39 = function(l){var self = TMP_39.$$s || this, $a, TMP_40, TMP_41, m = nil, iter = nil, g = nil, p = nil, r = nil, dl1 = nil, h = nil, c = nil, c2 = nil, c3 = nil, el1 = nil, s = nil, s2 = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.size == null) self.size = nil;

        
          
          if (l == null) {
            l = nil;
          };
          tst1 = [tst1, $rb_plus(self.d['$[]'](l).$abs(), self.e['$[]'](l).$abs())].$max();
          m = l;
          while ($truthy($rb_lt(m, self.size))) {
            
            if ($truthy($rb_le(self.e['$[]'](m).$abs(), $rb_times(eps, tst1)))) {
              break;};
            m = $rb_plus(m, 1);
          };
          if ($truthy($rb_gt(m, l))) {
            
            iter = 0;
            while ($truthy($rb_gt(self.e['$[]'](l).$abs(), $rb_times(eps, tst1)))) {
              
              iter = $rb_plus(iter, 1);
              g = self.d['$[]'](l);
              p = $rb_divide($rb_minus(self.d['$[]']($rb_plus(l, 1)), g), $rb_times(2.0, self.e['$[]'](l)));
              r = $$($nesting, 'Math').$hypot(p, 1.0);
              if ($truthy($rb_lt(p, 0))) {
                r = r['$-@']()};
              
              $writer = [l, $rb_divide(self.e['$[]'](l), $rb_plus(p, r))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_plus(l, 1), $rb_times(self.e['$[]'](l), $rb_plus(p, r))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              dl1 = self.d['$[]']($rb_plus(l, 1));
              h = $rb_minus(g, self.d['$[]'](l));
              $send($rb_plus(l, 2), 'upto', [$rb_minus(self.size, 1)], (TMP_40 = function(i){var self = TMP_40.$$s || this;
                if (self.d == null) self.d = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                $writer = [i, $rb_minus(self.d['$[]'](i), h)];
                $send(self.d, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
              f = $rb_plus(f, h);
              p = self.d['$[]'](m);
              c = 1.0;
              c2 = c;
              c3 = c;
              el1 = self.e['$[]']($rb_plus(l, 1));
              s = 0.0;
              s2 = 0.0;
              $send($rb_minus(m, 1), 'downto', [l], (TMP_41 = function(i){var self = TMP_41.$$s || this, TMP_42;
                if (self.e == null) self.e = nil;
                if (self.d == null) self.d = nil;
                if (self.size == null) self.size = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                c3 = c2;
                c2 = c;
                s2 = s;
                g = $rb_times(c, self.e['$[]'](i));
                h = $rb_times(c, p);
                r = $$($nesting, 'Math').$hypot(p, self.e['$[]'](i));
                
                $writer = [$rb_plus(i, 1), $rb_times(s, r)];
                $send(self.e, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                s = $rb_divide(self.e['$[]'](i), r);
                c = $rb_divide(p, r);
                p = $rb_minus($rb_times(c, self.d['$[]'](i)), $rb_times(s, g));
                
                $writer = [$rb_plus(i, 1), $rb_plus(h, $rb_times(s, $rb_plus($rb_times(c, g), $rb_times(s, self.d['$[]'](i)))))];
                $send(self.d, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                return $send(self.size, 'times', [], (TMP_42 = function(k){var self = TMP_42.$$s || this;
                  if (self.v == null) self.v = nil;

                
                  
                  if (k == null) {
                    k = nil;
                  };
                  h = self.v['$[]'](k)['$[]']($rb_plus(i, 1));
                  
                  $writer = [$rb_plus(i, 1), $rb_plus($rb_times(s, self.v['$[]'](k)['$[]'](i)), $rb_times(c, h))];
                  $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [i, $rb_minus($rb_times(c, self.v['$[]'](k)['$[]'](i)), $rb_times(s, h))];
                  $send(self.v['$[]'](k), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));}, TMP_41.$$s = self, TMP_41.$$arity = 1, TMP_41));
              p = $rb_divide($rb_times($rb_times($rb_times($rb_times(s['$-@'](), s2), c3), el1), self.e['$[]'](l)), dl1);
              
              $writer = [l, $rb_times(s, p)];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [l, $rb_times(c, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };};
          
          $writer = [l, $rb_plus(self.d['$[]'](l), f)];
          $send(self.d, '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          
          $writer = [l, 0.0];
          $send(self.e, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];;}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
        return $send((0), 'upto', [$rb_minus(self.size, 2)], (TMP_43 = function(i){var self = TMP_43.$$s || this, TMP_44, TMP_45, k = nil, p = nil;
          if (self.d == null) self.d = nil;
          if (self.size == null) self.size = nil;

        
          
          if (i == null) {
            i = nil;
          };
          k = i;
          p = self.d['$[]'](i);
          $send($rb_plus(i, 1), 'upto', [$rb_minus(self.size, 1)], (TMP_44 = function(j){var self = TMP_44.$$s || this;
            if (self.d == null) self.d = nil;

          
            
            if (j == null) {
              j = nil;
            };
            if ($truthy($rb_lt(self.d['$[]'](j), p))) {
              
              k = j;
              return (p = self.d['$[]'](j));
            } else {
              return nil
            };}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44));
          if ($truthy(k['$!='](i))) {
            
            
            $writer = [k, self.d['$[]'](i)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [i, p];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(self.size, 'times', [], (TMP_45 = function(j){var self = TMP_45.$$s || this;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              p = self.v['$[]'](j)['$[]'](i);
              
              $writer = [i, self.v['$[]'](j)['$[]'](k)];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [k, p];
              $send(self.v['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_45.$$s = self, TMP_45.$$arity = 1, TMP_45));
          } else {
            return nil
          };}, TMP_43.$$s = self, TMP_43.$$arity = 1, TMP_43));
      }, TMP_EigenvalueDecomposition_diagonalize_37.$$arity = 0);
      
      Opal.def(self, '$reduce_to_hessenberg', TMP_EigenvalueDecomposition_reduce_to_hessenberg_46 = function $$reduce_to_hessenberg() {
        var TMP_47, TMP_56, TMP_58, self = this, low = nil, high = nil;

        
        low = 0;
        high = $rb_minus(self.size, 1);
        $send($rb_plus(low, 1), 'upto', [$rb_minus(high, 1)], (TMP_47 = function(m){var self = TMP_47.$$s || this, TMP_48, TMP_49, TMP_50, TMP_53, scale = nil, h = nil, g = nil, $writer = nil;
          if (self.ort == null) self.ort = nil;
          if (self.size == null) self.size = nil;
          if (self.h == null) self.h = nil;

        
          
          if (m == null) {
            m = nil;
          };
          scale = 0.0;
          $send(m, 'upto', [high], (TMP_48 = function(i){var self = TMP_48.$$s || this;
            if (self.h == null) self.h = nil;

          
            
            if (i == null) {
              i = nil;
            };
            return (scale = $rb_plus(scale, self.h['$[]'](i)['$[]']($rb_minus(m, 1)).$abs()));}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48));
          if ($truthy(scale['$!='](0.0))) {
            
            h = 0.0;
            $send(high, 'downto', [m], (TMP_49 = function(i){var self = TMP_49.$$s || this, $writer = nil;
              if (self.h == null) self.h = nil;
              if (self.ort == null) self.ort = nil;

            
              
              if (i == null) {
                i = nil;
              };
              
              $writer = [i, $rb_divide(self.h['$[]'](i)['$[]']($rb_minus(m, 1)), scale)];
              $send(self.ort, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              return (h = $rb_plus(h, $rb_times(self.ort['$[]'](i), self.ort['$[]'](i))));}, TMP_49.$$s = self, TMP_49.$$arity = 1, TMP_49));
            g = $$($nesting, 'Math').$sqrt(h);
            if ($truthy($rb_gt(self.ort['$[]'](m), 0))) {
              g = g['$-@']()};
            h = $rb_minus(h, $rb_times(self.ort['$[]'](m), g));
            
            $writer = [m, $rb_minus(self.ort['$[]'](m), g)];
            $send(self.ort, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            $send(m, 'upto', [$rb_minus(self.size, 1)], (TMP_50 = function(j){var self = TMP_50.$$s || this, TMP_51, TMP_52, f = nil;

            
              
              if (j == null) {
                j = nil;
              };
              f = 0.0;
              $send(high, 'downto', [m], (TMP_51 = function(i){var self = TMP_51.$$s || this;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](i), self.h['$[]'](i)['$[]'](j))));}, TMP_51.$$s = self, TMP_51.$$arity = 1, TMP_51));
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], (TMP_52 = function(i){var self = TMP_52.$$s || this, $binary_op_recvr_tmp_5 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_5 = self.h['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_5['$[]'](j), $rb_times(f, self.ort['$[]'](i)))];
                $send($binary_op_recvr_tmp_5, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52));}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50));
            $send((0), 'upto', [high], (TMP_53 = function(i){var self = TMP_53.$$s || this, TMP_54, TMP_55, f = nil;

            
              
              if (i == null) {
                i = nil;
              };
              f = 0.0;
              $send(high, 'downto', [m], (TMP_54 = function(j){var self = TMP_54.$$s || this;
                if (self.ort == null) self.ort = nil;
                if (self.h == null) self.h = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                return (f = $rb_plus(f, $rb_times(self.ort['$[]'](j), self.h['$[]'](i)['$[]'](j))));}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54));
              f = $rb_divide(f, h);
              return $send(m, 'upto', [high], (TMP_55 = function(j){var self = TMP_55.$$s || this, $binary_op_recvr_tmp_6 = nil;
                if (self.h == null) self.h = nil;
                if (self.ort == null) self.ort = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_6 = self.h['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_6['$[]'](j), $rb_times(f, self.ort['$[]'](j)))];
                $send($binary_op_recvr_tmp_6, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_55.$$s = self, TMP_55.$$arity = 1, TMP_55));}, TMP_53.$$s = self, TMP_53.$$arity = 1, TMP_53));
            
            $writer = [m, $rb_times(scale, self.ort['$[]'](m))];
            $send(self.ort, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus(m, 1), $rb_times(scale, g)];
            $send(self.h['$[]'](m), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;
          } else {
            return nil
          };}, TMP_47.$$s = self, TMP_47.$$arity = 1, TMP_47));
        $send(self.size, 'times', [], (TMP_56 = function(i){var self = TMP_56.$$s || this, TMP_57;
          if (self.size == null) self.size = nil;

        
          
          if (i == null) {
            i = nil;
          };
          return $send(self.size, 'times', [], (TMP_57 = function(j){var self = TMP_57.$$s || this, $writer = nil;
            if (self.v == null) self.v = nil;

          
            
            if (j == null) {
              j = nil;
            };
            $writer = [j, (function() {if (i['$=='](j)) {
              return 1.0
            } else {
              return 0.0
            }; return nil; })()];
            $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_57.$$s = self, TMP_57.$$arity = 1, TMP_57));}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56));
        return $send($rb_minus(high, 1), 'downto', [$rb_plus(low, 1)], (TMP_58 = function(m){var self = TMP_58.$$s || this, TMP_59, TMP_60;
          if (self.h == null) self.h = nil;

        
          
          if (m == null) {
            m = nil;
          };
          if ($truthy(self.h['$[]'](m)['$[]']($rb_minus(m, 1))['$!='](0.0))) {
            
            $send($rb_plus(m, 1), 'upto', [high], (TMP_59 = function(i){var self = TMP_59.$$s || this, $writer = nil;
              if (self.h == null) self.h = nil;
              if (self.ort == null) self.ort = nil;

            
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, self.h['$[]'](i)['$[]']($rb_minus(m, 1))];
              $send(self.ort, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_59.$$s = self, TMP_59.$$arity = 1, TMP_59));
            return $send(m, 'upto', [high], (TMP_60 = function(j){var self = TMP_60.$$s || this, TMP_61, TMP_62, g = nil;
              if (self.ort == null) self.ort = nil;
              if (self.h == null) self.h = nil;

            
              
              if (j == null) {
                j = nil;
              };
              g = 0.0;
              $send(m, 'upto', [high], (TMP_61 = function(i){var self = TMP_61.$$s || this;
                if (self.ort == null) self.ort = nil;
                if (self.v == null) self.v = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                return (g = $rb_plus(g, $rb_times(self.ort['$[]'](i), self.v['$[]'](i)['$[]'](j))));}, TMP_61.$$s = self, TMP_61.$$arity = 1, TMP_61));
              g = $rb_divide($rb_divide(g, self.ort['$[]'](m)), self.h['$[]'](m)['$[]']($rb_minus(m, 1)));
              return $send(m, 'upto', [high], (TMP_62 = function(i){var self = TMP_62.$$s || this, $binary_op_recvr_tmp_7 = nil, $writer = nil;
                if (self.v == null) self.v = nil;
                if (self.ort == null) self.ort = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_7 = self.v['$[]'](i);
                
                $writer = [j, $rb_plus($binary_op_recvr_tmp_7['$[]'](j), $rb_times(g, self.ort['$[]'](i)))];
                $send($binary_op_recvr_tmp_7, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_62.$$s = self, TMP_62.$$arity = 1, TMP_62));}, TMP_60.$$s = self, TMP_60.$$arity = 1, TMP_60));
          } else {
            return nil
          };}, TMP_58.$$s = self, TMP_58.$$arity = 1, TMP_58));
      }, TMP_EigenvalueDecomposition_reduce_to_hessenberg_46.$$arity = 0);
      return (Opal.def(self, '$hessenberg_to_real_schur', TMP_EigenvalueDecomposition_hessenberg_to_real_schur_63 = function $$hessenberg_to_real_schur() {
        var TMP_64, $a, $b, TMP_66, TMP_67, TMP_68, TMP_69, TMP_70, TMP_71, TMP_72, TMP_76, TMP_83, TMP_85, self = this, nn = nil, n = nil, low = nil, high = nil, eps = nil, exshift = nil, p = nil, q = nil, r = nil, s = nil, z = nil, norm = nil, iter = nil, l = nil, $writer = nil, w = nil, x = nil, y = nil, m = nil;

        
        nn = self.size;
        n = $rb_minus(nn, 1);
        low = 0;
        high = $rb_minus(nn, 1);
        eps = $$$($$($nesting, 'Float'), 'EPSILON');
        exshift = 0.0;
        p = (q = (r = (s = (z = 0))));
        norm = 0.0;
        $send(nn, 'times', [], (TMP_64 = function(i){var self = TMP_64.$$s || this, $a, TMP_65, $writer = nil;
          if (self.h == null) self.h = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(($truthy($a = $rb_lt(i, low)) ? $a : $rb_gt(i, high)))) {
            
            
            $writer = [i, self.h['$[]'](i)['$[]'](i)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [i, 0.0];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;};
          return $send([$rb_minus(i, 1), 0].$max(), 'upto', [$rb_minus(nn, 1)], (TMP_65 = function(j){var self = TMP_65.$$s || this;
            if (self.h == null) self.h = nil;

          
            
            if (j == null) {
              j = nil;
            };
            return (norm = $rb_plus(norm, self.h['$[]'](i)['$[]'](j).$abs()));}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65));}, TMP_64.$$s = self, TMP_64.$$arity = 1, TMP_64));
        iter = 0;
        while ($truthy($rb_ge(n, low))) {
          
          l = n;
          while ($truthy($rb_gt(l, low))) {
            
            s = $rb_plus(self.h['$[]']($rb_minus(l, 1))['$[]']($rb_minus(l, 1)).$abs(), self.h['$[]'](l)['$[]'](l).$abs());
            if ($truthy(s['$=='](0.0))) {
              s = norm};
            if ($truthy($rb_lt(self.h['$[]'](l)['$[]']($rb_minus(l, 1)).$abs(), $rb_times(eps, s)))) {
              break;};
            l = $rb_minus(l, 1);
          };
          if ($truthy(l['$=='](n))) {
            
            
            $writer = [n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift)];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, self.h['$[]'](n)['$[]'](n)];
            $send(self.d, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, 0.0];
            $send(self.e, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            n = $rb_minus(n, 1);
            iter = 0;
          } else if ($truthy(l['$==']($rb_minus(n, 1)))) {
            
            w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));
            p = $rb_divide($rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), self.h['$[]'](n)['$[]'](n)), 2.0);
            q = $rb_plus($rb_times(p, p), w);
            z = $$($nesting, 'Math').$sqrt(q.$abs());
            
            $writer = [n, $rb_plus(self.h['$[]'](n)['$[]'](n), exshift)];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [$rb_minus(n, 1), $rb_plus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), exshift)];
            $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            x = self.h['$[]'](n)['$[]'](n);
            if ($truthy($rb_ge(q, 0))) {
              
              if ($truthy($rb_ge(p, 0))) {
                z = $rb_plus(p, z)
              } else {
                z = $rb_minus(p, z)
              };
              
              $writer = [$rb_minus(n, 1), $rb_plus(x, z)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, self.d['$[]']($rb_minus(n, 1))];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy(z['$!='](0.0))) {
                
                $writer = [n, $rb_minus(x, $rb_divide(w, z))];
                $send(self.d, '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];};
              
              $writer = [$rb_minus(n, 1), 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, 0.0];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              x = self.h['$[]'](n)['$[]']($rb_minus(n, 1));
              s = $rb_plus(x.$abs(), z.$abs());
              p = $rb_divide(x, s);
              q = $rb_divide(z, s);
              r = $$($nesting, 'Math').$sqrt($rb_plus($rb_times(p, p), $rb_times(q, q)));
              p = $rb_divide(p, r);
              q = $rb_divide(q, r);
              $send($rb_minus(n, 1), 'upto', [$rb_minus(nn, 1)], (TMP_66 = function(j){var self = TMP_66.$$s || this;
                if (self.h == null) self.h = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                z = self.h['$[]']($rb_minus(n, 1))['$[]'](j);
                
                $writer = [j, $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](n)['$[]'](j)))];
                $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [j, $rb_minus($rb_times(q, self.h['$[]'](n)['$[]'](j)), $rb_times(p, z))];
                $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_66.$$s = self, TMP_66.$$arity = 1, TMP_66));
              $send((0), 'upto', [n], (TMP_67 = function(i){var self = TMP_67.$$s || this;
                if (self.h == null) self.h = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                z = self.h['$[]'](i)['$[]']($rb_minus(n, 1));
                
                $writer = [$rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.h['$[]'](i)['$[]'](n)))];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [n, $rb_minus($rb_times(q, self.h['$[]'](i)['$[]'](n)), $rb_times(p, z))];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67));
              $send(low, 'upto', [high], (TMP_68 = function(i){var self = TMP_68.$$s || this;
                if (self.v == null) self.v = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                z = self.v['$[]'](i)['$[]']($rb_minus(n, 1));
                
                $writer = [$rb_minus(n, 1), $rb_plus($rb_times(q, z), $rb_times(p, self.v['$[]'](i)['$[]'](n)))];
                $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                $writer[$rb_minus($writer["length"], 1)];;
                
                $writer = [n, $rb_minus($rb_times(q, self.v['$[]'](i)['$[]'](n)), $rb_times(p, z))];
                $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_68.$$s = self, TMP_68.$$arity = 1, TMP_68));
            } else {
              
              
              $writer = [$rb_minus(n, 1), $rb_plus(x, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, $rb_plus(x, p)];
              $send(self.d, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [$rb_minus(n, 1), z];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, z['$-@']()];
              $send(self.e, '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            n = $rb_minus(n, 2);
            iter = 0;
          } else {
            
            x = self.h['$[]'](n)['$[]'](n);
            y = 0.0;
            w = 0.0;
            if ($truthy($rb_lt(l, n))) {
              
              y = self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1));
              w = $rb_times(self.h['$[]'](n)['$[]']($rb_minus(n, 1)), self.h['$[]']($rb_minus(n, 1))['$[]'](n));};
            if ($truthy(iter['$=='](10))) {
              
              exshift = $rb_plus(exshift, x);
              $send(low, 'upto', [n], (TMP_69 = function(i){var self = TMP_69.$$s || this, $binary_op_recvr_tmp_8 = nil;
                if (self.h == null) self.h = nil;

              
                
                if (i == null) {
                  i = nil;
                };
                $binary_op_recvr_tmp_8 = self.h['$[]'](i);
                
                $writer = [i, $rb_minus($binary_op_recvr_tmp_8['$[]'](i), x)];
                $send($binary_op_recvr_tmp_8, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_69.$$s = self, TMP_69.$$arity = 1, TMP_69));
              s = $rb_plus(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 2)).$abs());
              x = (y = $rb_times(0.75, s));
              w = $rb_times($rb_times(-0.4375, s), s);};
            if ($truthy(iter['$=='](30))) {
              
              s = $rb_divide($rb_minus(y, x), 2.0);
              s = $rb_times(s, $rb_plus(s, w));
              if ($truthy($rb_gt(s, 0))) {
                
                s = $$($nesting, 'Math').$sqrt(s);
                if ($truthy($rb_lt(y, x))) {
                  s = s['$-@']()};
                s = $rb_minus(x, $rb_divide(w, $rb_plus($rb_divide($rb_minus(y, x), 2.0), s)));
                $send(low, 'upto', [n], (TMP_70 = function(i){var self = TMP_70.$$s || this, $binary_op_recvr_tmp_9 = nil;
                  if (self.h == null) self.h = nil;

                
                  
                  if (i == null) {
                    i = nil;
                  };
                  $binary_op_recvr_tmp_9 = self.h['$[]'](i);
                  
                  $writer = [i, $rb_minus($binary_op_recvr_tmp_9['$[]'](i), s)];
                  $send($binary_op_recvr_tmp_9, '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_70.$$s = self, TMP_70.$$arity = 1, TMP_70));
                exshift = $rb_plus(exshift, s);
                x = (y = (w = 0.964));};};
            iter = $rb_plus(iter, 1);
            m = $rb_minus(n, 2);
            while ($truthy($rb_ge(m, l))) {
              
              z = self.h['$[]'](m)['$[]'](m);
              r = $rb_minus(x, z);
              s = $rb_minus(y, z);
              p = $rb_plus($rb_divide($rb_minus($rb_times(r, s), w), self.h['$[]']($rb_plus(m, 1))['$[]'](m)), self.h['$[]'](m)['$[]']($rb_plus(m, 1)));
              q = $rb_minus($rb_minus($rb_minus(self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)), z), r), s);
              r = self.h['$[]']($rb_plus(m, 2))['$[]']($rb_plus(m, 1));
              s = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
              p = $rb_divide(p, s);
              q = $rb_divide(q, s);
              r = $rb_divide(r, s);
              if ($truthy(m['$=='](l))) {
                break;};
              if ($truthy($rb_lt($rb_times(self.h['$[]'](m)['$[]']($rb_minus(m, 1)).$abs(), $rb_plus(q.$abs(), r.$abs())), $rb_times(eps, $rb_times(p.$abs(), $rb_plus($rb_plus(self.h['$[]']($rb_minus(m, 1))['$[]']($rb_minus(m, 1)).$abs(), z.$abs()), self.h['$[]']($rb_plus(m, 1))['$[]']($rb_plus(m, 1)).$abs())))))) {
                break;};
              m = $rb_minus(m, 1);
            };
            $send($rb_plus(m, 2), 'upto', [n], (TMP_71 = function(i){var self = TMP_71.$$s || this;
              if (self.h == null) self.h = nil;

            
              
              if (i == null) {
                i = nil;
              };
              
              $writer = [$rb_minus(i, 2), 0.0];
              $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              if ($truthy($rb_gt(i, $rb_plus(m, 2)))) {
                
                $writer = [$rb_minus(i, 3), 0.0];
                $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];
              } else {
                return nil
              };}, TMP_71.$$s = self, TMP_71.$$arity = 1, TMP_71));
            $send(m, 'upto', [$rb_minus(n, 1)], (TMP_72 = function(k){var self = TMP_72.$$s || this, TMP_73, TMP_74, TMP_75, notlast = nil;
              if (self.h == null) self.h = nil;

            
              
              if (k == null) {
                k = nil;
              };
              notlast = k['$!=']($rb_minus(n, 1));
              if ($truthy(k['$!='](m))) {
                
                p = self.h['$[]'](k)['$[]']($rb_minus(k, 1));
                q = self.h['$[]']($rb_plus(k, 1))['$[]']($rb_minus(k, 1));
                r = (function() {if ($truthy(notlast)) {
                  return self.h['$[]']($rb_plus(k, 2))['$[]']($rb_minus(k, 1))
                } else {
                  return 0.0
                }; return nil; })();
                x = $rb_plus($rb_plus(p.$abs(), q.$abs()), r.$abs());
                if (x['$=='](0)) {
                  return nil;};
                p = $rb_divide(p, x);
                q = $rb_divide(q, x);
                r = $rb_divide(r, x);};
              s = $$($nesting, 'Math').$sqrt($rb_plus($rb_plus($rb_times(p, p), $rb_times(q, q)), $rb_times(r, r)));
              if ($truthy($rb_lt(p, 0))) {
                s = s['$-@']()};
              if ($truthy(s['$!='](0))) {
                
                if ($truthy(k['$!='](m))) {
                  
                  $writer = [$rb_minus(k, 1), $rb_times(s['$-@'](), x)];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];
                } else if ($truthy(l['$!='](m))) {
                  
                  $writer = [$rb_minus(k, 1), self.h['$[]'](k)['$[]']($rb_minus(k, 1))['$-@']()];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];};
                p = $rb_plus(p, s);
                x = $rb_divide(p, s);
                y = $rb_divide(q, s);
                z = $rb_divide(r, s);
                q = $rb_divide(q, p);
                r = $rb_divide(r, p);
                $send(k, 'upto', [$rb_minus(nn, 1)], (TMP_73 = function(j){var self = TMP_73.$$s || this;
                  if (self.h == null) self.h = nil;

                
                  
                  if (j == null) {
                    j = nil;
                  };
                  p = $rb_plus(self.h['$[]'](k)['$[]'](j), $rb_times(q, self.h['$[]']($rb_plus(k, 1))['$[]'](j)));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(r, self.h['$[]']($rb_plus(k, 2))['$[]'](j)));
                    
                    $writer = [j, $rb_minus(self.h['$[]']($rb_plus(k, 2))['$[]'](j), $rb_times(p, z))];
                    $send(self.h['$[]']($rb_plus(k, 2)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [j, $rb_minus(self.h['$[]'](k)['$[]'](j), $rb_times(p, x))];
                  $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [j, $rb_minus(self.h['$[]']($rb_plus(k, 1))['$[]'](j), $rb_times(p, y))];
                  $send(self.h['$[]']($rb_plus(k, 1)), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_73.$$s = self, TMP_73.$$arity = 1, TMP_73));
                $send((0), 'upto', [[n, $rb_plus(k, 3)].$min()], (TMP_74 = function(i){var self = TMP_74.$$s || this;
                  if (self.h == null) self.h = nil;

                
                  
                  if (i == null) {
                    i = nil;
                  };
                  p = $rb_plus($rb_times(x, self.h['$[]'](i)['$[]'](k)), $rb_times(y, self.h['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.h['$[]'](i)['$[]']($rb_plus(k, 2))));
                    
                    $writer = [$rb_plus(k, 2), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r))];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [k, $rb_minus(self.h['$[]'](i)['$[]'](k), p)];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$rb_plus(k, 1), $rb_minus(self.h['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_74.$$s = self, TMP_74.$$arity = 1, TMP_74));
                return $send(low, 'upto', [high], (TMP_75 = function(i){var self = TMP_75.$$s || this;
                  if (self.v == null) self.v = nil;

                
                  
                  if (i == null) {
                    i = nil;
                  };
                  p = $rb_plus($rb_times(x, self.v['$[]'](i)['$[]'](k)), $rb_times(y, self.v['$[]'](i)['$[]']($rb_plus(k, 1))));
                  if ($truthy(notlast)) {
                    
                    p = $rb_plus(p, $rb_times(z, self.v['$[]'](i)['$[]']($rb_plus(k, 2))));
                    
                    $writer = [$rb_plus(k, 2), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 2)), $rb_times(p, r))];
                    $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;};
                  
                  $writer = [k, $rb_minus(self.v['$[]'](i)['$[]'](k), p)];
                  $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [$rb_plus(k, 1), $rb_minus(self.v['$[]'](i)['$[]']($rb_plus(k, 1)), $rb_times(p, q))];
                  $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
                  return $writer[$rb_minus($writer["length"], 1)];;}, TMP_75.$$s = self, TMP_75.$$arity = 1, TMP_75));
              } else {
                return nil
              };}, TMP_72.$$s = self, TMP_72.$$arity = 1, TMP_72));
          };
        };
        if ($truthy(norm['$=='](0.0))) {
          return nil};
        $send($rb_minus(nn, 1), 'downto', [0], (TMP_76 = function(k){var self = TMP_76.$$s || this, TMP_77, $c, $d, TMP_80, cdivr = nil, cdivi = nil;
          if (self.d == null) self.d = nil;
          if (self.e == null) self.e = nil;
          if (self.h == null) self.h = nil;

        
          
          if (k == null) {
            k = nil;
          };
          p = self.d['$[]'](k);
          q = self.e['$[]'](k);
          if ($truthy(q['$=='](0))) {
            
            l = k;
            
            $writer = [k, 1.0];
            $send(self.h['$[]'](k), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($rb_minus(k, 1), 'downto', [0], (TMP_77 = function(i){var self = TMP_77.$$s || this, TMP_78, TMP_79, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

            
              
              if (i == null) {
                i = nil;
              };
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              r = 0.0;
              $send(l, 'upto', [k], (TMP_78 = function(j){var self = TMP_78.$$s || this;
                if (self.h == null) self.h = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                return (r = $rb_plus(r, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](k))));}, TMP_78.$$s = self, TMP_78.$$arity = 1, TMP_78));
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                return (s = r);
              } else {
                
                l = i;
                if ($truthy(self.e['$[]'](i)['$=='](0.0))) {
                  if ($truthy(w['$!='](0.0))) {
                    
                    $writer = [k, $rb_divide(r['$-@'](), w)];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [k, $rb_divide(r['$-@'](), $rb_times(eps, norm))];
                    $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  }
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  q = $rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i)));
                  t = $rb_divide($rb_minus($rb_times(x, s), $rb_times(z, r)), q);
                  
                  $writer = [k, t];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy($rb_gt(x.$abs(), z.$abs()))) {
                    
                    $writer = [k, $rb_divide($rb_minus(r['$-@'](), $rb_times(w, t)), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  } else {
                    
                    $writer = [k, $rb_divide($rb_minus(s['$-@'](), $rb_times(y, t)), z)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];
                  };
                };
                t = self.h['$[]'](i)['$[]'](k).$abs();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [k], (TMP_79 = function(j){var self = TMP_79.$$s || this;
                    if (self.h == null) self.h = nil;

                  
                    
                    if (j == null) {
                      j = nil;
                    };
                    $writer = [k, $rb_divide(self.h['$[]'](j)['$[]'](k), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];}, TMP_79.$$s = self, TMP_79.$$arity = 1, TMP_79))
                } else {
                  return nil
                };
              };}, TMP_77.$$s = self, TMP_77.$$arity = 1, TMP_77));
          } else if ($truthy($rb_lt(q, 0))) {
            
            l = $rb_minus(n, 1);
            if ($truthy($rb_gt(self.h['$[]'](n)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]']($rb_minus(n, 1))['$[]'](n).$abs()))) {
              
              
              $writer = [$rb_minus(n, 1), $rb_divide(q, self.h['$[]'](n)['$[]']($rb_minus(n, 1)))];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, $rb_divide($rb_minus(self.h['$[]'](n)['$[]'](n), p)['$-@'](), self.h['$[]'](n)['$[]']($rb_minus(n, 1)))];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            } else {
              
              $d = self.$cdiv(0.0, self.h['$[]']($rb_minus(n, 1))['$[]'](n)['$-@'](), $rb_minus(self.h['$[]']($rb_minus(n, 1))['$[]']($rb_minus(n, 1)), p), q), $c = Opal.to_ary($d), (cdivr = ($c[0] == null ? nil : $c[0])), (cdivi = ($c[1] == null ? nil : $c[1])), $d;
              
              $writer = [$rb_minus(n, 1), cdivr];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [n, cdivi];
              $send(self.h['$[]']($rb_minus(n, 1)), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
            };
            
            $writer = [$rb_minus(n, 1), 0.0];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [n, 1.0];
            $send(self.h['$[]'](n), '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send($rb_minus(n, 2), 'downto', [0], (TMP_80 = function(i){var self = TMP_80.$$s || this, TMP_81, $e, $f, TMP_82, ra = nil, sa = nil, vr = nil, vi = nil, t = nil;
              if (self.h == null) self.h = nil;
              if (self.e == null) self.e = nil;
              if (self.d == null) self.d = nil;

            
              
              if (i == null) {
                i = nil;
              };
              ra = 0.0;
              sa = 0.0;
              $send(l, 'upto', [n], (TMP_81 = function(j){var self = TMP_81.$$s || this;
                if (self.h == null) self.h = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                ra = $rb_plus(ra, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]']($rb_minus(n, 1))));
                return (sa = $rb_plus(sa, $rb_times(self.h['$[]'](i)['$[]'](j), self.h['$[]'](j)['$[]'](n))));}, TMP_81.$$s = self, TMP_81.$$arity = 1, TMP_81));
              w = $rb_minus(self.h['$[]'](i)['$[]'](i), p);
              if ($truthy($rb_lt(self.e['$[]'](i), 0.0))) {
                
                z = w;
                r = ra;
                return (s = sa);
              } else {
                
                l = i;
                if ($truthy(self.e['$[]'](i)['$=='](0))) {
                  
                  $f = self.$cdiv(ra['$-@'](), sa['$-@'](), w, q), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                  
                  $writer = [$rb_minus(n, 1), cdivr];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [n, cdivi];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                } else {
                  
                  x = self.h['$[]'](i)['$[]']($rb_plus(i, 1));
                  y = self.h['$[]']($rb_plus(i, 1))['$[]'](i);
                  vr = $rb_minus($rb_plus($rb_times($rb_minus(self.d['$[]'](i), p), $rb_minus(self.d['$[]'](i), p)), $rb_times(self.e['$[]'](i), self.e['$[]'](i))), $rb_times(q, q));
                  vi = $rb_times($rb_times($rb_minus(self.d['$[]'](i), p), 2.0), q);
                  if ($truthy((($e = vr['$=='](0.0)) ? vi['$=='](0.0) : vr['$=='](0.0)))) {
                    vr = $rb_times($rb_times(eps, norm), $rb_plus($rb_plus($rb_plus($rb_plus(w.$abs(), q.$abs()), x.$abs()), y.$abs()), z.$abs()))};
                  $f = self.$cdiv($rb_plus($rb_minus($rb_times(x, r), $rb_times(z, ra)), $rb_times(q, sa)), $rb_minus($rb_minus($rb_times(x, s), $rb_times(z, sa)), $rb_times(q, ra)), vr, vi), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                  
                  $writer = [$rb_minus(n, 1), cdivr];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  
                  $writer = [n, cdivi];
                  $send(self.h['$[]'](i), '[]=', Opal.to_a($writer));
                  $writer[$rb_minus($writer["length"], 1)];;
                  if ($truthy($rb_gt(x.$abs(), $rb_plus(z.$abs(), q.$abs())))) {
                    
                    
                    $writer = [$rb_minus(n, 1), $rb_divide($rb_plus($rb_minus(ra['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_times(q, self.h['$[]'](i)['$[]'](n))), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, $rb_divide($rb_minus($rb_minus(sa['$-@'](), $rb_times(w, self.h['$[]'](i)['$[]'](n))), $rb_times(q, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), x)];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  } else {
                    
                    $f = self.$cdiv($rb_minus(r['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]']($rb_minus(n, 1)))), $rb_minus(s['$-@'](), $rb_times(y, self.h['$[]'](i)['$[]'](n))), z, q), $e = Opal.to_ary($f), (cdivr = ($e[0] == null ? nil : $e[0])), (cdivi = ($e[1] == null ? nil : $e[1])), $f;
                    
                    $writer = [$rb_minus(n, 1), cdivr];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, cdivi];
                    $send(self.h['$[]']($rb_plus(i, 1)), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                  };
                };
                t = [self.h['$[]'](i)['$[]']($rb_minus(n, 1)).$abs(), self.h['$[]'](i)['$[]'](n).$abs()].$max();
                if ($truthy($rb_gt($rb_times($rb_times(eps, t), t), 1))) {
                  return $send(i, 'upto', [n], (TMP_82 = function(j){var self = TMP_82.$$s || this;
                    if (self.h == null) self.h = nil;

                  
                    
                    if (j == null) {
                      j = nil;
                    };
                    
                    $writer = [$rb_minus(n, 1), $rb_divide(self.h['$[]'](j)['$[]']($rb_minus(n, 1)), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    $writer[$rb_minus($writer["length"], 1)];;
                    
                    $writer = [n, $rb_divide(self.h['$[]'](j)['$[]'](n), t)];
                    $send(self.h['$[]'](j), '[]=', Opal.to_a($writer));
                    return $writer[$rb_minus($writer["length"], 1)];;}, TMP_82.$$s = self, TMP_82.$$arity = 1, TMP_82))
                } else {
                  return nil
                };
              };}, TMP_80.$$s = self, TMP_80.$$arity = 1, TMP_80));
          } else {
            return nil
          };}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76));
        $send(nn, 'times', [], (TMP_83 = function(i){var self = TMP_83.$$s || this, $c, TMP_84;

        
          
          if (i == null) {
            i = nil;
          };
          if ($truthy(($truthy($c = $rb_lt(i, low)) ? $c : $rb_gt(i, high)))) {
            return $send(i, 'upto', [$rb_minus(nn, 1)], (TMP_84 = function(j){var self = TMP_84.$$s || this;
              if (self.h == null) self.h = nil;
              if (self.v == null) self.v = nil;

            
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, self.h['$[]'](i)['$[]'](j)];
              $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_84.$$s = self, TMP_84.$$arity = 1, TMP_84))
          } else {
            return nil
          };}, TMP_83.$$s = self, TMP_83.$$arity = 1, TMP_83));
        return $send($rb_minus(nn, 1), 'downto', [low], (TMP_85 = function(j){var self = TMP_85.$$s || this, TMP_86;

        
          
          if (j == null) {
            j = nil;
          };
          return $send(low, 'upto', [high], (TMP_86 = function(i){var self = TMP_86.$$s || this, TMP_87;
            if (self.v == null) self.v = nil;

          
            
            if (i == null) {
              i = nil;
            };
            z = 0.0;
            $send(low, 'upto', [[j, high].$min()], (TMP_87 = function(k){var self = TMP_87.$$s || this;
              if (self.v == null) self.v = nil;
              if (self.h == null) self.h = nil;

            
              
              if (k == null) {
                k = nil;
              };
              return (z = $rb_plus(z, $rb_times(self.v['$[]'](i)['$[]'](k), self.h['$[]'](k)['$[]'](j))));}, TMP_87.$$s = self, TMP_87.$$arity = 1, TMP_87));
            
            $writer = [j, z];
            $send(self.v['$[]'](i), '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_86.$$s = self, TMP_86.$$arity = 1, TMP_86));}, TMP_85.$$s = self, TMP_85.$$arity = 1, TMP_85));
      }, TMP_EigenvalueDecomposition_hessenberg_to_real_schur_63.$$arity = 0), nil) && 'hessenberg_to_real_schur';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["matrix/lup_decomposition"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$build', '$min', '$>', '$[]', '$==', '$<=', '$new', '$each_with_index', '$[]=', '$-', '$send', '$l', '$u', '$p', '$alias_method', '$attr_reader', '$times', '$!=', '$Raise', '$*', '$singular?', '$is_a?', '$row_count', '$column_count', '$map', '$to_a', '$row', '$upto', '$+', '$downto', '$quo', '$convert_to_array', '$size', '$values_at', '$elements', '$raise', '$class', '$abs', '$-@', '$<']);
  return (function($base, $super, $parent_nesting) {
    function $Matrix(){};
    var self = $Matrix = $klass($base, $super, 'Matrix', $Matrix);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $LUPDecomposition(){};
      var self = $LUPDecomposition = $klass($base, $super, 'LUPDecomposition', $LUPDecomposition);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_LUPDecomposition_l_1, TMP_LUPDecomposition_u_3, TMP_LUPDecomposition_p_5, TMP_LUPDecomposition_to_ary_8, TMP_LUPDecomposition_singular$q_9, TMP_LUPDecomposition_det_11, TMP_LUPDecomposition_solve_13, TMP_LUPDecomposition_initialize_26;

      def.row_count = def.column_count = def.pivots = def.pivot_sign = nil;
      
      self.$include($$$($$($nesting, 'Matrix'), 'ConversionHelper'));
      
      Opal.def(self, '$l', TMP_LUPDecomposition_l_1 = function $$l() {
        var TMP_2, self = this;

        return $send($$($nesting, 'Matrix'), 'build', [self.row_count, [self.column_count, self.row_count].$min()], (TMP_2 = function(i, j){var self = TMP_2.$$s || this;
          if (self.lu == null) self.lu = nil;

        
          
          if (i == null) {
            i = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if ($truthy($rb_gt(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else if ($truthy(i['$=='](j))) {
            return 1
          } else {
            return 0
          };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2))
      }, TMP_LUPDecomposition_l_1.$$arity = 0);
      
      Opal.def(self, '$u', TMP_LUPDecomposition_u_3 = function $$u() {
        var TMP_4, self = this;

        return $send($$($nesting, 'Matrix'), 'build', [[self.column_count, self.row_count].$min(), self.column_count], (TMP_4 = function(i, j){var self = TMP_4.$$s || this;
          if (self.lu == null) self.lu = nil;

        
          
          if (i == null) {
            i = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if ($truthy($rb_le(i, j))) {
            return self.lu['$[]'](i)['$[]'](j)
          } else {
            return 0
          };}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4))
      }, TMP_LUPDecomposition_u_3.$$arity = 0);
      
      Opal.def(self, '$p', TMP_LUPDecomposition_p_5 = function $$p() {
        var TMP_6, TMP_7, self = this, rows = nil;

        
        rows = $send($$($nesting, 'Array'), 'new', [self.row_count], (TMP_6 = function(){var self = TMP_6.$$s || this;
          if (self.row_count == null) self.row_count = nil;

        return $$($nesting, 'Array').$new(self.row_count, 0)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
        $send(self.pivots, 'each_with_index', [], (TMP_7 = function(p, i){var self = TMP_7.$$s || this, $writer = nil;

        
          
          if (p == null) {
            p = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          $writer = [p, 1];
          $send(rows['$[]'](i), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7));
        return $$($nesting, 'Matrix').$send("new", rows, self.row_count);
      }, TMP_LUPDecomposition_p_5.$$arity = 0);
      
      Opal.def(self, '$to_ary', TMP_LUPDecomposition_to_ary_8 = function $$to_ary() {
        var self = this;

        return [self.$l(), self.$u(), self.$p()]
      }, TMP_LUPDecomposition_to_ary_8.$$arity = 0);
      self.$alias_method("to_a", "to_ary");
      self.$attr_reader("pivots");
      
      Opal.def(self, '$singular?', TMP_LUPDecomposition_singular$q_9 = function() {try {

        var TMP_10, self = this;

        
        $send(self.column_count, 'times', [], (TMP_10 = function(j){var self = TMP_10.$$s || this;
          if (self.lu == null) self.lu = nil;

        
          
          if (j == null) {
            j = nil;
          };
          if ($truthy(self.lu['$[]'](j)['$[]'](j)['$=='](0))) {
            Opal.ret(true)
          } else {
            return nil
          };}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
        return false;
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_LUPDecomposition_singular$q_9.$$arity = 0);
      
      Opal.def(self, '$det', TMP_LUPDecomposition_det_11 = function $$det() {
        var TMP_12, self = this, d = nil;

        
        if ($truthy(self.row_count['$!='](self.column_count))) {
          $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
        d = self.pivot_sign;
        $send(self.column_count, 'times', [], (TMP_12 = function(j){var self = TMP_12.$$s || this;
          if (self.lu == null) self.lu = nil;

        
          
          if (j == null) {
            j = nil;
          };
          return (d = $rb_times(d, self.lu['$[]'](j)['$[]'](j)));}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12));
        return d;
      }, TMP_LUPDecomposition_det_11.$$arity = 0);
      self.$alias_method("determinant", "det");
      
      Opal.def(self, '$solve', TMP_LUPDecomposition_solve_13 = function $$solve(b) {
        var TMP_14, TMP_15, TMP_18, TMP_22, TMP_24, self = this, nx = nil, m = nil;

        
        if ($truthy(self['$singular?']())) {
          $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrNotRegular'), "Matrix is singular.")};
        if ($truthy(b['$is_a?']($$($nesting, 'Matrix')))) {
          
          if ($truthy(b.$row_count()['$!='](self.row_count))) {
            $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
          nx = b.$column_count();
          m = $send(self.pivots, 'map', [], (TMP_14 = function(row){var self = TMP_14.$$s || this;

          
            
            if (row == null) {
              row = nil;
            };
            return b.$row(row).$to_a();}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14));
          $send(self.column_count, 'times', [], (TMP_15 = function(k){var self = TMP_15.$$s || this, TMP_16;
            if (self.column_count == null) self.column_count = nil;

          
            
            if (k == null) {
              k = nil;
            };
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], (TMP_16 = function(i){var self = TMP_16.$$s || this, TMP_17;

            
              
              if (i == null) {
                i = nil;
              };
              return $send(nx, 'times', [], (TMP_17 = function(j){var self = TMP_17.$$s || this, $binary_op_recvr_tmp_10 = nil, $writer = nil;
                if (self.lu == null) self.lu = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_10 = m['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_10['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))];
                $send($binary_op_recvr_tmp_10, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15));
          $send($rb_minus(self.column_count, 1), 'downto', [0], (TMP_18 = function(k){var self = TMP_18.$$s || this, TMP_19, TMP_20;

          
            
            if (k == null) {
              k = nil;
            };
            $send(nx, 'times', [], (TMP_19 = function(j){var self = TMP_19.$$s || this, $writer = nil;
              if (self.lu == null) self.lu = nil;

            
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, m['$[]'](k)['$[]'](j).$quo(self.lu['$[]'](k)['$[]'](k))];
              $send(m['$[]'](k), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
            return $send(k, 'times', [], (TMP_20 = function(i){var self = TMP_20.$$s || this, TMP_21;

            
              
              if (i == null) {
                i = nil;
              };
              return $send(nx, 'times', [], (TMP_21 = function(j){var self = TMP_21.$$s || this, $binary_op_recvr_tmp_11 = nil, $writer = nil;
                if (self.lu == null) self.lu = nil;

              
                
                if (j == null) {
                  j = nil;
                };
                $binary_op_recvr_tmp_11 = m['$[]'](i);
                
                $writer = [j, $rb_minus($binary_op_recvr_tmp_11['$[]'](j), $rb_times(m['$[]'](k)['$[]'](j), self.lu['$[]'](i)['$[]'](k)))];
                $send($binary_op_recvr_tmp_11, '[]=', Opal.to_a($writer));
                return $writer[$rb_minus($writer["length"], 1)];;}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20));}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18));
          return $$($nesting, 'Matrix').$send("new", m, nx);
        } else {
          
          b = self.$convert_to_array(b);
          if ($truthy(b.$size()['$!='](self.row_count))) {
            $$($nesting, 'Matrix').$Raise($$$($$($nesting, 'Matrix'), 'ErrDimensionMismatch'))};
          m = $send(b, 'values_at', Opal.to_a(self.pivots));
          $send(self.column_count, 'times', [], (TMP_22 = function(k){var self = TMP_22.$$s || this, TMP_23;
            if (self.column_count == null) self.column_count = nil;

          
            
            if (k == null) {
              k = nil;
            };
            return $send($rb_plus(k, 1), 'upto', [$rb_minus(self.column_count, 1)], (TMP_23 = function(i){var self = TMP_23.$$s || this, $writer = nil;
              if (self.lu == null) self.lu = nil;

            
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))];
              $send(m, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23));}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22));
          $send($rb_minus(self.column_count, 1), 'downto', [0], (TMP_24 = function(k){var self = TMP_24.$$s || this, TMP_25, $writer = nil;
            if (self.lu == null) self.lu = nil;

          
            
            if (k == null) {
              k = nil;
            };
            
            $writer = [k, m['$[]'](k).$quo(self.lu['$[]'](k)['$[]'](k))];
            $send(m, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            return $send(k, 'times', [], (TMP_25 = function(i){var self = TMP_25.$$s || this;
              if (self.lu == null) self.lu = nil;

            
              
              if (i == null) {
                i = nil;
              };
              $writer = [i, $rb_minus(m['$[]'](i), $rb_times(m['$[]'](k), self.lu['$[]'](i)['$[]'](k)))];
              $send(m, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24));
          return $$($nesting, 'Vector').$elements(m, false);
        };
      }, TMP_LUPDecomposition_solve_13.$$arity = 1);
      return (Opal.def(self, '$initialize', TMP_LUPDecomposition_initialize_26 = function $$initialize(a) {
        var TMP_27, TMP_28, self = this, lu_col_j = nil;

        
        if ($truthy(a['$is_a?']($$($nesting, 'Matrix')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected Matrix but got " + (a.$class()))
        };
        self.lu = a.$to_a();
        self.row_count = a.$row_count();
        self.column_count = a.$column_count();
        self.pivots = $$($nesting, 'Array').$new(self.row_count);
        $send(self.row_count, 'times', [], (TMP_27 = function(i){var self = TMP_27.$$s || this, $writer = nil;
          if (self.pivots == null) self.pivots = nil;

        
          
          if (i == null) {
            i = nil;
          };
          $writer = [i, i];
          $send(self.pivots, '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27));
        self.pivot_sign = 1;
        lu_col_j = $$($nesting, 'Array').$new(self.row_count);
        return $send(self.column_count, 'times', [], (TMP_28 = function(j){var self = TMP_28.$$s || this, TMP_29, TMP_30, TMP_32, TMP_33, $a, TMP_34, p = nil, k = nil, $writer = nil;
          if (self.row_count == null) self.row_count = nil;
          if (self.column_count == null) self.column_count = nil;
          if (self.pivots == null) self.pivots = nil;
          if (self.pivot_sign == null) self.pivot_sign = nil;
          if (self.lu == null) self.lu = nil;

        
          
          if (j == null) {
            j = nil;
          };
          $send(self.row_count, 'times', [], (TMP_29 = function(i){var self = TMP_29.$$s || this, $writer = nil;
            if (self.lu == null) self.lu = nil;

          
            
            if (i == null) {
              i = nil;
            };
            $writer = [i, self.lu['$[]'](i)['$[]'](j)];
            $send(lu_col_j, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_29.$$s = self, TMP_29.$$arity = 1, TMP_29));
          $send(self.row_count, 'times', [], (TMP_30 = function(i){var self = TMP_30.$$s || this, TMP_31, lu_row_i = nil, kmax = nil, s = nil, $writer = nil;
            if (self.lu == null) self.lu = nil;

          
            
            if (i == null) {
              i = nil;
            };
            lu_row_i = self.lu['$[]'](i);
            kmax = [i, j].$min();
            s = 0;
            $send(kmax, 'times', [], (TMP_31 = function(k){var self = TMP_31.$$s || this;

            
              
              if (k == null) {
                k = nil;
              };
              return (s = $rb_plus(s, $rb_times(lu_row_i['$[]'](k), lu_col_j['$[]'](k))));}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31));
            
            $writer = [j, (($writer = [i, $rb_minus(lu_col_j['$[]'](i), s)]), $send(lu_col_j, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)])];
            $send(lu_row_i, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30));
          p = j;
          $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], (TMP_32 = function(i){var self = TMP_32.$$s || this;

          
            
            if (i == null) {
              i = nil;
            };
            if ($truthy($rb_gt(lu_col_j['$[]'](i).$abs(), lu_col_j['$[]'](p).$abs()))) {
              return (p = i)
            } else {
              return nil
            };}, TMP_32.$$s = self, TMP_32.$$arity = 1, TMP_32));
          if ($truthy(p['$!='](j))) {
            
            $send(self.column_count, 'times', [], (TMP_33 = function(k){var self = TMP_33.$$s || this, t = nil, $writer = nil;
              if (self.lu == null) self.lu = nil;

            
              
              if (k == null) {
                k = nil;
              };
              t = self.lu['$[]'](p)['$[]'](k);
              
              $writer = [k, self.lu['$[]'](j)['$[]'](k)];
              $send(self.lu['$[]'](p), '[]=', Opal.to_a($writer));
              $writer[$rb_minus($writer["length"], 1)];;
              
              $writer = [k, t];
              $send(self.lu['$[]'](j), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];;}, TMP_33.$$s = self, TMP_33.$$arity = 1, TMP_33));
            k = self.pivots['$[]'](p);
            
            $writer = [p, self.pivots['$[]'](j)];
            $send(self.pivots, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            
            $writer = [j, k];
            $send(self.pivots, '[]=', Opal.to_a($writer));
            $writer[$rb_minus($writer["length"], 1)];;
            self.pivot_sign = self.pivot_sign['$-@']();};
          if ($truthy(($truthy($a = $rb_lt(j, self.row_count)) ? self.lu['$[]'](j)['$[]'](j)['$!='](0) : $a))) {
            return $send($rb_plus(j, 1), 'upto', [$rb_minus(self.row_count, 1)], (TMP_34 = function(i){var self = TMP_34.$$s || this;
              if (self.lu == null) self.lu = nil;

            
              
              if (i == null) {
                i = nil;
              };
              $writer = [j, self.lu['$[]'](i)['$[]'](j).$quo(self.lu['$[]'](j)['$[]'](j))];
              $send(self.lu['$[]'](i), '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34))
          } else {
            return nil
          };}, TMP_28.$$s = self, TMP_28.$$arity = 1, TMP_28));
      }, TMP_LUPDecomposition_initialize_26.$$arity = 1), nil) && 'initialize';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["matrix"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_divide(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs / rhs : lhs['$/'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $send = Opal.send, $truthy = Opal.truthy, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$def_e2message', '$def_exception', '$include', '$autoload', '$private_class_method', '$attr_reader', '$protected', '$rows', '$convert_to_array', '$map!', '$size', '$[]', '$each', '$==', '$raise', '$new', '$transpose', '$coerce_to_int', '$<', '$to_enum', '$empty', '$[]=', '$-', '$diagonal', '$scalar', '$!=', '$*', '$coerce_to_matrix', '$map', '$send', '$to_proc', '$column_count', '$concat', '$row_count', '$each_with_index', '$+', '$empty?', '$method', '$first', '$Raise', '$combine', '$class', '$private', '$fetch', '$alias_method', '$elements', '$>=', '$-@', '$times', '$collect', '$new_matrix', '$===', '$upto', '$min', '$inspect', '$freeze', '$>', '$include?', '$last', '$pop', '$end', '$exclude_end?', '$<=', '$to_a', '$delete_at', '$square?', '$determinant', '$first_minor', '$**', '$build', '$cofactor', '$!', '$inject', '$with_index', '$all?', '$conj', '$singular?', '$eql?', '$hash', '$column_vector', '$column', '$apply_through_coercion', '$/', '$inverse', '$I', '$abs', '$quo', '$identity', '$loop', '$zero?', '$>>', '$eigensystem', '$+@', '$determinant_bareiss', '$find', '$warn', '$hstack', '$rank', '$round', '$vstack', '$real', '$imag', '$row', '$join', '$to_s', '$dup', '$to_ary', '$message', '$is_a?', '$coerce', '$length', '$public_send', '$kind_of?', '$respond_to?', '$__send__', '$coerce_to', '$count', '$independent?', '$collect2', '$each2', '$basis', '$laplace_expansion', '$sqrt', '$abs2', '$magnitude', '$acos', '$inner_product', '$row_vector']);
  
  self.$require("e2mmap.rb");
  (function($base, $parent_nesting) {
    function $ExceptionForMatrix() {};
    var self = $ExceptionForMatrix = $module($base, 'ExceptionForMatrix', $ExceptionForMatrix);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    
    self.$extend($$($nesting, 'Exception2MessageMapper'));
    self.$def_e2message($$($nesting, 'TypeError'), "wrong argument type %s (expected %s)");
    self.$def_e2message($$($nesting, 'ArgumentError'), "Wrong # of arguments(%d for %d)");
    self.$def_exception("ErrDimensionMismatch", "\#{self.name} dimension mismatch");
    self.$def_exception("ErrNotRegular", "Not Regular Matrix");
    self.$def_exception("ErrOperationNotDefined", "Operation(%s) can\\'t be defined: %s op %s");
    self.$def_exception("ErrOperationNotImplemented", "Sorry, Operation(%s) not implemented: %s op %s");
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Matrix(){};
    var self = $Matrix = $klass($base, $super, 'Matrix', $Matrix);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Matrix_$$_1, TMP_Matrix_rows_2, TMP_Matrix_columns_5, TMP_Matrix_build_6, TMP_Matrix_diagonal_9, TMP_Matrix_scalar_11, TMP_Matrix_identity_12, TMP_Matrix_zero_13, TMP_Matrix_row_vector_15, TMP_Matrix_column_vector_16, TMP_Matrix_empty_17, TMP_Matrix_vstack_18, TMP_Matrix_hstack_20, TMP_Matrix_combine_23, TMP_Matrix_combine_28, TMP_Matrix_initialize_29, TMP_Matrix_new_matrix_30, TMP_Matrix_$$_31, TMP_Matrix_$$$eq_33, TMP_Matrix_row_count_34, TMP_Matrix_row_35, TMP_Matrix_column_38, TMP_Matrix_collect_41, TMP_Matrix_each_43, TMP_Matrix_each_with_index_57, TMP_Matrix_index_72, TMP_Matrix_minor_75, TMP_Matrix_first_minor_77, TMP_Matrix_cofactor_79, TMP_Matrix_adjugate_80, TMP_Matrix_laplace_expansion_82, TMP_Matrix_diagonal$q_84, TMP_Matrix_empty$q_85, TMP_Matrix_hermitian$q_86, TMP_Matrix_lower_triangular$q_88, TMP_Matrix_normal$q_89, TMP_Matrix_orthogonal$q_93, TMP_Matrix_permutation$q_97, TMP_Matrix_real$q_100, TMP_Matrix_regular$q_101, TMP_Matrix_singular$q_102, TMP_Matrix_square$q_103, TMP_Matrix_symmetric$q_104, TMP_Matrix_antisymmetric$q_106, TMP_Matrix_unitary$q_108, TMP_Matrix_upper_triangular$q_112, TMP_Matrix_zero$q_113, TMP_Matrix_$eq$eq_114, TMP_Matrix_eql$q_115, TMP_Matrix_clone_116, TMP_Matrix_hash_117, TMP_Matrix_$_118, TMP_Matrix_$_124, TMP_Matrix_$_127, TMP_Matrix_$_130, TMP_Matrix_hadamard_product_133, TMP_Matrix_inverse_135, TMP_Matrix_inverse_from_136, TMP_Matrix_$$_144, TMP_Matrix_$$_147, TMP_Matrix_$$_148, TMP_Matrix_determinant_150, TMP_Matrix_determinant_bareiss_151, TMP_Matrix_determinant_e_157, TMP_Matrix_hstack_158, TMP_Matrix_rank_159, TMP_Matrix_rank_e_164, TMP_Matrix_round_165, TMP_Matrix_trace_167, TMP_Matrix_transpose_169, TMP_Matrix_vstack_170, TMP_Matrix_eigensystem_171, TMP_Matrix_lup_172, TMP_Matrix_conjugate_173, TMP_Matrix_imaginary_174, TMP_Matrix_real_175, TMP_Matrix_rect_176, TMP_Matrix_coerce_177, TMP_Matrix_row_vectors_178, TMP_Matrix_column_vectors_180, TMP_Matrix_to_matrix_182, TMP_Matrix_to_a_183, TMP_Matrix_elements_to_f_184, TMP_Matrix_elements_to_i_185, TMP_Matrix_elements_to_r_186, TMP_Matrix_to_s_187, TMP_Matrix_inspect_190;

    def.rows = nil;
    
    self.$include($$($nesting, 'Enumerable'));
    self.$include($$($nesting, 'ExceptionForMatrix'));
    self.$autoload("EigenvalueDecomposition", "matrix/eigenvalue_decomposition");
    self.$autoload("LUPDecomposition", "matrix/lup_decomposition");
    self.$private_class_method("new");
    self.$attr_reader("rows");
    self.$protected("rows");
    Opal.defs($$($nesting, 'Matrix'), '$[]', TMP_Matrix_$$_1 = function($a) {
      var $post_args, rows, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      rows = $post_args;;
      return self.$rows(rows, false);
    }, TMP_Matrix_$$_1.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$rows', TMP_Matrix_rows_2 = function $$rows(rows, copy) {
      var TMP_3, $a, TMP_4, self = this, size = nil;

      
      
      if (copy == null) {
        copy = true;
      };
      rows = self.$convert_to_array(rows, copy);
      $send(rows, 'map!', [], (TMP_3 = function(row){var self = TMP_3.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        return self.$convert_to_array(row, copy);}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3));
      size = ($truthy($a = rows['$[]'](0)) ? $a : []).$size();
      $send(rows, 'each', [], (TMP_4 = function(row){var self = TMP_4.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        if (row.$size()['$=='](size)) {
          return nil
        } else {
          return self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "row size differs (" + (row.$size()) + " should be " + (size) + ")")
        };}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4));
      return self.$new(rows, size);
    }, TMP_Matrix_rows_2.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$columns', TMP_Matrix_columns_5 = function $$columns(columns) {
      var self = this;

      return self.$rows(columns, false).$transpose()
    }, TMP_Matrix_columns_5.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$build', TMP_Matrix_build_6 = function $$build(row_count, column_count) {
      var $a, TMP_7, $iter = TMP_Matrix_build_6.$$p, $yield = $iter || nil, self = this, rows = nil;

      if ($iter) TMP_Matrix_build_6.$$p = null;
      
      
      if (column_count == null) {
        column_count = row_count;
      };
      row_count = $$($nesting, 'CoercionHelper').$coerce_to_int(row_count);
      column_count = $$($nesting, 'CoercionHelper').$coerce_to_int(column_count);
      if ($truthy(($truthy($a = $rb_lt(row_count, 0)) ? $a : $rb_lt(column_count, 0)))) {
        self.$raise($$($nesting, 'ArgumentError'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("build", row_count, column_count)
      };
      rows = $send($$($nesting, 'Array'), 'new', [row_count], (TMP_7 = function(i){var self = TMP_7.$$s || this, TMP_8;

      
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [column_count], (TMP_8 = function(j){var self = TMP_8.$$s || this;

        
          
          if (j == null) {
            j = nil;
          };
          return Opal.yieldX($yield, [i, j]);;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8));}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
      return self.$new(rows, column_count);
    }, TMP_Matrix_build_6.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$diagonal', TMP_Matrix_diagonal_9 = function $$diagonal($a) {
      var $post_args, values, TMP_10, self = this, size = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      values = $post_args;;
      size = values.$size();
      if (size['$=='](0)) {
        return $$($nesting, 'Matrix').$empty()};
      rows = $send($$($nesting, 'Array'), 'new', [size], (TMP_10 = function(j){var self = TMP_10.$$s || this, row = nil, $writer = nil;

      
        
        if (j == null) {
          j = nil;
        };
        row = $$($nesting, 'Array').$new(size, 0);
        
        $writer = [j, values['$[]'](j)];
        $send(row, '[]=', Opal.to_a($writer));
        $writer[$rb_minus($writer["length"], 1)];;
        return row;}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10));
      return self.$new(rows);
    }, TMP_Matrix_diagonal_9.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$scalar', TMP_Matrix_scalar_11 = function $$scalar(n, value) {
      var self = this;

      return $send(self, 'diagonal', Opal.to_a($$($nesting, 'Array').$new(n, value)))
    }, TMP_Matrix_scalar_11.$$arity = 2);
    Opal.defs($$($nesting, 'Matrix'), '$identity', TMP_Matrix_identity_12 = function $$identity(n) {
      var self = this;

      return self.$scalar(n, 1)
    }, TMP_Matrix_identity_12.$$arity = 1);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      Opal.alias(self, "unit", "identity");
      return Opal.alias(self, "I", "identity");
    })(Opal.get_singleton_class($$($nesting, 'Matrix')), $nesting);
    Opal.defs($$($nesting, 'Matrix'), '$zero', TMP_Matrix_zero_13 = function $$zero(row_count, column_count) {
      var TMP_14, self = this, rows = nil;

      
      
      if (column_count == null) {
        column_count = row_count;
      };
      rows = $send($$($nesting, 'Array'), 'new', [row_count], (TMP_14 = function(){var self = TMP_14.$$s || this;

      return $$($nesting, 'Array').$new(column_count, 0)}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));
      return self.$new(rows, column_count);
    }, TMP_Matrix_zero_13.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$row_vector', TMP_Matrix_row_vector_15 = function $$row_vector(row) {
      var self = this;

      
      row = self.$convert_to_array(row);
      return self.$new([row]);
    }, TMP_Matrix_row_vector_15.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$column_vector', TMP_Matrix_column_vector_16 = function $$column_vector(column) {
      var self = this;

      
      column = self.$convert_to_array(column);
      return self.$new([column].$transpose(), 1);
    }, TMP_Matrix_column_vector_16.$$arity = 1);
    Opal.defs($$($nesting, 'Matrix'), '$empty', TMP_Matrix_empty_17 = function $$empty(row_count, column_count) {
      var $a, self = this;

      
      
      if (row_count == null) {
        row_count = 0;
      };
      
      if (column_count == null) {
        column_count = 0;
      };
      if ($truthy(($truthy($a = column_count['$!='](0)) ? row_count['$!='](0) : $a))) {
        self.$raise($$($nesting, 'ArgumentError'), "One size must be 0")};
      if ($truthy(($truthy($a = $rb_lt(column_count, 0)) ? $a : $rb_lt(row_count, 0)))) {
        self.$raise($$($nesting, 'ArgumentError'), "Negative size")};
      return self.$new($rb_times([[]], row_count), column_count);
    }, TMP_Matrix_empty_17.$$arity = -1);
    Opal.defs($$($nesting, 'Matrix'), '$vstack', TMP_Matrix_vstack_18 = function $$vstack(x, $a) {
      var $post_args, matrices, TMP_19, self = this, result = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      matrices = $post_args;;
      x = $$($nesting, 'CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      $send(matrices, 'each', [], (TMP_19 = function(m){var self = TMP_19.$$s || this;

      
        
        if (m == null) {
          m = nil;
        };
        m = $$($nesting, 'CoercionHelper').$coerce_to_matrix(m);
        if ($truthy(m.$column_count()['$!='](x.$column_count()))) {
          self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "The given matrices must have " + (x.$column_count()) + " columns, but one has " + (m.$column_count()))};
        return result.$concat(m.$send("rows"));}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19));
      return self.$new(result, x.$column_count());
    }, TMP_Matrix_vstack_18.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$hstack', TMP_Matrix_hstack_20 = function $$hstack(x, $a) {
      var $post_args, matrices, TMP_21, self = this, result = nil, total_column_count = nil;

      
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      matrices = $post_args;;
      x = $$($nesting, 'CoercionHelper').$coerce_to_matrix(x);
      result = $send(x.$send("rows"), 'map', [], "dup".$to_proc());
      total_column_count = x.$column_count();
      $send(matrices, 'each', [], (TMP_21 = function(m){var self = TMP_21.$$s || this, TMP_22;

      
        
        if (m == null) {
          m = nil;
        };
        m = $$($nesting, 'CoercionHelper').$coerce_to_matrix(m);
        if ($truthy(m.$row_count()['$!='](x.$row_count()))) {
          self.$raise($$($nesting, 'ErrDimensionMismatch'), "" + "The given matrices must have " + (x.$row_count()) + " rows, but one has " + (m.$row_count()))};
        $send(result, 'each_with_index', [], (TMP_22 = function(row, i){var self = TMP_22.$$s || this;

        
          
          if (row == null) {
            row = nil;
          };
          
          if (i == null) {
            i = nil;
          };
          return row.$concat(m.$send("rows")['$[]'](i));}, TMP_22.$$s = self, TMP_22.$$arity = 2, TMP_22));
        return (total_column_count = $rb_plus(total_column_count, m.$column_count()));}, TMP_21.$$s = self, TMP_21.$$arity = 1, TMP_21));
      return self.$new(result, total_column_count);
    }, TMP_Matrix_hstack_20.$$arity = -2);
    Opal.defs($$($nesting, 'Matrix'), '$combine', TMP_Matrix_combine_23 = function $$combine($a) {
      var $post_args, matrices, TMP_24, TMP_25, $iter = TMP_Matrix_combine_23.$$p, $yield = $iter || nil, self = this, x = nil, rows = nil;

      if ($iter) TMP_Matrix_combine_23.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      if (($yield !== nil)) {
      } else {
        return $send(self, 'to_enum', ["combine"].concat(Opal.to_a(matrices)))
      };
      if ($truthy(matrices['$empty?']())) {
        return $$($nesting, 'Matrix').$empty()};
      $send(matrices, 'map!', [], $$($nesting, 'CoercionHelper').$method("coerce_to_matrix").$to_proc());
      x = matrices.$first();
      $send(matrices, 'each', [], (TMP_24 = function(m){var self = TMP_24.$$s || this, $b;

      
        
        if (m == null) {
          m = nil;
        };
        if ($truthy((($b = x.$row_count()['$=='](m.$row_count())) ? x.$column_count()['$=='](m.$column_count()) : x.$row_count()['$=='](m.$row_count())))) {
          return nil
        } else {
          return $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, TMP_24.$$s = self, TMP_24.$$arity = 1, TMP_24));
      rows = $send($$($nesting, 'Array'), 'new', [x.$row_count()], (TMP_25 = function(i){var self = TMP_25.$$s || this, TMP_26;

      
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [x.$column_count()], (TMP_26 = function(j){var self = TMP_26.$$s || this, TMP_27;

        
          
          if (j == null) {
            j = nil;
          };
          return Opal.yield1($yield, $send(matrices, 'map', [], (TMP_27 = function(m){var self = TMP_27.$$s || this;

          
            
            if (m == null) {
              m = nil;
            };
            return m['$[]'](i, j);}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27)));;}, TMP_26.$$s = self, TMP_26.$$arity = 1, TMP_26));}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25));
      return self.$new(rows, x.$column_count());
    }, TMP_Matrix_combine_23.$$arity = -1);
    
    Opal.def(self, '$combine', TMP_Matrix_combine_28 = function $$combine($a) {
      var $iter = TMP_Matrix_combine_28.$$p, block = $iter || nil, $post_args, matrices, self = this;

      if ($iter) TMP_Matrix_combine_28.$$p = null;
      
      
      if ($iter) TMP_Matrix_combine_28.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send($$($nesting, 'Matrix'), 'combine', [self].concat(Opal.to_a(matrices)), block.$to_proc());
    }, TMP_Matrix_combine_28.$$arity = -1);
    
    Opal.def(self, '$initialize', TMP_Matrix_initialize_29 = function $$initialize(rows, column_count) {
      var self = this;

      
      
      if (column_count == null) {
        column_count = rows['$[]'](0).$size();
      };
      self.rows = rows;
      return (self.column_count = column_count);
    }, TMP_Matrix_initialize_29.$$arity = -2);
    
    Opal.def(self, '$new_matrix', TMP_Matrix_new_matrix_30 = function $$new_matrix(rows, column_count) {
      var self = this;

      
      
      if (column_count == null) {
        column_count = rows['$[]'](0).$size();
      };
      return self.$class().$send("new", rows, column_count);
    }, TMP_Matrix_new_matrix_30.$$arity = -2);
    self.$private("new_matrix");
    
    Opal.def(self, '$[]', TMP_Matrix_$$_31 = function(i, j) {try {

      var TMP_32, self = this;

      return $send(self.rows, 'fetch', [i], (TMP_32 = function(){var self = TMP_32.$$s || this;

      Opal.ret(nil)}, TMP_32.$$s = self, TMP_32.$$arity = 0, TMP_32))['$[]'](j)
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_$$_31.$$arity = 2);
    Opal.alias(self, "element", "[]");
    Opal.alias(self, "component", "[]");
    
    Opal.def(self, '$[]=', TMP_Matrix_$$$eq_33 = function(i, j, v) {
      var self = this, $writer = nil;

      
      $writer = [j, v];
      $send(self.rows['$[]'](i), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_Matrix_$$$eq_33.$$arity = 3);
    Opal.alias(self, "set_element", "[]=");
    Opal.alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    Opal.def(self, '$row_count', TMP_Matrix_row_count_34 = function $$row_count() {
      var self = this;

      return self.rows.$size()
    }, TMP_Matrix_row_count_34.$$arity = 0);
    self.$alias_method("row_size", "row_count");
    self.$attr_reader("column_count");
    self.$alias_method("column_size", "column_count");
    
    Opal.def(self, '$row', TMP_Matrix_row_35 = function $$row(i) {try {

      var $iter = TMP_Matrix_row_35.$$p, block = $iter || nil, TMP_36, TMP_37, self = this;

      if ($iter) TMP_Matrix_row_35.$$p = null;
      
      
      if ($iter) TMP_Matrix_row_35.$$p = null;;
      if ((block !== nil)) {
        
        $send($send(self.rows, 'fetch', [i], (TMP_36 = function(){var self = TMP_36.$$s || this;

        Opal.ret(self)}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36)), 'each', [], block.$to_proc());
        return self;
      } else {
        return $$($nesting, 'Vector').$elements($send(self.rows, 'fetch', [i], (TMP_37 = function(){var self = TMP_37.$$s || this;

        Opal.ret(nil)}, TMP_37.$$s = self, TMP_37.$$arity = 0, TMP_37)))
      };
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_row_35.$$arity = 1);
    
    Opal.def(self, '$column', TMP_Matrix_column_38 = function $$column(j) {
      var $a, TMP_39, TMP_40, $iter = TMP_Matrix_column_38.$$p, $yield = $iter || nil, self = this, col = nil;

      if ($iter) TMP_Matrix_column_38.$$p = null;
      if (($yield !== nil)) {
        
        if ($truthy(($truthy($a = $rb_ge(j, self.$column_count())) ? $a : $rb_lt(j, self.$column_count()['$-@']())))) {
          return self};
        $send(self.$row_count(), 'times', [], (TMP_39 = function(i){var self = TMP_39.$$s || this;
          if (self.rows == null) self.rows = nil;

        
          
          if (i == null) {
            i = nil;
          };
          return Opal.yield1($yield, self.rows['$[]'](i)['$[]'](j));;}, TMP_39.$$s = self, TMP_39.$$arity = 1, TMP_39));
        return self;
      } else {
        
        if ($truthy(($truthy($a = $rb_ge(j, self.$column_count())) ? $a : $rb_lt(j, self.$column_count()['$-@']())))) {
          return nil};
        col = $send($$($nesting, 'Array'), 'new', [self.$row_count()], (TMP_40 = function(i){var self = TMP_40.$$s || this;
          if (self.rows == null) self.rows = nil;

        
          
          if (i == null) {
            i = nil;
          };
          return self.rows['$[]'](i)['$[]'](j);}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40));
        return $$($nesting, 'Vector').$elements(col, false);
      }
    }, TMP_Matrix_column_38.$$arity = 1);
    
    Opal.def(self, '$collect', TMP_Matrix_collect_41 = function $$collect() {
      var $iter = TMP_Matrix_collect_41.$$p, block = $iter || nil, TMP_42, self = this, rows = nil;

      if ($iter) TMP_Matrix_collect_41.$$p = null;
      
      
      if ($iter) TMP_Matrix_collect_41.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("collect")
      };
      rows = $send(self.rows, 'collect', [], (TMP_42 = function(row){var self = TMP_42.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], block.$to_proc());}, TMP_42.$$s = self, TMP_42.$$arity = 1, TMP_42));
      return self.$new_matrix(rows, self.$column_count());
    }, TMP_Matrix_collect_41.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.def(self, '$each', TMP_Matrix_each_43 = function $$each(which) {try {

      var TMP_44, TMP_45, TMP_47, TMP_49, TMP_51, TMP_53, TMP_55, $iter = TMP_Matrix_each_43.$$p, $yield = $iter || nil, self = this, last = nil, $case = nil, block = nil;

      if ($iter) TMP_Matrix_each_43.$$p = null;
      
      
      if (which == null) {
        which = "all";
      };
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      $case = which;
      if ("all"['$===']($case)) {
      block = $$($nesting, 'Proc').$new();
      $send(self.rows, 'each', [], (TMP_44 = function(row){var self = TMP_44.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'each', [], block.$to_proc());}, TMP_44.$$s = self, TMP_44.$$arity = 1, TMP_44));}
      else if ("diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_45 = function(row, row_index){var self = TMP_45.$$s || this, TMP_46;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return Opal.yield1($yield, $send(row, 'fetch', [row_index], (TMP_46 = function(){var self = TMP_46.$$s || this;

        Opal.ret(self)}, TMP_46.$$s = self, TMP_46.$$arity = 0, TMP_46)));;}, TMP_45.$$s = self, TMP_45.$$arity = 2, TMP_45))}
      else if ("off_diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_47 = function(row, row_index){var self = TMP_47.$$s || this, TMP_48;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(self.$column_count(), 'times', [], (TMP_48 = function(col_index){var self = TMP_48.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          if (row_index['$=='](col_index)) {
            return nil
          } else {
            return Opal.yield1($yield, row['$[]'](col_index));
          };}, TMP_48.$$s = self, TMP_48.$$arity = 1, TMP_48));}, TMP_47.$$s = self, TMP_47.$$arity = 2, TMP_47))}
      else if ("lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_49 = function(row, row_index){var self = TMP_49.$$s || this, TMP_50;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send((0), 'upto', [[row_index, last].$min()], (TMP_50 = function(col_index){var self = TMP_50.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, TMP_50.$$s = self, TMP_50.$$arity = 1, TMP_50));}, TMP_49.$$s = self, TMP_49.$$arity = 2, TMP_49))}
      else if ("strict_lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_51 = function(row, row_index){var self = TMP_51.$$s || this, TMP_52;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send([row_index, self.$column_count()].$min(), 'times', [], (TMP_52 = function(col_index){var self = TMP_52.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, TMP_52.$$s = self, TMP_52.$$arity = 1, TMP_52));}, TMP_51.$$s = self, TMP_51.$$arity = 2, TMP_51))}
      else if ("strict_upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_53 = function(row, row_index){var self = TMP_53.$$s || this, TMP_54;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send($rb_plus(row_index, 1), 'upto', [last], (TMP_54 = function(col_index){var self = TMP_54.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, TMP_54.$$s = self, TMP_54.$$arity = 1, TMP_54));}, TMP_53.$$s = self, TMP_53.$$arity = 2, TMP_53))}
      else if ("upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_55 = function(row, row_index){var self = TMP_55.$$s || this, TMP_56;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row_index, 'upto', [last], (TMP_56 = function(col_index){var self = TMP_56.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yield1($yield, row['$[]'](col_index));;}, TMP_56.$$s = self, TMP_56.$$arity = 1, TMP_56));}, TMP_55.$$s = self, TMP_55.$$arity = 2, TMP_55))}
      else {self.$raise($$($nesting, 'ArgumentError'), "" + "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")};
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_each_43.$$arity = -1);
    
    Opal.def(self, '$each_with_index', TMP_Matrix_each_with_index_57 = function $$each_with_index(which) {try {

      var TMP_58, TMP_60, TMP_62, TMP_64, TMP_66, TMP_68, TMP_70, $iter = TMP_Matrix_each_with_index_57.$$p, $yield = $iter || nil, self = this, last = nil, $case = nil;

      if ($iter) TMP_Matrix_each_with_index_57.$$p = null;
      
      
      if (which == null) {
        which = "all";
      };
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each_with_index", which)
      };
      last = $rb_minus(self.$column_count(), 1);
      $case = which;
      if ("all"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_58 = function(row, row_index){var self = TMP_58.$$s || this, TMP_59;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row, 'each_with_index', [], (TMP_59 = function(e, col_index){var self = TMP_59.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [e, row_index, col_index]);;}, TMP_59.$$s = self, TMP_59.$$arity = 2, TMP_59));}, TMP_58.$$s = self, TMP_58.$$arity = 2, TMP_58))}
      else if ("diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_60 = function(row, row_index){var self = TMP_60.$$s || this, TMP_61;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return Opal.yieldX($yield, [$send(row, 'fetch', [row_index], (TMP_61 = function(){var self = TMP_61.$$s || this;

        Opal.ret(self)}, TMP_61.$$s = self, TMP_61.$$arity = 0, TMP_61)), row_index, row_index]);;}, TMP_60.$$s = self, TMP_60.$$arity = 2, TMP_60))}
      else if ("off_diagonal"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_62 = function(row, row_index){var self = TMP_62.$$s || this, TMP_63;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(self.$column_count(), 'times', [], (TMP_63 = function(col_index){var self = TMP_63.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          if (row_index['$=='](col_index)) {
            return nil
          } else {
            return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);
          };}, TMP_63.$$s = self, TMP_63.$$arity = 1, TMP_63));}, TMP_62.$$s = self, TMP_62.$$arity = 2, TMP_62))}
      else if ("lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_64 = function(row, row_index){var self = TMP_64.$$s || this, TMP_65;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send((0), 'upto', [[row_index, last].$min()], (TMP_65 = function(col_index){var self = TMP_65.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, TMP_65.$$s = self, TMP_65.$$arity = 1, TMP_65));}, TMP_64.$$s = self, TMP_64.$$arity = 2, TMP_64))}
      else if ("strict_lower"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_66 = function(row, row_index){var self = TMP_66.$$s || this, TMP_67;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send([row_index, self.$column_count()].$min(), 'times', [], (TMP_67 = function(col_index){var self = TMP_67.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, TMP_67.$$s = self, TMP_67.$$arity = 1, TMP_67));}, TMP_66.$$s = self, TMP_66.$$arity = 2, TMP_66))}
      else if ("strict_upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_68 = function(row, row_index){var self = TMP_68.$$s || this, TMP_69;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send($rb_plus(row_index, 1), 'upto', [last], (TMP_69 = function(col_index){var self = TMP_69.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, TMP_69.$$s = self, TMP_69.$$arity = 1, TMP_69));}, TMP_68.$$s = self, TMP_68.$$arity = 2, TMP_68))}
      else if ("upper"['$===']($case)) {$send(self.rows, 'each_with_index', [], (TMP_70 = function(row, row_index){var self = TMP_70.$$s || this, TMP_71;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (row_index == null) {
          row_index = nil;
        };
        return $send(row_index, 'upto', [last], (TMP_71 = function(col_index){var self = TMP_71.$$s || this;

        
          
          if (col_index == null) {
            col_index = nil;
          };
          return Opal.yieldX($yield, [row['$[]'](col_index), row_index, col_index]);;}, TMP_71.$$s = self, TMP_71.$$arity = 1, TMP_71));}, TMP_70.$$s = self, TMP_70.$$arity = 2, TMP_70))}
      else {self.$raise($$($nesting, 'ArgumentError'), "" + "expected " + (which.$inspect()) + " to be one of :all, :diagonal, :off_diagonal, :lower, :strict_lower, :strict_upper or :upper")};
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_each_with_index_57.$$arity = -1);
    Opal.const_set($nesting[0], 'SELECTORS', $hash2(["all", "diagonal", "off_diagonal", "lower", "strict_lower", "strict_upper", "upper"], {"all": true, "diagonal": true, "off_diagonal": true, "lower": true, "strict_lower": true, "strict_upper": true, "upper": true}).$freeze());
    
    Opal.def(self, '$index', TMP_Matrix_index_72 = function $$index($a) {try {

      var $post_args, args, $b, TMP_73, TMP_74, $iter = TMP_Matrix_index_72.$$p, $yield = $iter || nil, self = this, which = nil, value = nil;

      if ($iter) TMP_Matrix_index_72.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if ($truthy($rb_gt(args.$size(), 2))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments(" + (args.$size()) + " for 0-2)")};
      which = (function() {if ($truthy(($truthy($b = args.$size()['$=='](2)) ? $b : $$($nesting, 'SELECTORS')['$include?'](args.$last())))) {
        return args.$pop()
      } else {
        return "all"
      }; return nil; })();
      if ($truthy(($truthy($b = ($yield !== nil)) ? $b : args.$size()['$=='](1)))) {
      } else {
        return $send(self, 'to_enum', ["find_index", which].concat(Opal.to_a(args)))
      };
      if (args.$size()['$=='](1)) {
        
        value = args.$first();
        $send(self, 'each_with_index', [which], (TMP_73 = function(e, row_index, col_index){var self = TMP_73.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          
          if (row_index == null) {
            row_index = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          if (e['$=='](value)) {
            Opal.ret([row_index, col_index])
          } else {
            return nil
          };}, TMP_73.$$s = self, TMP_73.$$arity = 3, TMP_73));
      } else {
        $send(self, 'each_with_index', [which], (TMP_74 = function(e, row_index, col_index){var self = TMP_74.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          
          if (row_index == null) {
            row_index = nil;
          };
          
          if (col_index == null) {
            col_index = nil;
          };
          if ($truthy(Opal.yield1($yield, e))) {
            Opal.ret([row_index, col_index])
          } else {
            return nil
          };}, TMP_74.$$s = self, TMP_74.$$arity = 3, TMP_74))
      };
      return nil;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_index_72.$$arity = -1);
    self.$alias_method("find_index", "index");
    
    Opal.def(self, '$minor', TMP_Matrix_minor_75 = function $$minor($a) {
      var $post_args, param, $b, $c, $d, TMP_76, self = this, $case = nil, row_range = nil, col_range = nil, from_row = nil, to_row = nil, size_row = nil, from_col = nil, to_col = nil, size_col = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      param = $post_args;;
      $case = param.$size();
      if ((2)['$===']($case)) {
      $c = param, $b = Opal.to_ary($c), (row_range = ($b[0] == null ? nil : $b[0])), (col_range = ($b[1] == null ? nil : $b[1])), $c;
      from_row = row_range.$first();
      if ($truthy($rb_lt(from_row, 0))) {
        from_row = $rb_plus(from_row, self.$row_count())};
      to_row = row_range.$end();
      if ($truthy($rb_lt(to_row, 0))) {
        to_row = $rb_plus(to_row, self.$row_count())};
      if ($truthy(row_range['$exclude_end?']())) {
      } else {
        to_row = $rb_plus(to_row, 1)
      };
      size_row = $rb_minus(to_row, from_row);
      from_col = col_range.$first();
      if ($truthy($rb_lt(from_col, 0))) {
        from_col = $rb_plus(from_col, self.$column_count())};
      to_col = col_range.$end();
      if ($truthy($rb_lt(to_col, 0))) {
        to_col = $rb_plus(to_col, self.$column_count())};
      if ($truthy(col_range['$exclude_end?']())) {
      } else {
        to_col = $rb_plus(to_col, 1)
      };
      size_col = $rb_minus(to_col, from_col);}
      else if ((4)['$===']($case)) {
      $c = param, $b = Opal.to_ary($c), (from_row = ($b[0] == null ? nil : $b[0])), (size_row = ($b[1] == null ? nil : $b[1])), (from_col = ($b[2] == null ? nil : $b[2])), (size_col = ($b[3] == null ? nil : $b[3])), $c;
      if ($truthy(($truthy($b = $rb_lt(size_row, 0)) ? $b : $rb_lt(size_col, 0)))) {
        return nil};
      if ($truthy($rb_lt(from_row, 0))) {
        from_row = $rb_plus(from_row, self.$row_count())};
      if ($truthy($rb_lt(from_col, 0))) {
        from_col = $rb_plus(from_col, self.$column_count())};}
      else {self.$raise($$($nesting, 'ArgumentError'), param.$inspect())};
      if ($truthy(($truthy($b = ($truthy($c = ($truthy($d = $rb_gt(from_row, self.$row_count())) ? $d : $rb_gt(from_col, self.$column_count()))) ? $c : $rb_lt(from_row, 0))) ? $b : $rb_lt(from_col, 0)))) {
        return nil};
      rows = $send(self.rows['$[]'](from_row, size_row), 'collect', [], (TMP_76 = function(row){var self = TMP_76.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        return row['$[]'](from_col, size_col);}, TMP_76.$$s = self, TMP_76.$$arity = 1, TMP_76));
      return self.$new_matrix(rows, [$rb_minus(self.$column_count(), from_col), size_col].$min());
    }, TMP_Matrix_minor_75.$$arity = -1);
    
    Opal.def(self, '$first_minor', TMP_Matrix_first_minor_77 = function $$first_minor(row, column) {
      var $a, TMP_78, self = this, arrays = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "first_minor of empty matrix is not defined")};
      if ($truthy((($a = $rb_le(0, row)) ? $rb_lt(row, self.$row_count()) : $rb_le(0, row)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid row (" + (row.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      if ($truthy((($a = $rb_le(0, column)) ? $rb_lt(column, self.$column_count()) : $rb_le(0, column)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid column (" + (column.$inspect()) + " for 0.." + ($rb_minus(self.$column_count(), 1)) + ")")
      };
      arrays = self.$to_a();
      arrays.$delete_at(row);
      $send(arrays, 'each', [], (TMP_78 = function(array){var self = TMP_78.$$s || this;

      
        
        if (array == null) {
          array = nil;
        };
        return array.$delete_at(column);}, TMP_78.$$s = self, TMP_78.$$arity = 1, TMP_78));
      return self.$new_matrix(arrays, $rb_minus(self.$column_count(), 1));
    }, TMP_Matrix_first_minor_77.$$arity = 2);
    
    Opal.def(self, '$cofactor', TMP_Matrix_cofactor_79 = function $$cofactor(row, column) {
      var self = this, det_of_minor = nil;

      
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "cofactor of empty matrix is not defined")};
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      det_of_minor = self.$first_minor(row, column).$determinant();
      return $rb_times(det_of_minor, (-1)['$**']($rb_plus(row, column)));
    }, TMP_Matrix_cofactor_79.$$arity = 2);
    
    Opal.def(self, '$adjugate', TMP_Matrix_adjugate_80 = function $$adjugate() {
      var TMP_81, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send($$($nesting, 'Matrix'), 'build', [self.$row_count(), self.$column_count()], (TMP_81 = function(row, column){var self = TMP_81.$$s || this;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (column == null) {
          column = nil;
        };
        return self.$cofactor(column, row);}, TMP_81.$$s = self, TMP_81.$$arity = 2, TMP_81));
    }, TMP_Matrix_adjugate_80.$$arity = 0);
    
    Opal.def(self, '$laplace_expansion', TMP_Matrix_laplace_expansion_82 = function $$laplace_expansion($kwargs) {
      var row, column, $a, $b, TMP_83, self = this, num = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      row = $kwargs.$$smap["row"];
      if (row == null) {
        row = nil
      };
      
      column = $kwargs.$$smap["column"];
      if (column == null) {
        column = nil
      };
      num = ($truthy($a = row) ? $a : column);
      if ($truthy(($truthy($a = num['$!']()) ? $a : ($truthy($b = row) ? column : $b)))) {
        self.$raise($$($nesting, 'ArgumentError'), "exactly one the row or column arguments must be specified")};
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      if ($truthy(self['$empty?']())) {
        self.$raise($$($nesting, 'RuntimeError'), "laplace_expansion of empty matrix is not defined")};
      if ($truthy((($a = $rb_le(0, num)) ? $rb_lt(num, self.$row_count()) : $rb_le(0, num)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid num (" + (num.$inspect()) + " for 0.." + ($rb_minus(self.$row_count(), 1)) + ")")
      };
      return $send(self.$send((function() {if ($truthy(row)) {
        return "row"
      } else {
        return "column"
      }; return nil; })(), num).$map(), 'with_index', [], (TMP_83 = function(e, k){var self = TMP_83.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        if (k == null) {
          k = nil;
        };
        return $rb_times(e, $send(self, 'cofactor', Opal.to_a((function() {if ($truthy(row)) {
          return [num, k]
        } else {
          return [k, num]
        }; return nil; })())));}, TMP_83.$$s = self, TMP_83.$$arity = 2, TMP_83)).$inject("+");
    }, TMP_Matrix_laplace_expansion_82.$$arity = -1);
    self.$alias_method("cofactor_expansion", "laplace_expansion");
    
    Opal.def(self, '$diagonal?', TMP_Matrix_diagonal$q_84 = function() {
      var self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(self.$each("off_diagonal"), 'all?', [], "zero?".$to_proc());
    }, TMP_Matrix_diagonal$q_84.$$arity = 0);
    
    Opal.def(self, '$empty?', TMP_Matrix_empty$q_85 = function() {
      var $a, self = this;

      return ($truthy($a = self.$column_count()['$=='](0)) ? $a : self.$row_count()['$=='](0))
    }, TMP_Matrix_empty$q_85.$$arity = 0);
    
    Opal.def(self, '$hermitian?', TMP_Matrix_hermitian$q_86 = function() {
      var TMP_87, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(self.$each_with_index("upper"), 'all?', [], (TMP_87 = function(e, row, col){var self = TMP_87.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        return e['$=='](self.$rows()['$[]'](col)['$[]'](row).$conj());}, TMP_87.$$s = self, TMP_87.$$arity = 3, TMP_87));
    }, TMP_Matrix_hermitian$q_86.$$arity = 0);
    
    Opal.def(self, '$lower_triangular?', TMP_Matrix_lower_triangular$q_88 = function() {
      var self = this;

      return $send(self.$each("strict_upper"), 'all?', [], "zero?".$to_proc())
    }, TMP_Matrix_lower_triangular$q_88.$$arity = 0);
    
    Opal.def(self, '$normal?', TMP_Matrix_normal$q_89 = function() {try {

      var TMP_90, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], (TMP_90 = function(row_i, i){var self = TMP_90.$$s || this, TMP_91;

      
        
        if (row_i == null) {
          row_i = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$rows(), 'each_with_index', [], (TMP_91 = function(row_j, j){var self = TMP_91.$$s || this, TMP_92, s = nil;

        
          
          if (row_j == null) {
            row_j = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$rows(), 'each_with_index', [], (TMP_92 = function(row_k, k){var self = TMP_92.$$s || this;

          
            
            if (row_k == null) {
              row_k = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_minus($rb_times(row_i['$[]'](k), row_j['$[]'](k).$conj()), $rb_times(row_k['$[]'](i).$conj(), row_k['$[]'](j)))));}, TMP_92.$$s = self, TMP_92.$$arity = 2, TMP_92));
          if (s['$=='](0)) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_91.$$s = self, TMP_91.$$arity = 2, TMP_91));}, TMP_90.$$s = self, TMP_90.$$arity = 2, TMP_90));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_normal$q_89.$$arity = 0);
    
    Opal.def(self, '$orthogonal?', TMP_Matrix_orthogonal$q_93 = function() {try {

      var TMP_94, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], (TMP_94 = function(row, i){var self = TMP_94.$$s || this, TMP_95;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$column_count(), 'times', [], (TMP_95 = function(j){var self = TMP_95.$$s || this, TMP_96, s = nil;

        
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$row_count(), 'times', [], (TMP_96 = function(k){var self = TMP_96.$$s || this;

          
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_times(row['$[]'](k), self.$rows()['$[]'](k)['$[]'](j))));}, TMP_96.$$s = self, TMP_96.$$arity = 1, TMP_96));
          if (s['$==']((function() {if (i['$=='](j)) {
            return 1
          } else {
            return 0
          }; return nil; })())) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_95.$$s = self, TMP_95.$$arity = 1, TMP_95));}, TMP_94.$$s = self, TMP_94.$$arity = 2, TMP_94));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_orthogonal$q_93.$$arity = 0);
    
    Opal.def(self, '$permutation?', TMP_Matrix_permutation$q_97 = function() {try {

      var TMP_98, self = this, cols = nil;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      cols = $$($nesting, 'Array').$new(self.$column_count());
      $send(self.$rows(), 'each_with_index', [], (TMP_98 = function(row, i){var self = TMP_98.$$s || this, TMP_99, found = nil;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        found = false;
        $send(row, 'each_with_index', [], (TMP_99 = function(e, j){var self = TMP_99.$$s || this, $a, $writer = nil;

        
          
          if (e == null) {
            e = nil;
          };
          
          if (j == null) {
            j = nil;
          };
          if (e['$=='](1)) {
            
            if ($truthy(($truthy($a = found) ? $a : cols['$[]'](j)))) {
              Opal.ret(false)};
            return (found = (($writer = [j, true]), $send(cols, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]));
          } else if ($truthy(e['$!='](0))) {
            Opal.ret(false)
          } else {
            return nil
          };}, TMP_99.$$s = self, TMP_99.$$arity = 2, TMP_99));
        if ($truthy(found)) {
          return nil
        } else {
          Opal.ret(false)
        };}, TMP_98.$$s = self, TMP_98.$$arity = 2, TMP_98));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_permutation$q_97.$$arity = 0);
    
    Opal.def(self, '$real?', TMP_Matrix_real$q_100 = function() {
      var self = this;

      return $send(self, 'all?', [], "real?".$to_proc())
    }, TMP_Matrix_real$q_100.$$arity = 0);
    
    Opal.def(self, '$regular?', TMP_Matrix_regular$q_101 = function() {
      var self = this;

      return self['$singular?']()['$!']()
    }, TMP_Matrix_regular$q_101.$$arity = 0);
    
    Opal.def(self, '$singular?', TMP_Matrix_singular$q_102 = function() {
      var self = this;

      return self.$determinant()['$=='](0)
    }, TMP_Matrix_singular$q_102.$$arity = 0);
    
    Opal.def(self, '$square?', TMP_Matrix_square$q_103 = function() {
      var self = this;

      return self.$column_count()['$=='](self.$row_count())
    }, TMP_Matrix_square$q_103.$$arity = 0);
    
    Opal.def(self, '$symmetric?', TMP_Matrix_symmetric$q_104 = function() {try {

      var TMP_105, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["strict_upper"], (TMP_105 = function(e, row, col){var self = TMP_105.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        if ($truthy(e['$!='](self.$rows()['$[]'](col)['$[]'](row)))) {
          Opal.ret(false)
        } else {
          return nil
        };}, TMP_105.$$s = self, TMP_105.$$arity = 3, TMP_105));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_symmetric$q_104.$$arity = 0);
    
    Opal.def(self, '$antisymmetric?', TMP_Matrix_antisymmetric$q_106 = function() {try {

      var TMP_107, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self, 'each_with_index', ["upper"], (TMP_107 = function(e, row, col){var self = TMP_107.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        
        if (row == null) {
          row = nil;
        };
        
        if (col == null) {
          col = nil;
        };
        if (e['$=='](self.$rows()['$[]'](col)['$[]'](row)['$-@']())) {
          return nil
        } else {
          Opal.ret(false)
        };}, TMP_107.$$s = self, TMP_107.$$arity = 3, TMP_107));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_antisymmetric$q_106.$$arity = 0);
    
    Opal.def(self, '$unitary?', TMP_Matrix_unitary$q_108 = function() {try {

      var TMP_109, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      $send(self.$rows(), 'each_with_index', [], (TMP_109 = function(row, i){var self = TMP_109.$$s || this, TMP_110;

      
        
        if (row == null) {
          row = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $send(self.$column_count(), 'times', [], (TMP_110 = function(j){var self = TMP_110.$$s || this, TMP_111, s = nil;

        
          
          if (j == null) {
            j = nil;
          };
          s = 0;
          $send(self.$row_count(), 'times', [], (TMP_111 = function(k){var self = TMP_111.$$s || this;

          
            
            if (k == null) {
              k = nil;
            };
            return (s = $rb_plus(s, $rb_times(row['$[]'](k).$conj(), self.$rows()['$[]'](k)['$[]'](j))));}, TMP_111.$$s = self, TMP_111.$$arity = 1, TMP_111));
          if (s['$==']((function() {if (i['$=='](j)) {
            return 1
          } else {
            return 0
          }; return nil; })())) {
            return nil
          } else {
            Opal.ret(false)
          };}, TMP_110.$$s = self, TMP_110.$$arity = 1, TMP_110));}, TMP_109.$$s = self, TMP_109.$$arity = 2, TMP_109));
      return true;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_unitary$q_108.$$arity = 0);
    
    Opal.def(self, '$upper_triangular?', TMP_Matrix_upper_triangular$q_112 = function() {
      var self = this;

      return $send(self.$each("strict_lower"), 'all?', [], "zero?".$to_proc())
    }, TMP_Matrix_upper_triangular$q_112.$$arity = 0);
    
    Opal.def(self, '$zero?', TMP_Matrix_zero$q_113 = function() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, TMP_Matrix_zero$q_113.$$arity = 0);
    
    Opal.def(self, '$==', TMP_Matrix_$eq$eq_114 = function(other) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = $$($nesting, 'Matrix')['$==='](other)) ? self.$column_count()['$=='](other.$column_count()) : $a))) {
      } else {
        return false
      };
      return self.$rows()['$=='](other.$rows());
    }, TMP_Matrix_$eq$eq_114.$$arity = 1);
    
    Opal.def(self, '$eql?', TMP_Matrix_eql$q_115 = function(other) {
      var $a, self = this;

      
      if ($truthy(($truthy($a = $$($nesting, 'Matrix')['$==='](other)) ? self.$column_count()['$=='](other.$column_count()) : $a))) {
      } else {
        return false
      };
      return self.$rows()['$eql?'](other.$rows());
    }, TMP_Matrix_eql$q_115.$$arity = 1);
    
    Opal.def(self, '$clone', TMP_Matrix_clone_116 = function $$clone() {
      var self = this;

      return self.$new_matrix($send(self.rows, 'map', [], "dup".$to_proc()), self.$column_count())
    }, TMP_Matrix_clone_116.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Matrix_hash_117 = function $$hash() {
      var self = this;

      return self.rows.$hash()
    }, TMP_Matrix_hash_117.$$arity = 0);
    
    Opal.def(self, '$*', TMP_Matrix_$_118 = function(m) {
      var TMP_119, TMP_121, self = this, $case = nil, rows = nil, r = nil;

      return (function() {$case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      rows = $send(self.rows, 'collect', [], (TMP_119 = function(row){var self = TMP_119.$$s || this, TMP_120;

      
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], (TMP_120 = function(e){var self = TMP_120.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return $rb_times(e, m);}, TMP_120.$$s = self, TMP_120.$$arity = 1, TMP_120));}, TMP_119.$$s = self, TMP_119.$$arity = 1, TMP_119));
      return self.$new_matrix(rows, self.$column_count());}
      else if ($$($nesting, 'Vector')['$===']($case)) {
      m = self.$class().$column_vector(m);
      r = $rb_times(self, m);
      return r.$column(0);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {
      if ($truthy(self.$column_count()['$!='](m.$row_count()))) {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], (TMP_121 = function(i){var self = TMP_121.$$s || this, TMP_122;

      
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [m.$column_count()], (TMP_122 = function(j){var self = TMP_122.$$s || this, TMP_123;

        
          
          if (j == null) {
            j = nil;
          };
          return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], (TMP_123 = function(vij, k){var self = TMP_123.$$s || this;

          
            
            if (vij == null) {
              vij = nil;
            };
            
            if (k == null) {
              k = nil;
            };
            return $rb_plus(vij, $rb_times(self['$[]'](i, k), m['$[]'](k, j)));}, TMP_123.$$s = self, TMP_123.$$arity = 2, TMP_123));}, TMP_122.$$s = self, TMP_122.$$arity = 1, TMP_122));}, TMP_121.$$s = self, TMP_121.$$arity = 1, TMP_121));
      return self.$new_matrix(rows, m.$column_count());}
      else {return self.$apply_through_coercion(m, "*")}})()
    }, TMP_Matrix_$_118.$$arity = 1);
    
    Opal.def(self, '$+', TMP_Matrix_$_124 = function(m) {
      var $a, TMP_125, self = this, $case = nil, rows = nil;

      
      $case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {$$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "+", self.$class(), m.$class())}
      else if ($$($nesting, 'Vector')['$===']($case)) {m = self.$class().$column_vector(m)}
      else if ($$($nesting, 'Matrix')['$===']($case)) {nil}
      else {return self.$apply_through_coercion(m, "+")};
      if ($truthy((($a = self.$row_count()['$=='](m.$row_count())) ? self.$column_count()['$=='](m.$column_count()) : self.$row_count()['$=='](m.$row_count())))) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], (TMP_125 = function(i){var self = TMP_125.$$s || this, TMP_126;

      
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [self.$column_count()], (TMP_126 = function(j){var self = TMP_126.$$s || this;

        
          
          if (j == null) {
            j = nil;
          };
          return $rb_plus(self['$[]'](i, j), m['$[]'](i, j));}, TMP_126.$$s = self, TMP_126.$$arity = 1, TMP_126));}, TMP_125.$$s = self, TMP_125.$$arity = 1, TMP_125));
      return self.$new_matrix(rows, self.$column_count());
    }, TMP_Matrix_$_124.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Matrix_$_127 = function(m) {
      var $a, TMP_128, self = this, $case = nil, rows = nil;

      
      $case = m;
      if ($$($nesting, 'Numeric')['$===']($case)) {$$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "-", self.$class(), m.$class())}
      else if ($$($nesting, 'Vector')['$===']($case)) {m = self.$class().$column_vector(m)}
      else if ($$($nesting, 'Matrix')['$===']($case)) {nil}
      else {return self.$apply_through_coercion(m, "-")};
      if ($truthy((($a = self.$row_count()['$=='](m.$row_count())) ? self.$column_count()['$=='](m.$column_count()) : self.$row_count()['$=='](m.$row_count())))) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      rows = $send($$($nesting, 'Array'), 'new', [self.$row_count()], (TMP_128 = function(i){var self = TMP_128.$$s || this, TMP_129;

      
        
        if (i == null) {
          i = nil;
        };
        return $send($$($nesting, 'Array'), 'new', [self.$column_count()], (TMP_129 = function(j){var self = TMP_129.$$s || this;

        
          
          if (j == null) {
            j = nil;
          };
          return $rb_minus(self['$[]'](i, j), m['$[]'](i, j));}, TMP_129.$$s = self, TMP_129.$$arity = 1, TMP_129));}, TMP_128.$$s = self, TMP_128.$$arity = 1, TMP_128));
      return self.$new_matrix(rows, self.$column_count());
    }, TMP_Matrix_$_127.$$arity = 1);
    
    Opal.def(self, '$/', TMP_Matrix_$_130 = function(other) {
      var TMP_131, self = this, $case = nil, rows = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      rows = $send(self.rows, 'collect', [], (TMP_131 = function(row){var self = TMP_131.$$s || this, TMP_132;

      
        
        if (row == null) {
          row = nil;
        };
        return $send(row, 'collect', [], (TMP_132 = function(e){var self = TMP_132.$$s || this;

        
          
          if (e == null) {
            e = nil;
          };
          return $rb_divide(e, other);}, TMP_132.$$s = self, TMP_132.$$arity = 1, TMP_132));}, TMP_131.$$s = self, TMP_131.$$arity = 1, TMP_131));
      return self.$new_matrix(rows, self.$column_count());}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times(self, other.$inverse())}
      else {return self.$apply_through_coercion(other, "/")}})()
    }, TMP_Matrix_$_130.$$arity = 1);
    
    Opal.def(self, '$hadamard_product', TMP_Matrix_hadamard_product_133 = function $$hadamard_product(m) {
      var TMP_134, self = this;

      return $send(self, 'combine', [m], (TMP_134 = function(a, b){var self = TMP_134.$$s || this;

      
        
        if (a == null) {
          a = nil;
        };
        
        if (b == null) {
          b = nil;
        };
        return $rb_times(a, b);}, TMP_134.$$s = self, TMP_134.$$arity = 2, TMP_134))
    }, TMP_Matrix_hadamard_product_133.$$arity = 1);
    self.$alias_method("entrywise_product", "hadamard_product");
    
    Opal.def(self, '$inverse', TMP_Matrix_inverse_135 = function $$inverse() {
      var self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return self.$class().$I(self.$row_count()).$send("inverse_from", self);
    }, TMP_Matrix_inverse_135.$$arity = 0);
    Opal.alias(self, "inv", "inverse");
    
    Opal.def(self, '$inverse_from', TMP_Matrix_inverse_from_136 = function $$inverse_from(src) {
      var TMP_137, self = this, last = nil, a = nil;

      
      last = $rb_minus(self.$row_count(), 1);
      a = src.$to_a();
      $send((0), 'upto', [last], (TMP_137 = function(k){var self = TMP_137.$$s || this, TMP_138, $a, TMP_139, TMP_142, TMP_143, i = nil, akk = nil;
        if (self.rows == null) self.rows = nil;

      
        
        if (k == null) {
          k = nil;
        };
        i = k;
        akk = a['$[]'](k)['$[]'](k).$abs();
        $send($rb_plus(k, 1), 'upto', [last], (TMP_138 = function(j){var self = TMP_138.$$s || this, v = nil;

        
          
          if (j == null) {
            j = nil;
          };
          v = a['$[]'](j)['$[]'](k).$abs();
          if ($truthy($rb_gt(v, akk))) {
            
            i = j;
            return (akk = v);
          } else {
            return nil
          };}, TMP_138.$$s = self, TMP_138.$$arity = 1, TMP_138));
        if (akk['$=='](0)) {
          $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrNotRegular'))};
        if ($truthy(i['$!='](k))) {
          
          $a = [a['$[]'](k), a['$[]'](i)], a['$[]='](i, $a[0]), a['$[]='](k, $a[1]), $a;
          $a = [self.rows['$[]'](k), self.rows['$[]'](i)], self.rows['$[]='](i, $a[0]), self.rows['$[]='](k, $a[1]), $a;};
        akk = a['$[]'](k)['$[]'](k);
        $send((0), 'upto', [last], (TMP_139 = function(ii){var self = TMP_139.$$s || this, TMP_140, TMP_141, q = nil, $writer = nil;

        
          
          if (ii == null) {
            ii = nil;
          };
          if (ii['$=='](k)) {
            return nil;};
          q = a['$[]'](ii)['$[]'](k).$quo(akk);
          
          $writer = [k, 0];
          $send(a['$[]'](ii), '[]=', Opal.to_a($writer));
          $writer[$rb_minus($writer["length"], 1)];;
          $send($rb_plus(k, 1), 'upto', [last], (TMP_140 = function(j){var self = TMP_140.$$s || this, $binary_op_recvr_tmp_1 = nil;

          
            
            if (j == null) {
              j = nil;
            };
            $binary_op_recvr_tmp_1 = a['$[]'](ii);
            
            $writer = [j, $rb_minus($binary_op_recvr_tmp_1['$[]'](j), $rb_times(a['$[]'](k)['$[]'](j), q))];
            $send($binary_op_recvr_tmp_1, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_140.$$s = self, TMP_140.$$arity = 1, TMP_140));
          return $send((0), 'upto', [last], (TMP_141 = function(j){var self = TMP_141.$$s || this, $binary_op_recvr_tmp_2 = nil;
            if (self.rows == null) self.rows = nil;

          
            
            if (j == null) {
              j = nil;
            };
            $binary_op_recvr_tmp_2 = self.rows['$[]'](ii);
            
            $writer = [j, $rb_minus($binary_op_recvr_tmp_2['$[]'](j), $rb_times(self.rows['$[]'](k)['$[]'](j), q))];
            $send($binary_op_recvr_tmp_2, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];;}, TMP_141.$$s = self, TMP_141.$$arity = 1, TMP_141));}, TMP_139.$$s = self, TMP_139.$$arity = 1, TMP_139));
        $send($rb_plus(k, 1), 'upto', [last], (TMP_142 = function(j){var self = TMP_142.$$s || this, $writer = nil;

        
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, a['$[]'](k)['$[]'](j).$quo(akk)];
          $send(a['$[]'](k), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_142.$$s = self, TMP_142.$$arity = 1, TMP_142));
        return $send((0), 'upto', [last], (TMP_143 = function(j){var self = TMP_143.$$s || this, $writer = nil;
          if (self.rows == null) self.rows = nil;

        
          
          if (j == null) {
            j = nil;
          };
          $writer = [j, self.rows['$[]'](k)['$[]'](j).$quo(akk)];
          $send(self.rows['$[]'](k), '[]=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];}, TMP_143.$$s = self, TMP_143.$$arity = 1, TMP_143));}, TMP_137.$$s = self, TMP_137.$$arity = 1, TMP_137));
      return self;
    }, TMP_Matrix_inverse_from_136.$$arity = 1);
    self.$private("inverse_from");
    
    Opal.def(self, '$**', TMP_Matrix_$$_144 = function(other) {try {

      var TMP_145, $a, $b, TMP_146, self = this, $case = nil, x = nil, z = nil, v = nil, d = nil, v_inv = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Integer')['$===']($case)) {
      x = self;
      if ($truthy($rb_le(other, 0))) {
        
        x = self.$inverse();
        if (other['$=='](0)) {
          return self.$class().$identity(self.$column_count())};
        other = other['$-@']();};
      z = nil;
      return $send(self, 'loop', [], (TMP_145 = function(){var self = TMP_145.$$s || this;

      
        if (other['$[]'](0)['$=='](1)) {
          z = (function() {if ($truthy(z)) {
            return $rb_times(z, x)
          } else {
            return x
          }; return nil; })()};
        if ($truthy((other = other['$>>'](1))['$zero?']())) {
          Opal.ret(z)};
        return (x = $rb_times(x, x));}, TMP_145.$$s = self, TMP_145.$$arity = 0, TMP_145));}
      else if ($$($nesting, 'Numeric')['$===']($case)) {
      $b = self.$eigensystem(), $a = Opal.to_ary($b), (v = ($a[0] == null ? nil : $a[0])), (d = ($a[1] == null ? nil : $a[1])), (v_inv = ($a[2] == null ? nil : $a[2])), $b;
      return $rb_times($rb_times(v, $send(self.$class(), 'diagonal', Opal.to_a($send(d.$each("diagonal"), 'map', [], (TMP_146 = function(e){var self = TMP_146.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return e['$**'](other);}, TMP_146.$$s = self, TMP_146.$$arity = 1, TMP_146))))), v_inv);}
      else {return $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrOperationNotDefined'), "**", self.$class(), other.$class())}})()
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_$$_144.$$arity = 1);
    
    Opal.def(self, '$+@', TMP_Matrix_$$_147 = function() {
      var self = this;

      return self
    }, TMP_Matrix_$$_147.$$arity = 0);
    
    Opal.def(self, '$-@', TMP_Matrix_$$_148 = function() {
      var TMP_149, self = this;

      return $send(self, 'collect', [], (TMP_149 = function(e){var self = TMP_149.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return e['$-@']();}, TMP_149.$$s = self, TMP_149.$$arity = 1, TMP_149))
    }, TMP_Matrix_$$_148.$$arity = 0);
    
    Opal.def(self, '$determinant', TMP_Matrix_determinant_150 = function $$determinant() {
      var $a, $b, self = this, m = nil, $case = nil, m0 = nil, m1 = nil, m2 = nil, m3 = nil;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      m = self.rows;
      return (function() {$case = self.$row_count();
      if ((0)['$===']($case)) {return 1}
      else if ((1)['$===']($case)) {return m['$[]'](0)['$[]'](0)['$+@']()}
      else if ((2)['$===']($case)) {return $rb_minus($rb_times(m['$[]'](0)['$[]'](0)['$+@'](), m['$[]'](1)['$[]'](1)), $rb_times(m['$[]'](0)['$[]'](1), m['$[]'](1)['$[]'](0)))}
      else if ((3)['$===']($case)) {
      $b = m, $a = Opal.to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), $b;
      return $rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), $rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2))), $rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1))), $rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)));}
      else if ((4)['$===']($case)) {
      $b = m, $a = Opal.to_ary($b), (m0 = ($a[0] == null ? nil : $a[0])), (m1 = ($a[1] == null ? nil : $a[1])), (m2 = ($a[2] == null ? nil : $a[2])), (m3 = ($a[3] == null ? nil : $a[3])), $b;
      return $rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_plus($rb_plus($rb_minus($rb_minus($rb_times($rb_times($rb_times(m0['$[]'](0)['$+@'](), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](3)), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](0), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](2)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](1), m1['$[]'](3)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](0)), m2['$[]'](3)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](3))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](1)), m2['$[]'](3)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](2), m1['$[]'](3)), m2['$[]'](1)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](1)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](0)), m2['$[]'](2)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](0)), m3['$[]'](2))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](1)), m2['$[]'](2)), m3['$[]'](0))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](0)), m3['$[]'](1))), $rb_times($rb_times($rb_times(m0['$[]'](3), m1['$[]'](2)), m2['$[]'](1)), m3['$[]'](0)));}
      else {return self.$determinant_bareiss()}})();
    }, TMP_Matrix_determinant_150.$$arity = 0);
    self.$alias_method("det", "determinant");
    
    Opal.def(self, '$determinant_bareiss', TMP_Matrix_determinant_bareiss_151 = function $$determinant_bareiss() {try {

      var TMP_152, TMP_153, self = this, size = nil, last = nil, a = nil, no_pivot = nil, sign = nil, pivot = nil;

      
      size = self.$row_count();
      last = $rb_minus(size, 1);
      a = self.$to_a();
      no_pivot = $send($$($nesting, 'Proc'), 'new', [], (TMP_152 = function(){var self = TMP_152.$$s || this;

      Opal.ret(0)}, TMP_152.$$s = self, TMP_152.$$arity = 0, TMP_152));
      sign = 1;
      pivot = 1;
      $send(size, 'times', [], (TMP_153 = function(k){var self = TMP_153.$$s || this, TMP_154, $a, TMP_155, previous_pivot = nil, switch$ = nil;

      
        
        if (k == null) {
          k = nil;
        };
        previous_pivot = pivot;
        if ((pivot = a['$[]'](k)['$[]'](k))['$=='](0)) {
          
          switch$ = $send(Opal.Range.$new($rb_plus(k, 1),size, true), 'find', [no_pivot], (TMP_154 = function(row){var self = TMP_154.$$s || this;

          
            
            if (row == null) {
              row = nil;
            };
            return a['$[]'](row)['$[]'](k)['$!='](0);}, TMP_154.$$s = self, TMP_154.$$arity = 1, TMP_154));
          $a = [a['$[]'](k), a['$[]'](switch$)], a['$[]='](switch$, $a[0]), a['$[]='](k, $a[1]), $a;
          pivot = a['$[]'](k)['$[]'](k);
          sign = sign['$-@']();};
        return $send($rb_plus(k, 1), 'upto', [last], (TMP_155 = function(i){var self = TMP_155.$$s || this, TMP_156, ai = nil;

        
          
          if (i == null) {
            i = nil;
          };
          ai = a['$[]'](i);
          return $send($rb_plus(k, 1), 'upto', [last], (TMP_156 = function(j){var self = TMP_156.$$s || this, $writer = nil;

          
            
            if (j == null) {
              j = nil;
            };
            $writer = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](k)['$[]'](j))), previous_pivot)];
            $send(ai, '[]=', Opal.to_a($writer));
            return $writer[$rb_minus($writer["length"], 1)];}, TMP_156.$$s = self, TMP_156.$$arity = 1, TMP_156));}, TMP_155.$$s = self, TMP_155.$$arity = 1, TMP_155));}, TMP_153.$$s = self, TMP_153.$$arity = 1, TMP_153));
      return $rb_times(sign, pivot);
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_Matrix_determinant_bareiss_151.$$arity = 0);
    self.$private("determinant_bareiss");
    
    Opal.def(self, '$determinant_e', TMP_Matrix_determinant_e_157 = function $$determinant_e() {
      var self = this;

      
      self.$warn("Matrix#determinant_e is deprecated; use #determinant", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$determinant();
    }, TMP_Matrix_determinant_e_157.$$arity = 0);
    Opal.alias(self, "det_e", "determinant_e");
    
    Opal.def(self, '$hstack', TMP_Matrix_hstack_158 = function $$hstack($a) {
      var $post_args, matrices, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send(self.$class(), 'hstack', [self].concat(Opal.to_a(matrices)));
    }, TMP_Matrix_hstack_158.$$arity = -1);
    
    Opal.def(self, '$rank', TMP_Matrix_rank_159 = function $$rank() {
      var TMP_160, self = this, a = nil, last_column = nil, last_row = nil, pivot_row = nil, previous_pivot = nil;

      
      a = self.$to_a();
      last_column = $rb_minus(self.$column_count(), 1);
      last_row = $rb_minus(self.$row_count(), 1);
      pivot_row = 0;
      previous_pivot = 1;
      $send((0), 'upto', [last_column], (TMP_160 = function(k){var self = TMP_160.$$s || this, TMP_161, $a, TMP_162, switch_row = nil, pivot = nil;

      
        
        if (k == null) {
          k = nil;
        };
        switch_row = $send(Opal.Range.$new(pivot_row, last_row, false), 'find', [], (TMP_161 = function(row){var self = TMP_161.$$s || this;

        
          
          if (row == null) {
            row = nil;
          };
          return a['$[]'](row)['$[]'](k)['$!='](0);}, TMP_161.$$s = self, TMP_161.$$arity = 1, TMP_161));
        if ($truthy(switch_row)) {
          
          if (pivot_row['$=='](switch_row)) {
          } else {
            $a = [a['$[]'](pivot_row), a['$[]'](switch_row)], a['$[]='](switch_row, $a[0]), a['$[]='](pivot_row, $a[1]), $a
          };
          pivot = a['$[]'](pivot_row)['$[]'](k);
          $send($rb_plus(pivot_row, 1), 'upto', [last_row], (TMP_162 = function(i){var self = TMP_162.$$s || this, TMP_163, ai = nil;

          
            
            if (i == null) {
              i = nil;
            };
            ai = a['$[]'](i);
            return $send($rb_plus(k, 1), 'upto', [last_column], (TMP_163 = function(j){var self = TMP_163.$$s || this, $writer = nil;

            
              
              if (j == null) {
                j = nil;
              };
              $writer = [j, $rb_divide($rb_minus($rb_times(pivot, ai['$[]'](j)), $rb_times(ai['$[]'](k), a['$[]'](pivot_row)['$[]'](j))), previous_pivot)];
              $send(ai, '[]=', Opal.to_a($writer));
              return $writer[$rb_minus($writer["length"], 1)];}, TMP_163.$$s = self, TMP_163.$$arity = 1, TMP_163));}, TMP_162.$$s = self, TMP_162.$$arity = 1, TMP_162));
          pivot_row = $rb_plus(pivot_row, 1);
          return (previous_pivot = pivot);
        } else {
          return nil
        };}, TMP_160.$$s = self, TMP_160.$$arity = 1, TMP_160));
      return pivot_row;
    }, TMP_Matrix_rank_159.$$arity = 0);
    
    Opal.def(self, '$rank_e', TMP_Matrix_rank_e_164 = function $$rank_e() {
      var self = this;

      
      self.$warn("Matrix#rank_e is deprecated; use #rank", $hash2(["uplevel"], {"uplevel": 1}));
      return self.$rank();
    }, TMP_Matrix_rank_e_164.$$arity = 0);
    
    Opal.def(self, '$round', TMP_Matrix_round_165 = function $$round(ndigits) {
      var TMP_166, self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return $send(self, 'map', [], (TMP_166 = function(e){var self = TMP_166.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return e.$round(ndigits);}, TMP_166.$$s = self, TMP_166.$$arity = 1, TMP_166));
    }, TMP_Matrix_round_165.$$arity = -1);
    
    Opal.def(self, '$trace', TMP_Matrix_trace_167 = function $$trace() {
      var TMP_168, self = this;

      
      if ($truthy(self['$square?']())) {
      } else {
        $$($nesting, 'Matrix').$Raise($$($nesting, 'ErrDimensionMismatch'))
      };
      return $send(Opal.Range.$new(0,self.$column_count(), true), 'inject', [0], (TMP_168 = function(tr, i){var self = TMP_168.$$s || this;
        if (self.rows == null) self.rows = nil;

      
        
        if (tr == null) {
          tr = nil;
        };
        
        if (i == null) {
          i = nil;
        };
        return $rb_plus(tr, self.rows['$[]'](i)['$[]'](i));}, TMP_168.$$s = self, TMP_168.$$arity = 2, TMP_168));
    }, TMP_Matrix_trace_167.$$arity = 0);
    Opal.alias(self, "tr", "trace");
    
    Opal.def(self, '$transpose', TMP_Matrix_transpose_169 = function $$transpose() {
      var self = this;

      
      if ($truthy(self.$row_count()['$zero?']())) {
        return self.$class().$empty(self.$column_count(), 0)};
      return self.$new_matrix(self.rows.$transpose(), self.$row_count());
    }, TMP_Matrix_transpose_169.$$arity = 0);
    Opal.alias(self, "t", "transpose");
    
    Opal.def(self, '$vstack', TMP_Matrix_vstack_170 = function $$vstack($a) {
      var $post_args, matrices, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      matrices = $post_args;;
      return $send(self.$class(), 'vstack', [self].concat(Opal.to_a(matrices)));
    }, TMP_Matrix_vstack_170.$$arity = -1);
    
    Opal.def(self, '$eigensystem', TMP_Matrix_eigensystem_171 = function $$eigensystem() {
      var self = this;

      return $$($nesting, 'EigenvalueDecomposition').$new(self)
    }, TMP_Matrix_eigensystem_171.$$arity = 0);
    Opal.alias(self, "eigen", "eigensystem");
    
    Opal.def(self, '$lup', TMP_Matrix_lup_172 = function $$lup() {
      var self = this;

      return $$($nesting, 'LUPDecomposition').$new(self)
    }, TMP_Matrix_lup_172.$$arity = 0);
    Opal.alias(self, "lup_decomposition", "lup");
    
    Opal.def(self, '$conjugate', TMP_Matrix_conjugate_173 = function $$conjugate() {
      var self = this;

      return $send(self, 'collect', [], "conjugate".$to_proc())
    }, TMP_Matrix_conjugate_173.$$arity = 0);
    Opal.alias(self, "conj", "conjugate");
    
    Opal.def(self, '$imaginary', TMP_Matrix_imaginary_174 = function $$imaginary() {
      var self = this;

      return $send(self, 'collect', [], "imaginary".$to_proc())
    }, TMP_Matrix_imaginary_174.$$arity = 0);
    Opal.alias(self, "imag", "imaginary");
    
    Opal.def(self, '$real', TMP_Matrix_real_175 = function $$real() {
      var self = this;

      return $send(self, 'collect', [], "real".$to_proc())
    }, TMP_Matrix_real_175.$$arity = 0);
    
    Opal.def(self, '$rect', TMP_Matrix_rect_176 = function $$rect() {
      var self = this;

      return [self.$real(), self.$imag()]
    }, TMP_Matrix_rect_176.$$arity = 0);
    Opal.alias(self, "rectangular", "rect");
    
    Opal.def(self, '$coerce', TMP_Matrix_coerce_177 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {return [$$($nesting, 'Scalar').$new(other), self]}
      else {return self.$raise($$($nesting, 'TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))}})()
    }, TMP_Matrix_coerce_177.$$arity = 1);
    
    Opal.def(self, '$row_vectors', TMP_Matrix_row_vectors_178 = function $$row_vectors() {
      var TMP_179, self = this;

      return $send($$($nesting, 'Array'), 'new', [self.$row_count()], (TMP_179 = function(i){var self = TMP_179.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return self.$row(i);}, TMP_179.$$s = self, TMP_179.$$arity = 1, TMP_179))
    }, TMP_Matrix_row_vectors_178.$$arity = 0);
    
    Opal.def(self, '$column_vectors', TMP_Matrix_column_vectors_180 = function $$column_vectors() {
      var TMP_181, self = this;

      return $send($$($nesting, 'Array'), 'new', [self.$column_count()], (TMP_181 = function(i){var self = TMP_181.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return self.$column(i);}, TMP_181.$$s = self, TMP_181.$$arity = 1, TMP_181))
    }, TMP_Matrix_column_vectors_180.$$arity = 0);
    
    Opal.def(self, '$to_matrix', TMP_Matrix_to_matrix_182 = function $$to_matrix() {
      var self = this;

      return self
    }, TMP_Matrix_to_matrix_182.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_Matrix_to_a_183 = function $$to_a() {
      var self = this;

      return $send(self.rows, 'collect', [], "dup".$to_proc())
    }, TMP_Matrix_to_a_183.$$arity = 0);
    
    Opal.def(self, '$elements_to_f', TMP_Matrix_elements_to_f_184 = function $$elements_to_f() {
      var self = this;

      
      self.$warn("Matrix#elements_to_f is deprecated, use map(&:to_f)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, TMP_Matrix_elements_to_f_184.$$arity = 0);
    
    Opal.def(self, '$elements_to_i', TMP_Matrix_elements_to_i_185 = function $$elements_to_i() {
      var self = this;

      
      self.$warn("Matrix#elements_to_i is deprecated, use map(&:to_i)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, TMP_Matrix_elements_to_i_185.$$arity = 0);
    
    Opal.def(self, '$elements_to_r', TMP_Matrix_elements_to_r_186 = function $$elements_to_r() {
      var self = this;

      
      self.$warn("Matrix#elements_to_r is deprecated, use map(&:to_r)", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, TMP_Matrix_elements_to_r_186.$$arity = 0);
    
    Opal.def(self, '$to_s', TMP_Matrix_to_s_187 = function $$to_s() {
      var TMP_188, self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return $rb_plus($rb_plus("" + (self.$class()) + "[", $send(self.rows, 'collect', [], (TMP_188 = function(row){var self = TMP_188.$$s || this, TMP_189;

        
          
          if (row == null) {
            row = nil;
          };
          return $rb_plus($rb_plus("[", $send(row, 'collect', [], (TMP_189 = function(e){var self = TMP_189.$$s || this;

          
            
            if (e == null) {
              e = nil;
            };
            return e.$to_s();}, TMP_189.$$s = self, TMP_189.$$arity = 1, TMP_189)).$join(", ")), "]");}, TMP_188.$$s = self, TMP_188.$$arity = 1, TMP_188)).$join(", ")), "]")
      }
    }, TMP_Matrix_to_s_187.$$arity = 0);
    
    Opal.def(self, '$inspect', TMP_Matrix_inspect_190 = function $$inspect() {
      var self = this;

      if ($truthy(self['$empty?']())) {
        return "" + (self.$class()) + ".empty(" + (self.$row_count()) + ", " + (self.$column_count()) + ")"
      } else {
        return "" + (self.$class()) + (self.rows.$inspect())
      }
    }, TMP_Matrix_inspect_190.$$arity = 0);
    (function($base, $parent_nesting) {
      function $ConversionHelper() {};
      var self = $ConversionHelper = $module($base, 'ConversionHelper', $ConversionHelper);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_ConversionHelper_convert_to_array_191;

      
      
      Opal.def(self, '$convert_to_array', TMP_ConversionHelper_convert_to_array_191 = function $$convert_to_array(obj, copy) {
        var self = this, $case = nil, converted = nil, e = nil;

        
        
        if (copy == null) {
          copy = false;
        };
        return (function() {$case = obj;
        if ($$($nesting, 'Array')['$===']($case)) {if ($truthy(copy)) {
          return obj.$dup()
        } else {
          return obj
        }}
        else if ($$($nesting, 'Vector')['$===']($case)) {return obj.$to_a()}
        else {
        
        try {
          converted = obj.$to_ary()
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
            try {
              self.$raise($$($nesting, 'TypeError'), "" + "can't convert " + (obj.$class()) + " into an Array (" + (e.$message()) + ")")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        if ($truthy(converted['$is_a?']($$($nesting, 'Array')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + (obj.$class()) + "#to_ary should return an Array")
        };
        return converted;}})();
      }, TMP_ConversionHelper_convert_to_array_191.$$arity = -2);
      self.$private("convert_to_array");
    })($nesting[0], $nesting);
    self.$extend($$($nesting, 'ConversionHelper'));
    (function($base, $parent_nesting) {
      function $CoercionHelper() {};
      var self = $CoercionHelper = $module($base, 'CoercionHelper', $CoercionHelper);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_CoercionHelper_apply_through_coercion_192, TMP_CoercionHelper_coerce_to_193, TMP_CoercionHelper_coerce_to_int_194, TMP_CoercionHelper_coerce_to_matrix_195;

      
      
      Opal.def(self, '$apply_through_coercion', TMP_CoercionHelper_apply_through_coercion_192 = function $$apply_through_coercion(obj, oper) {
        var $a, self = this, coercion = nil;

        try {
          
          coercion = obj.$coerce(self);
          if ($truthy(($truthy($a = coercion['$is_a?']($$($nesting, 'Array'))) ? coercion.$length()['$=='](2) : $a))) {
          } else {
            self.$raise($$($nesting, 'TypeError'))
          };
          return coercion['$[]'](0).$public_send(oper, coercion['$[]'](1));
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'StandardError')])) {
            try {
              return self.$raise($$($nesting, 'TypeError'), "" + (obj.$inspect()) + " can't be coerced into " + (self.$class()))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        }
      }, TMP_CoercionHelper_apply_through_coercion_192.$$arity = 2);
      self.$private("apply_through_coercion");
      Opal.defs(self, '$coerce_to', TMP_CoercionHelper_coerce_to_193 = function $$coerce_to(obj, cls, meth) {
        var self = this, ret = nil, e = nil;

        
        if ($truthy(obj['$kind_of?'](cls))) {
          return obj};
        if ($truthy(obj['$respond_to?'](meth))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Expected a " + (cls) + " but got a " + (obj.$class()))
        };
        
        try {
          ret = obj.$__send__(meth)
        } catch ($err) {
          if (Opal.rescue($err, [$$($nesting, 'Exception')])) {e = $err;
            try {
              self.$raise($$($nesting, 'TypeError'), "" + ("" + "Coercion error: " + (obj.$inspect()) + "." + (meth) + " => " + (cls) + " failed:\n") + ("" + "(" + (e.$message()) + ")"))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };;
        if ($truthy(ret['$kind_of?'](cls))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "Coercion error: obj." + (meth) + " did NOT return a " + (cls) + " (was " + (ret.$class()) + ")")
        };
        return ret;
      }, TMP_CoercionHelper_coerce_to_193.$$arity = 3);
      Opal.defs(self, '$coerce_to_int', TMP_CoercionHelper_coerce_to_int_194 = function $$coerce_to_int(obj) {
        var self = this;

        return self.$coerce_to(obj, $$($nesting, 'Integer'), "to_int")
      }, TMP_CoercionHelper_coerce_to_int_194.$$arity = 1);
      Opal.defs(self, '$coerce_to_matrix', TMP_CoercionHelper_coerce_to_matrix_195 = function $$coerce_to_matrix(obj) {
        var self = this;

        return self.$coerce_to(obj, $$($nesting, 'Matrix'), "to_matrix")
      }, TMP_CoercionHelper_coerce_to_matrix_195.$$arity = 1);
    })($nesting[0], $nesting);
    self.$include($$($nesting, 'CoercionHelper'));
    return (function($base, $super, $parent_nesting) {
      function $Scalar(){};
      var self = $Scalar = $klass($base, $super, 'Scalar', $Scalar);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Scalar_initialize_196, TMP_Scalar_$_197, TMP_Scalar_$_198, TMP_Scalar_$_199, TMP_Scalar_$_201, TMP_Scalar_$$_202;

      def.value = nil;
      
      self.$include($$($nesting, 'ExceptionForMatrix'));
      self.$include($$($nesting, 'CoercionHelper'));
      
      Opal.def(self, '$initialize', TMP_Scalar_initialize_196 = function $$initialize(value) {
        var self = this;

        return (self.value = value)
      }, TMP_Scalar_initialize_196.$$arity = 1);
      
      Opal.def(self, '$+', TMP_Scalar_$_197 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_plus(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "+", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "+")}})()
      }, TMP_Scalar_$_197.$$arity = 1);
      
      Opal.def(self, '$-', TMP_Scalar_$_198 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_minus(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "-", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "-")}})()
      }, TMP_Scalar_$_198.$$arity = 1);
      
      Opal.def(self, '$*', TMP_Scalar_$_199 = function(other) {
        var TMP_200, self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_times(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case) || $$($nesting, 'Matrix')['$===']($case)) {return $send(other, 'collect', [], (TMP_200 = function(e){var self = TMP_200.$$s || this;
          if (self.value == null) self.value = nil;

        
          
          if (e == null) {
            e = nil;
          };
          return $rb_times(self.value, e);}, TMP_200.$$s = self, TMP_200.$$arity = 1, TMP_200))}
        else {return self.$apply_through_coercion(other, "*")}})()
      }, TMP_Scalar_$_199.$$arity = 1);
      
      Opal.def(self, '$/', TMP_Scalar_$_201 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new($rb_divide(self.value, other))}
        else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "/", self.value.$class(), other.$class())}
        else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times(self, other.$inverse())}
        else {return self.$apply_through_coercion(other, "/")}})()
      }, TMP_Scalar_$_201.$$arity = 1);
      return (Opal.def(self, '$**', TMP_Scalar_$$_202 = function(other) {
        var self = this, $case = nil;

        return (function() {$case = other;
        if ($$($nesting, 'Numeric')['$===']($case)) {return $$($nesting, 'Scalar').$new(self.value['$**'](other))}
        else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotDefined'), "**", self.value.$class(), other.$class())}
        else if ($$($nesting, 'Matrix')['$===']($case)) {return $$($nesting, 'Scalar').$Raise($$($nesting, 'ErrOperationNotImplemented'), "**", self.value.$class(), other.$class())}
        else {return self.$apply_through_coercion(other, "**")}})()
      }, TMP_Scalar_$$_202.$$arity = 1), nil) && '**';
    })($nesting[0], $$($nesting, 'Numeric'), $nesting);
  })($nesting[0], null, $nesting);
  return (function($base, $super, $parent_nesting) {
    function $Vector(){};
    var self = $Vector = $klass($base, $super, 'Vector', $Vector);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Vector_$$_203, TMP_Vector_elements_204, TMP_Vector_basis_205, TMP_Vector_zero_206, TMP_Vector_initialize_207, TMP_Vector_$$_208, TMP_Vector_$$$eq_209, TMP_Vector_round_210, TMP_Vector_size_212, TMP_Vector_each_213, TMP_Vector_each2_214, TMP_Vector_collect2_216, TMP_Vector_independent$q_218, TMP_Vector_independent$q_220, TMP_Vector_zero$q_221, TMP_Vector_$eq$eq_222, TMP_Vector_eql$q_223, TMP_Vector_clone_224, TMP_Vector_hash_225, TMP_Vector_$_226, TMP_Vector_$_228, TMP_Vector_$_230, TMP_Vector_$_232, TMP_Vector_$$_234, TMP_Vector_$$_235, TMP_Vector_inner_product_237, TMP_Vector_cross_product_239, TMP_Vector_collect_242, TMP_Vector_magnitude_243, TMP_Vector_map2_245, TMP_Vector_normalize_246, TMP_Vector_angle_with_247, TMP_Vector_covector_248, TMP_Vector_to_a_249, TMP_Vector_to_matrix_250, TMP_Vector_elements_to_f_251, TMP_Vector_elements_to_i_252, TMP_Vector_elements_to_r_253, TMP_Vector_coerce_254, TMP_Vector_to_s_255, TMP_Vector_inspect_256;

    def.elements = nil;
    
    self.$include($$($nesting, 'ExceptionForMatrix'));
    self.$include($$($nesting, 'Enumerable'));
    self.$include($$$($$($nesting, 'Matrix'), 'CoercionHelper'));
    self.$extend($$$($$($nesting, 'Matrix'), 'ConversionHelper'));
    self.$private_class_method("new");
    self.$attr_reader("elements");
    self.$protected("elements");
    Opal.defs($$($nesting, 'Vector'), '$[]', TMP_Vector_$$_203 = function($a) {
      var $post_args, array, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      array = $post_args;;
      return self.$new(self.$convert_to_array(array, false));
    }, TMP_Vector_$$_203.$$arity = -1);
    Opal.defs($$($nesting, 'Vector'), '$elements', TMP_Vector_elements_204 = function $$elements(array, copy) {
      var self = this;

      
      
      if (copy == null) {
        copy = true;
      };
      return self.$new(self.$convert_to_array(array, copy));
    }, TMP_Vector_elements_204.$$arity = -2);
    Opal.defs($$($nesting, 'Vector'), '$basis', TMP_Vector_basis_205 = function $$basis($kwargs) {
      var size, index, $a, self = this, array = nil, $writer = nil;

      
      
      if ($kwargs == null) {
        $kwargs = $hash2([], {});
      } else if (!$kwargs.$$is_hash) {
        throw Opal.ArgumentError.$new('expected kwargs');
      };
      
      if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'size')) {
        throw Opal.ArgumentError.$new('missing keyword: size');
      }
      size = $kwargs.$$smap["size"];;
      
      if (!Opal.hasOwnProperty.call($kwargs.$$smap, 'index')) {
        throw Opal.ArgumentError.$new('missing keyword: index');
      }
      index = $kwargs.$$smap["index"];;
      if ($truthy($rb_lt(size, 1))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid size (" + (size) + " for 1..)")};
      if ($truthy((($a = $rb_le(0, index)) ? $rb_lt(index, size) : $rb_le(0, index)))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid index (" + (index) + " for 0..." + (size) + ")")
      };
      array = $$($nesting, 'Array').$new(size, 0);
      
      $writer = [index, 1];
      $send(array, '[]=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      return self.$new(self.$convert_to_array(array, false));
    }, TMP_Vector_basis_205.$$arity = 1);
    Opal.defs($$($nesting, 'Vector'), '$zero', TMP_Vector_zero_206 = function $$zero(size) {
      var self = this, array = nil;

      
      if ($truthy($rb_lt(size, 0))) {
        self.$raise($$($nesting, 'ArgumentError'), "" + "invalid size (" + (size) + " for 0..)")};
      array = $$($nesting, 'Array').$new(size, 0);
      return self.$new(self.$convert_to_array(array, false));
    }, TMP_Vector_zero_206.$$arity = 1);
    
    Opal.def(self, '$initialize', TMP_Vector_initialize_207 = function $$initialize(array) {
      var self = this;

      return (self.elements = array)
    }, TMP_Vector_initialize_207.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_Vector_$$_208 = function(i) {
      var self = this;

      return self.elements['$[]'](i)
    }, TMP_Vector_$$_208.$$arity = 1);
    Opal.alias(self, "element", "[]");
    Opal.alias(self, "component", "[]");
    
    Opal.def(self, '$[]=', TMP_Vector_$$$eq_209 = function(i, v) {
      var self = this, $writer = nil;

      
      $writer = [i, v];
      $send(self.elements, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_Vector_$$$eq_209.$$arity = 2);
    Opal.alias(self, "set_element", "[]=");
    Opal.alias(self, "set_component", "[]=");
    self.$private("[]=", "set_element", "set_component");
    
    Opal.def(self, '$round', TMP_Vector_round_210 = function $$round(ndigits) {
      var TMP_211, self = this;

      
      
      if (ndigits == null) {
        ndigits = 0;
      };
      return $send(self, 'map', [], (TMP_211 = function(e){var self = TMP_211.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return e.$round(ndigits);}, TMP_211.$$s = self, TMP_211.$$arity = 1, TMP_211));
    }, TMP_Vector_round_210.$$arity = -1);
    
    Opal.def(self, '$size', TMP_Vector_size_212 = function $$size() {
      var self = this;

      return self.elements.$size()
    }, TMP_Vector_size_212.$$arity = 0);
    
    Opal.def(self, '$each', TMP_Vector_each_213 = function $$each() {
      var $iter = TMP_Vector_each_213.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Vector_each_213.$$p = null;
      
      
      if ($iter) TMP_Vector_each_213.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("each")
      };
      $send(self.elements, 'each', [], block.$to_proc());
      return self;
    }, TMP_Vector_each_213.$$arity = 0);
    
    Opal.def(self, '$each2', TMP_Vector_each2_214 = function $$each2(v) {
      var TMP_215, $iter = TMP_Vector_each2_214.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Vector_each2_214.$$p = null;
      
      if ($truthy(v['$kind_of?']($$($nesting, 'Integer')))) {
        self.$raise($$($nesting, 'TypeError'), "Integer is not like Vector")};
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("each2", v)
      };
      $send(self.$size(), 'times', [], (TMP_215 = function(i){var self = TMP_215.$$s || this;
        if (self.elements == null) self.elements = nil;

      
        
        if (i == null) {
          i = nil;
        };
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, TMP_215.$$s = self, TMP_215.$$arity = 1, TMP_215));
      return self;
    }, TMP_Vector_each2_214.$$arity = 1);
    
    Opal.def(self, '$collect2', TMP_Vector_collect2_216 = function $$collect2(v) {
      var TMP_217, $iter = TMP_Vector_collect2_216.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Vector_collect2_216.$$p = null;
      
      if ($truthy(v['$kind_of?']($$($nesting, 'Integer')))) {
        self.$raise($$($nesting, 'TypeError'), "Integer is not like Vector")};
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      if (($yield !== nil)) {
      } else {
        return self.$to_enum("collect2", v)
      };
      return $send($$($nesting, 'Array'), 'new', [self.$size()], (TMP_217 = function(i){var self = TMP_217.$$s || this;
        if (self.elements == null) self.elements = nil;

      
        
        if (i == null) {
          i = nil;
        };
        return Opal.yieldX($yield, [self.elements['$[]'](i), v['$[]'](i)]);;}, TMP_217.$$s = self, TMP_217.$$arity = 1, TMP_217));
    }, TMP_Vector_collect2_216.$$arity = 1);
    Opal.defs($$($nesting, 'Vector'), '$independent?', TMP_Vector_independent$q_218 = function($a) {
      var $post_args, vs, TMP_219, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      $send(vs, 'each', [], (TMP_219 = function(v){var self = TMP_219.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "expected Vector, got " + (v.$class()))
        };
        if (v.$size()['$=='](vs.$first().$size())) {
          return nil
        } else {
          return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, TMP_219.$$s = self, TMP_219.$$arity = 1, TMP_219));
      if ($truthy($rb_gt(vs.$count(), vs.$first().$size()))) {
        return false};
      return $send($$($nesting, 'Matrix'), '[]', Opal.to_a(vs)).$rank()['$eql?'](vs.$count());
    }, TMP_Vector_independent$q_218.$$arity = -1);
    
    Opal.def(self, '$independent?', TMP_Vector_independent$q_220 = function($a) {
      var $post_args, vs, self = this;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      return $send(self.$class(), 'independent?', [self].concat(Opal.to_a(vs)));
    }, TMP_Vector_independent$q_220.$$arity = -1);
    
    Opal.def(self, '$zero?', TMP_Vector_zero$q_221 = function() {
      var self = this;

      return $send(self, 'all?', [], "zero?".$to_proc())
    }, TMP_Vector_zero$q_221.$$arity = 0);
    
    Opal.def(self, '$==', TMP_Vector_$eq$eq_222 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Vector')['$==='](other))) {
      } else {
        return false
      };
      return self.elements['$=='](other.$elements());
    }, TMP_Vector_$eq$eq_222.$$arity = 1);
    
    Opal.def(self, '$eql?', TMP_Vector_eql$q_223 = function(other) {
      var self = this;

      
      if ($truthy($$($nesting, 'Vector')['$==='](other))) {
      } else {
        return false
      };
      return self.elements['$eql?'](other.$elements());
    }, TMP_Vector_eql$q_223.$$arity = 1);
    
    Opal.def(self, '$clone', TMP_Vector_clone_224 = function $$clone() {
      var self = this;

      return self.$class().$elements(self.elements)
    }, TMP_Vector_clone_224.$$arity = 0);
    
    Opal.def(self, '$hash', TMP_Vector_hash_225 = function $$hash() {
      var self = this;

      return self.elements.$hash()
    }, TMP_Vector_hash_225.$$arity = 0);
    
    Opal.def(self, '$*', TMP_Vector_$_226 = function(x) {
      var TMP_227, self = this, $case = nil, els = nil;

      return (function() {$case = x;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      els = $send(self.elements, 'collect', [], (TMP_227 = function(e){var self = TMP_227.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return $rb_times(e, x);}, TMP_227.$$s = self, TMP_227.$$arity = 1, TMP_227));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_times($$($nesting, 'Matrix').$column_vector(self), x)}
      else if ($$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrOperationNotDefined'), "*", self.$class(), x.$class())}
      else {return self.$apply_through_coercion(x, "*")}})()
    }, TMP_Vector_$_226.$$arity = 1);
    
    Opal.def(self, '$+', TMP_Vector_$_228 = function(v) {
      var TMP_229, self = this, $case = nil, els = nil;

      return (function() {$case = v;
      if ($$($nesting, 'Vector')['$===']($case)) {
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      els = $send(self, 'collect2', [v], (TMP_229 = function(v1, v2){var self = TMP_229.$$s || this;

      
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return $rb_plus(v1, v2);}, TMP_229.$$s = self, TMP_229.$$arity = 2, TMP_229));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_plus($$($nesting, 'Matrix').$column_vector(self), v)}
      else {return self.$apply_through_coercion(v, "+")}})()
    }, TMP_Vector_$_228.$$arity = 1);
    
    Opal.def(self, '$-', TMP_Vector_$_230 = function(v) {
      var TMP_231, self = this, $case = nil, els = nil;

      return (function() {$case = v;
      if ($$($nesting, 'Vector')['$===']($case)) {
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      els = $send(self, 'collect2', [v], (TMP_231 = function(v1, v2){var self = TMP_231.$$s || this;

      
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return $rb_minus(v1, v2);}, TMP_231.$$s = self, TMP_231.$$arity = 2, TMP_231));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case)) {return $rb_minus($$($nesting, 'Matrix').$column_vector(self), v)}
      else {return self.$apply_through_coercion(v, "-")}})()
    }, TMP_Vector_$_230.$$arity = 1);
    
    Opal.def(self, '$/', TMP_Vector_$_232 = function(x) {
      var TMP_233, self = this, $case = nil, els = nil;

      return (function() {$case = x;
      if ($$($nesting, 'Numeric')['$===']($case)) {
      els = $send(self.elements, 'collect', [], (TMP_233 = function(e){var self = TMP_233.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return $rb_divide(e, x);}, TMP_233.$$s = self, TMP_233.$$arity = 1, TMP_233));
      return self.$class().$elements(els, false);}
      else if ($$($nesting, 'Matrix')['$===']($case) || $$($nesting, 'Vector')['$===']($case)) {return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrOperationNotDefined'), "/", self.$class(), x.$class())}
      else {return self.$apply_through_coercion(x, "/")}})()
    }, TMP_Vector_$_232.$$arity = 1);
    
    Opal.def(self, '$+@', TMP_Vector_$$_234 = function() {
      var self = this;

      return self
    }, TMP_Vector_$$_234.$$arity = 0);
    
    Opal.def(self, '$-@', TMP_Vector_$$_235 = function() {
      var TMP_236, self = this;

      return $send(self, 'collect', [], (TMP_236 = function(e){var self = TMP_236.$$s || this;

      
        
        if (e == null) {
          e = nil;
        };
        return e['$-@']();}, TMP_236.$$s = self, TMP_236.$$arity = 1, TMP_236))
    }, TMP_Vector_$$_235.$$arity = 0);
    
    Opal.def(self, '$inner_product', TMP_Vector_inner_product_237 = function $$inner_product(v) {
      var TMP_238, self = this, p = nil;

      
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      p = 0;
      $send(self, 'each2', [v], (TMP_238 = function(v1, v2){var self = TMP_238.$$s || this;

      
        
        if (v1 == null) {
          v1 = nil;
        };
        
        if (v2 == null) {
          v2 = nil;
        };
        return (p = $rb_plus(p, $rb_times(v1, v2.$conj())));}, TMP_238.$$s = self, TMP_238.$$arity = 2, TMP_238));
      return p;
    }, TMP_Vector_inner_product_237.$$arity = 1);
    self.$alias_method("dot", "inner_product");
    
    Opal.def(self, '$cross_product', TMP_Vector_cross_product_239 = function $$cross_product($a) {
      var $post_args, vs, TMP_240, TMP_241, self = this, $case = nil, v = nil, rows = nil;

      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      vs = $post_args;;
      if ($truthy($rb_ge(self.$size(), 2))) {
      } else {
        self.$raise($$($nesting, 'ErrOperationNotDefined'), "" + "cross product is not defined on vectors of dimension " + (self.$size()))
      };
      if (vs.$size()['$==']($rb_minus(self.$size(), 2))) {
      } else {
        self.$raise($$($nesting, 'ArgumentError'), "" + "wrong number of arguments (" + (vs.$size()) + " for " + ($rb_minus(self.$size(), 2)) + ")")
      };
      $send(vs, 'each', [], (TMP_240 = function(v){var self = TMP_240.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
        } else {
          self.$raise($$($nesting, 'TypeError'), "" + "expected Vector, got " + (v.$class()))
        };
        if (v.$size()['$=='](self.$size())) {
          return nil
        } else {
          return $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))
        };}, TMP_240.$$s = self, TMP_240.$$arity = 1, TMP_240));
      return (function() {$case = self.$size();
      if ((2)['$===']($case)) {return $$($nesting, 'Vector')['$[]'](self.elements['$[]'](1)['$-@'](), self.elements['$[]'](0))}
      else if ((3)['$===']($case)) {
      v = vs['$[]'](0);
      return $$($nesting, 'Vector')['$[]']($rb_minus($rb_times(v['$[]'](2), self.elements['$[]'](1)), $rb_times(v['$[]'](1), self.elements['$[]'](2))), $rb_minus($rb_times(v['$[]'](0), self.elements['$[]'](2)), $rb_times(v['$[]'](2), self.elements['$[]'](0))), $rb_minus($rb_times(v['$[]'](1), self.elements['$[]'](0)), $rb_times(v['$[]'](0), self.elements['$[]'](1))));}
      else {
      rows = [self].concat(Opal.to_a(vs)).concat([$send($$($nesting, 'Array'), 'new', [self.$size()], (TMP_241 = function(i){var self = TMP_241.$$s || this;

      
        
        if (i == null) {
          i = nil;
        };
        return $$($nesting, 'Vector').$basis($hash2(["size", "index"], {"size": self.$size(), "index": i}));}, TMP_241.$$s = self, TMP_241.$$arity = 1, TMP_241))]);
      return $$($nesting, 'Matrix').$rows(rows).$laplace_expansion($hash2(["row"], {"row": $rb_minus(self.$size(), 1)}));}})();
    }, TMP_Vector_cross_product_239.$$arity = -1);
    self.$alias_method("cross", "cross_product");
    
    Opal.def(self, '$collect', TMP_Vector_collect_242 = function $$collect() {
      var $iter = TMP_Vector_collect_242.$$p, block = $iter || nil, self = this, els = nil;

      if ($iter) TMP_Vector_collect_242.$$p = null;
      
      
      if ($iter) TMP_Vector_collect_242.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("collect")
      };
      els = $send(self.elements, 'collect', [], block.$to_proc());
      return self.$class().$elements(els, false);
    }, TMP_Vector_collect_242.$$arity = 0);
    Opal.alias(self, "map", "collect");
    
    Opal.def(self, '$magnitude', TMP_Vector_magnitude_243 = function $$magnitude() {
      var TMP_244, self = this;

      return $$($nesting, 'Math').$sqrt($send(self.elements, 'inject', [0], (TMP_244 = function(v, e){var self = TMP_244.$$s || this;

      
        
        if (v == null) {
          v = nil;
        };
        
        if (e == null) {
          e = nil;
        };
        return $rb_plus(v, e.$abs2());}, TMP_244.$$s = self, TMP_244.$$arity = 2, TMP_244)))
    }, TMP_Vector_magnitude_243.$$arity = 0);
    Opal.alias(self, "r", "magnitude");
    Opal.alias(self, "norm", "magnitude");
    
    Opal.def(self, '$map2', TMP_Vector_map2_245 = function $$map2(v) {
      var $iter = TMP_Vector_map2_245.$$p, block = $iter || nil, self = this, els = nil;

      if ($iter) TMP_Vector_map2_245.$$p = null;
      
      
      if ($iter) TMP_Vector_map2_245.$$p = null;;
      if ((block !== nil)) {
      } else {
        return self.$to_enum("map2", v)
      };
      els = $send(self, 'collect2', [v], block.$to_proc());
      return self.$class().$elements(els, false);
    }, TMP_Vector_map2_245.$$arity = 1);
    (function($base, $super, $parent_nesting) {
      function $ZeroVectorError(){};
      var self = $ZeroVectorError = $klass($base, $super, 'ZeroVectorError', $ZeroVectorError);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      return nil
    })($nesting[0], $$($nesting, 'StandardError'), $nesting);
    
    Opal.def(self, '$normalize', TMP_Vector_normalize_246 = function $$normalize() {
      var self = this, n = nil;

      
      n = self.$magnitude();
      if (n['$=='](0)) {
        self.$raise($$($nesting, 'ZeroVectorError'), "Zero vectors can not be normalized")};
      return $rb_divide(self, n);
    }, TMP_Vector_normalize_246.$$arity = 0);
    
    Opal.def(self, '$angle_with', TMP_Vector_angle_with_247 = function $$angle_with(v) {
      var self = this, prod = nil;

      
      if ($truthy(v['$is_a?']($$($nesting, 'Vector')))) {
      } else {
        self.$raise($$($nesting, 'TypeError'), "" + "Expected a Vector, got a " + (v.$class()))
      };
      if ($truthy(self.$size()['$!='](v.$size()))) {
        $$($nesting, 'Vector').$Raise($$($nesting, 'ErrDimensionMismatch'))};
      prod = $rb_times(self.$magnitude(), v.$magnitude());
      if (prod['$=='](0)) {
        self.$raise($$($nesting, 'ZeroVectorError'), "Can't get angle of zero vector")};
      return $$($nesting, 'Math').$acos($rb_divide(self.$inner_product(v), prod));
    }, TMP_Vector_angle_with_247.$$arity = 1);
    
    Opal.def(self, '$covector', TMP_Vector_covector_248 = function $$covector() {
      var self = this;

      return $$($nesting, 'Matrix').$row_vector(self)
    }, TMP_Vector_covector_248.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_Vector_to_a_249 = function $$to_a() {
      var self = this;

      return self.elements.$dup()
    }, TMP_Vector_to_a_249.$$arity = 0);
    
    Opal.def(self, '$to_matrix', TMP_Vector_to_matrix_250 = function $$to_matrix() {
      var self = this;

      return $$($nesting, 'Matrix').$column_vector(self)
    }, TMP_Vector_to_matrix_250.$$arity = 0);
    
    Opal.def(self, '$elements_to_f', TMP_Vector_elements_to_f_251 = function $$elements_to_f() {
      var self = this;

      
      self.$warn("Vector#elements_to_f is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_f".$to_proc());
    }, TMP_Vector_elements_to_f_251.$$arity = 0);
    
    Opal.def(self, '$elements_to_i', TMP_Vector_elements_to_i_252 = function $$elements_to_i() {
      var self = this;

      
      self.$warn("Vector#elements_to_i is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_i".$to_proc());
    }, TMP_Vector_elements_to_i_252.$$arity = 0);
    
    Opal.def(self, '$elements_to_r', TMP_Vector_elements_to_r_253 = function $$elements_to_r() {
      var self = this;

      
      self.$warn("Vector#elements_to_r is deprecated", $hash2(["uplevel"], {"uplevel": 1}));
      return $send(self, 'map', [], "to_r".$to_proc());
    }, TMP_Vector_elements_to_r_253.$$arity = 0);
    
    Opal.def(self, '$coerce', TMP_Vector_coerce_254 = function $$coerce(other) {
      var self = this, $case = nil;

      return (function() {$case = other;
      if ($$($nesting, 'Numeric')['$===']($case)) {return [$$$($$($nesting, 'Matrix'), 'Scalar').$new(other), self]}
      else {return self.$raise($$($nesting, 'TypeError'), "" + (self.$class()) + " can't be coerced into " + (other.$class()))}})()
    }, TMP_Vector_coerce_254.$$arity = 1);
    
    Opal.def(self, '$to_s', TMP_Vector_to_s_255 = function $$to_s() {
      var self = this;

      return $rb_plus($rb_plus("Vector[", self.elements.$join(", ")), "]")
    }, TMP_Vector_to_s_255.$$arity = 0);
    return (Opal.def(self, '$inspect', TMP_Vector_inspect_256 = function $$inspect() {
      var self = this;

      return $rb_plus("Vector", self.elements.$inspect())
    }, TMP_Vector_inspect_256.$$arity = 0), nil) && 'inspect';
  })($nesting[0], null, $nesting);
};
