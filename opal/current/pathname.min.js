Opal.modules["corelib/comparable"]=function(Opal){function $rb_gt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs>rhs:lhs["$>"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$module=(Opal.breaker,Opal.slice,Opal.module),$truthy=Opal.truthy;return Opal.add_stubs(["$===","$>","$<","$equal?","$<=>","$normalize","$raise","$class"]),function($base,$parent_nesting){var TMP_Comparable_normalize_1,TMP_Comparable_$eq$eq_2,TMP_Comparable_$gt_3,TMP_Comparable_$gt$eq_4,TMP_Comparable_$lt_5,TMP_Comparable_$lt$eq_6,TMP_Comparable_between$q_7,TMP_Comparable_clamp_8,self=$module($base,"Comparable"),$nesting=(self.$$proto,[self].concat($parent_nesting));Opal.defs(self,"$normalize",TMP_Comparable_normalize_1=function(what){return $truthy(Opal.const_get_relative($nesting,"Integer")["$==="](what))?what:$truthy($rb_gt(what,0))?1:$truthy($rb_lt(what,0))?-1:0},TMP_Comparable_normalize_1.$$arity=1),Opal.defn(self,"$==",TMP_Comparable_$eq$eq_2=function(other){var cmp=nil;try{return!!$truthy(this["$equal?"](other))||this["$<=>"]!=Opal.Kernel["$<=>"]&&(this.$$comparable?(delete this.$$comparable,!1):!!$truthy(cmp=this["$<=>"](other))&&0==Opal.const_get_relative($nesting,"Comparable").$normalize(cmp))}catch($err){if(!Opal.rescue($err,[Opal.const_get_relative($nesting,"StandardError")]))throw $err;try{return!1}finally{Opal.pop_exception()}}},TMP_Comparable_$eq$eq_2.$$arity=1),Opal.defn(self,"$>",TMP_Comparable_$gt_3=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"comparison of "+this.$class()+" with "+other.$class()+" failed"),Opal.const_get_relative($nesting,"Comparable").$normalize(cmp)>0},TMP_Comparable_$gt_3.$$arity=1),Opal.defn(self,"$>=",TMP_Comparable_$gt$eq_4=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"comparison of "+this.$class()+" with "+other.$class()+" failed"),Opal.const_get_relative($nesting,"Comparable").$normalize(cmp)>=0},TMP_Comparable_$gt$eq_4.$$arity=1),Opal.defn(self,"$<",TMP_Comparable_$lt_5=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"comparison of "+this.$class()+" with "+other.$class()+" failed"),Opal.const_get_relative($nesting,"Comparable").$normalize(cmp)<0},TMP_Comparable_$lt_5.$$arity=1),Opal.defn(self,"$<=",TMP_Comparable_$lt$eq_6=function(other){var cmp;return $truthy(cmp=this["$<=>"](other))||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"comparison of "+this.$class()+" with "+other.$class()+" failed"),Opal.const_get_relative($nesting,"Comparable").$normalize(cmp)<=0},TMP_Comparable_$lt$eq_6.$$arity=1),Opal.defn(self,"$between?",TMP_Comparable_between$q_7=function(min,max){return!$rb_lt(this,min)&&!$rb_gt(this,max)},TMP_Comparable_between$q_7.$$arity=2),Opal.defn(self,"$clamp",TMP_Comparable_clamp_8=function(min,max){var cmp;return cmp=min["$<=>"](max),$truthy(cmp)||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"comparison of "+min.$class()+" with "+max.$class()+" failed"),$truthy($rb_gt(Opal.const_get_relative($nesting,"Comparable").$normalize(cmp),0))&&this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"min argument must be smaller than max argument"),$truthy($rb_lt(Opal.const_get_relative($nesting,"Comparable").$normalize(this["$<=>"](min)),0))?min:$truthy($rb_gt(Opal.const_get_relative($nesting,"Comparable").$normalize(this["$<=>"](max)),0))?max:this},TMP_Comparable_clamp_8.$$arity=2)}($nesting[0],$nesting)},Opal.modules.pathname=function(Opal){function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}var self=Opal.top,$nesting=[],nil=Opal.nil,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$send=Opal.send,$module=Opal.module;return Opal.add_stubs(["$require","$include","$quote","$===","$to_s","$path","$respond_to?","$to_path","$is_a?","$nil?","$raise","$class","$==","$attr_reader","$!","$relative?","$chop_basename","$basename","$=~","$new","$source","$[]","$rindex","$sub","$absolute?","$expand_path","$plus","$unshift","$length","$!=","$empty?","$first","$shift","$+","$join","$dirname","$pop","$reverse_each","$directory?","$extname","$<=>","$nonzero?","$proc","$casecmp","$cleanpath","$inspect","$include?","$fill","$map","$entries"]),self.$require("corelib/comparable"),function($base,$super,$parent_nesting){function $Pathname(){}var TMP_Pathname_initialize_1,TMP_Pathname_$eq$eq_2,TMP_Pathname_absolute$q_3,TMP_Pathname_relative$q_4,TMP_Pathname_chop_basename_5,TMP_Pathname_root$q_6,TMP_Pathname_parent_7,TMP_Pathname_sub_8,TMP_Pathname_cleanpath_9,TMP_Pathname_to_path_10,TMP_Pathname_hash_11,TMP_Pathname_expand_path_12,TMP_Pathname_$_13,TMP_Pathname_plus_14,TMP_Pathname_join_16,TMP_Pathname_split_17,TMP_Pathname_dirname_18,TMP_Pathname_basename_19,TMP_Pathname_directory$q_20,TMP_Pathname_extname_21,TMP_Pathname_$lt$eq$gt_22,TMP_Pathname_23,TMP_Pathname_24,TMP_Pathname_relative_path_from_25,TMP_Pathname_entries_27,self=$Pathname=$klass($base,null,"Pathname",$Pathname),def=self.$$proto,$nesting=[self].concat($parent_nesting);def.path=nil,self.$include(Opal.const_get_relative($nesting,"Comparable")),Opal.const_set($nesting[0],"SEPARATOR_PAT",new RegExp(Opal.const_get_relative($nesting,"Regexp").$quote(Opal.const_get_qualified(Opal.const_get_relative($nesting,"File"),"SEPARATOR")))),Opal.defn(self,"$initialize",TMP_Pathname_initialize_1=function(path){return $truthy(Opal.const_get_relative($nesting,"Pathname")["$==="](path))?this.path=path.$path().$to_s():$truthy(path["$respond_to?"]("to_path"))?this.path=path.$to_path():$truthy(path["$is_a?"](Opal.const_get_relative($nesting,"String")))?this.path=path:$truthy(path["$nil?"]())?this.$raise(Opal.const_get_relative($nesting,"TypeError"),"no implicit conversion of nil into String"):this.$raise(Opal.const_get_relative($nesting,"TypeError"),"no implicit conversion of "+path.$class()+" into String"),this.path["$=="]("\0")?this.$raise(Opal.const_get_relative($nesting,"ArgumentError")):nil},TMP_Pathname_initialize_1.$$arity=1),self.$attr_reader("path"),Opal.defn(self,"$==",TMP_Pathname_$eq$eq_2=function(other){return other.$path()["$=="](this.path)},TMP_Pathname_$eq$eq_2.$$arity=1),Opal.defn(self,"$absolute?",TMP_Pathname_absolute$q_3=function(){return this["$relative?"]()["$!"]()},TMP_Pathname_absolute$q_3.$$arity=0),Opal.defn(self,"$relative?",TMP_Pathname_relative$q_4=function(){var $b,$c,path=nil,r=nil;for(path=this.path;$truthy(r=this.$chop_basename(path));)$c=r,path=null==($b=Opal.to_ary($c))[0]?nil:$b[0];return path["$=="]("")},TMP_Pathname_relative$q_4.$$arity=0),Opal.defn(self,"$chop_basename",TMP_Pathname_chop_basename_5=function(path){var base;return base=Opal.const_get_relative($nesting,"File").$basename(path),$truthy(Opal.const_get_relative($nesting,"Regexp").$new("^"+Opal.const_get_qualified(Opal.const_get_relative($nesting,"Pathname"),"SEPARATOR_PAT").$source()+"?$")["$=~"](base))?nil:[path["$[]"](0,path.$rindex(base)),base]},TMP_Pathname_chop_basename_5.$$arity=1),Opal.defn(self,"$root?",TMP_Pathname_root$q_6=function(){return this.path["$=="]("/")},TMP_Pathname_root$q_6.$$arity=0),Opal.defn(self,"$parent",TMP_Pathname_parent_7=function(){var self=this,new_path=nil;return(new_path=self.path.$sub(/\/([^\/]+\/?$)/,""))["$=="]("")&&(new_path=$truthy(self["$absolute?"]())?"/":"."),Opal.const_get_relative($nesting,"Pathname").$new(new_path)},TMP_Pathname_parent_7.$$arity=0),Opal.defn(self,"$sub",TMP_Pathname_sub_8=function($a_rest){var args,$args_len=arguments.length,$rest_len=$args_len-0;$rest_len<0&&($rest_len=0),args=new Array($rest_len);for(var $arg_idx=0;$arg_idx<$args_len;$arg_idx++)args[$arg_idx-0]=arguments[$arg_idx];return Opal.const_get_relative($nesting,"Pathname").$new($send(this.path,"sub",Opal.to_a(args)))},TMP_Pathname_sub_8.$$arity=-1),Opal.defn(self,"$cleanpath",TMP_Pathname_cleanpath_9=function(){return Opal.normalize(this.path)},TMP_Pathname_cleanpath_9.$$arity=0),Opal.defn(self,"$to_path",TMP_Pathname_to_path_10=function(){return this.path},TMP_Pathname_to_path_10.$$arity=0),Opal.defn(self,"$hash",TMP_Pathname_hash_11=function(){return this.path},TMP_Pathname_hash_11.$$arity=0),Opal.defn(self,"$expand_path",TMP_Pathname_expand_path_12=function(){return Opal.const_get_relative($nesting,"File").$expand_path(this.path)},TMP_Pathname_expand_path_12.$$arity=0),Opal.defn(self,"$+",TMP_Pathname_$_13=function(other){return $truthy(Opal.const_get_relative($nesting,"Pathname")["$==="](other))||(other=Opal.const_get_relative($nesting,"Pathname").$new(other)),Opal.const_get_relative($nesting,"Pathname").$new(this.$plus(this.path,other.$to_s()))},TMP_Pathname_$_13.$$arity=1),Opal.defn(self,"$plus",TMP_Pathname_plus_14=function(path1,path2){var $a,$b,$c,prefix2=nil,index_list2=nil,basename_list2=nil,r2=nil,basename2=nil,prefix1=nil,r1=nil,basename1=nil,suffix2=nil;for(prefix2=path2,index_list2=[],basename_list2=[];$truthy(r2=this.$chop_basename(prefix2));)$c=r2,prefix2=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename2=null==$b[1]?nil:$b[1],index_list2.$unshift(prefix2.$length()),basename_list2.$unshift(basename2);if($truthy(prefix2["$!="]("")))return path2;for(prefix1=path1;$truthy(!0);){for(;$truthy($truthy($c=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="]("."):$c);)index_list2.$shift(),basename_list2.$shift();if(!$truthy(r1=this.$chop_basename(prefix1)))break;if($c=r1,prefix1=null==($b=Opal.to_ary($c))[0]?nil:$b[0],!(basename1=null==$b[1]?nil:$b[1])["$=="](".")){if($truthy($truthy($b=$truthy($c=basename1["$=="](".."))?$c:basename_list2["$empty?"]())?$b:basename_list2.$first()["$!="](".."))){prefix1=$rb_plus(prefix1,basename1);break}index_list2.$shift(),basename_list2.$shift()}}if(r1=this.$chop_basename(prefix1),$truthy($truthy($a=r1["$!"]())?new RegExp(Opal.const_get_relative($nesting,"SEPARATOR_PAT"))["$=~"](Opal.const_get_relative($nesting,"File").$basename(prefix1)):$a))for(;$truthy($truthy($b=basename_list2["$empty?"]()["$!"]())?basename_list2.$first()["$=="](".."):$b);)index_list2.$shift(),basename_list2.$shift();return $truthy(basename_list2["$empty?"]()["$!"]())?(suffix2=path2["$[]"](Opal.Range.$new(index_list2.$first(),-1,!1)),$truthy(r1)?Opal.const_get_relative($nesting,"File").$join(prefix1,suffix2):$rb_plus(prefix1,suffix2)):$truthy(r1)?prefix1:Opal.const_get_relative($nesting,"File").$dirname(prefix1)},TMP_Pathname_plus_14.$$arity=2),Opal.defn(self,"$join",TMP_Pathname_join_16=function($a_rest){try{var TMP_15,args,result=nil,$args_len=arguments.length,$rest_len=$args_len-0;$rest_len<0&&($rest_len=0),args=new Array($rest_len);for(var $arg_idx=0;$arg_idx<$args_len;$arg_idx++)args[$arg_idx-0]=arguments[$arg_idx];return $truthy(args["$empty?"]())?this:(result=args.$pop(),$truthy(Opal.const_get_relative($nesting,"Pathname")["$==="](result))||(result=Opal.const_get_relative($nesting,"Pathname").$new(result)),$truthy(result["$absolute?"]())?result:($send(args,"reverse_each",[],((TMP_15=function(arg){TMP_15.$$s;if(null==arg&&(arg=nil),$truthy(Opal.const_get_relative($nesting,"Pathname")["$==="](arg))||(arg=Opal.const_get_relative($nesting,"Pathname").$new(arg)),result=$rb_plus(arg,result),!$truthy(result["$absolute?"]()))return nil;Opal.ret(result)}).$$s=this,TMP_15.$$arity=1,TMP_15)),$rb_plus(this,result)))}catch($returner){if($returner===Opal.returner)return $returner.$v;throw $returner}},TMP_Pathname_join_16.$$arity=-1),Opal.defn(self,"$split",TMP_Pathname_split_17=function(){return[this.$dirname(),this.$basename()]},TMP_Pathname_split_17.$$arity=0),Opal.defn(self,"$dirname",TMP_Pathname_dirname_18=function(){return Opal.const_get_relative($nesting,"Pathname").$new(Opal.const_get_relative($nesting,"File").$dirname(this.path))},TMP_Pathname_dirname_18.$$arity=0),Opal.defn(self,"$basename",TMP_Pathname_basename_19=function(){return Opal.const_get_relative($nesting,"Pathname").$new(Opal.const_get_relative($nesting,"File").$basename(this.path))},TMP_Pathname_basename_19.$$arity=0),Opal.defn(self,"$directory?",TMP_Pathname_directory$q_20=function(){return Opal.const_get_relative($nesting,"File")["$directory?"](this.path)},TMP_Pathname_directory$q_20.$$arity=0),Opal.defn(self,"$extname",TMP_Pathname_extname_21=function(){return Opal.const_get_relative($nesting,"File").$extname(this.path)},TMP_Pathname_extname_21.$$arity=0),Opal.defn(self,"$<=>",TMP_Pathname_$lt$eq$gt_22=function(other){return this.$path()["$<=>"](other.$path())},TMP_Pathname_$lt$eq$gt_22.$$arity=1),Opal.alias(self,"eql?","=="),Opal.alias(self,"===","=="),Opal.alias(self,"to_str","to_path"),Opal.alias(self,"to_s","to_path"),Opal.const_set($nesting[0],"SAME_PATHS",$truthy(Opal.const_get_qualified(Opal.const_get_relative($nesting,"File"),"FNM_SYSCASE")["$nonzero?"]())?$send(self,"proc",[],((TMP_Pathname_23=function(a,b){return TMP_Pathname_23.$$s,null==a&&(a=nil),null==b&&(b=nil),a.$casecmp(b)["$=="](0)}).$$s=self,TMP_Pathname_23.$$arity=2,TMP_Pathname_23)):$send(self,"proc",[],((TMP_Pathname_24=function(a,b){return TMP_Pathname_24.$$s,null==a&&(a=nil),null==b&&(b=nil),a["$=="](b)}).$$s=self,TMP_Pathname_24.$$arity=2,TMP_Pathname_24))),Opal.defn(self,"$relative_path_from",TMP_Pathname_relative_path_from_25=function(base_directory){var $b,$c,dest_directory,dest_prefix=nil,dest_names=nil,r=nil,basename=nil,base_prefix=nil,base_names=nil,relpath_names=nil;for(dest_directory=this.$cleanpath().$to_s(),base_directory=base_directory.$cleanpath().$to_s(),dest_prefix=dest_directory,dest_names=[];$truthy(r=this.$chop_basename(dest_prefix));)$c=r,dest_prefix=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename=null==$b[1]?nil:$b[1],$truthy(basename["$!="]("."))&&dest_names.$unshift(basename);for(base_prefix=base_directory,base_names=[];$truthy(r=this.$chop_basename(base_prefix));)$c=r,base_prefix=null==($b=Opal.to_ary($c))[0]?nil:$b[0],basename=null==$b[1]?nil:$b[1],$truthy(basename["$!="]("."))&&base_names.$unshift(basename);for($truthy(Opal.const_get_relative($nesting,"SAME_PATHS")["$[]"](dest_prefix,base_prefix))||this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"different prefix: "+dest_prefix.$inspect()+" and "+base_directory.$inspect());$truthy($truthy($b=$truthy($c=dest_names["$empty?"]()["$!"]())?base_names["$empty?"]()["$!"]():$c)?Opal.const_get_relative($nesting,"SAME_PATHS")["$[]"](dest_names.$first(),base_names.$first()):$b);)dest_names.$shift(),base_names.$shift();return $truthy(base_names["$include?"](".."))&&this.$raise(Opal.const_get_relative($nesting,"ArgumentError"),"base_directory has ..: "+base_directory.$inspect()),base_names.$fill(".."),relpath_names=$rb_plus(base_names,dest_names),$truthy(relpath_names["$empty?"]())?Opal.const_get_relative($nesting,"Pathname").$new("."):Opal.const_get_relative($nesting,"Pathname").$new($send(Opal.const_get_relative($nesting,"File"),"join",Opal.to_a(relpath_names)))},TMP_Pathname_relative_path_from_25.$$arity=1),Opal.defn(self,"$entries",TMP_Pathname_entries_27=function(){var TMP_26;return $send(Opal.const_get_relative($nesting,"Dir").$entries(this.path),"map",[],((TMP_26=function(f){var self=TMP_26.$$s||this;return null==f&&(f=nil),self.$class().$new(f)}).$$s=this,TMP_26.$$arity=1,TMP_26))},TMP_Pathname_entries_27.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){var TMP_Kernel_Pathname_28,self=$module($base,"Kernel"),$nesting=(self.$$proto,[self].concat($parent_nesting));Opal.defn(self,"$Pathname",TMP_Kernel_Pathname_28=function(path){return Opal.const_get_relative($nesting,"Pathname").$new(path)},TMP_Kernel_Pathname_28.$$arity=1)}($nesting[0],$nesting)};
