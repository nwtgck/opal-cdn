/* Generated by Opal 0.11.4 */
Opal.modules["pp"] = function(Opal) {
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$inspect', '$each', '$pp', '$<=', '$size', '$first', '$module_function', '$p', '$args', '$===', '$+', '$<<']);
  
  (function($base, $parent_nesting) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Kernel_pretty_inspect_1, TMP_Kernel_pp_3;

    
    
    Opal.defn(self, '$pretty_inspect', TMP_Kernel_pretty_inspect_1 = function $$pretty_inspect() {
      var self = this;

      return self.$inspect()
    }, TMP_Kernel_pretty_inspect_1.$$arity = 0);
    
    Opal.defn(self, '$pp', TMP_Kernel_pp_3 = function $$pp($a_rest) {
      var TMP_2, self = this, objs;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      objs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        objs[$arg_idx - 0] = arguments[$arg_idx];
      }
      
      $send(objs, 'each', [], (TMP_2 = function(obj){var self = TMP_2.$$s || this;
if (obj == null) obj = nil;
      return Opal.const_get_relative($nesting, 'PP').$pp(obj)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2));
      if ($truthy($rb_le(objs.$size(), 1))) {
        return objs.$first()
        } else {
        return objs
      };
    }, TMP_Kernel_pp_3.$$arity = -1);
    self.$module_function("pp");
  })($nesting[0], $nesting);
  return (function($base, $super, $parent_nesting) {
    function $PP(){};
    var self = $PP = $klass($base, $super, 'PP', $PP);

    var def = self.$$proto, $nesting = [self].concat($parent_nesting);

    return (function(self, $parent_nesting) {
      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_pp_4, TMP_pp_5;

      
      if ($truthy((typeof(console) === "undefined" || typeof(console.log) === "undefined"))) {
        
        Opal.defn(self, '$pp', TMP_pp_4 = function $$pp(obj, out, width) {
          var self = this;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          if (out == null) {
            out = $gvars.stdout;
          }
          if (width == null) {
            width = 79;
          }
          return $send(self, 'p', Opal.to_a(self.$args()))
        }, TMP_pp_4.$$arity = -2)
        } else {
        
        Opal.defn(self, '$pp', TMP_pp_5 = function $$pp(obj, out, width) {
          var self = this;
          if ($gvars.stdout == null) $gvars.stdout = nil;

          if (out == null) {
            out = $gvars.stdout;
          }
          if (width == null) {
            width = 79;
          }
          if ($truthy(Opal.const_get_relative($nesting, 'String')['$==='](out))) {
            return $rb_plus($rb_plus(out, obj.$inspect()), "\n")
            } else {
            return out['$<<']($rb_plus(obj.$inspect(), "\n"))
          }
        }, TMP_pp_5.$$arity = -2)
      };
      return Opal.alias(self, "singleline_pp", "pp");
    })(Opal.get_singleton_class(self), $nesting)
  })($nesting[0], null, $nesting);
};
