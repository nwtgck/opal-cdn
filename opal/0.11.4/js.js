/* Generated by Opal 0.11.4 */
Opal.modules["js"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base, $parent_nesting) {
    var $JS, self = $JS = $module($base, 'JS');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_JS_delete_1, TMP_JS_global_2, TMP_JS_in_3, TMP_JS_instanceof_4, TMP_JS_new_5, TMP_JS_new_6, TMP_JS_typeof_7, TMP_JS_void_8, TMP_JS_call_9;

    
    
    Opal.defn(self, '$delete', TMP_JS_delete_1 = function(object, property) {
      var self = this;

      return delete object[property]
    }, TMP_JS_delete_1.$$arity = 2);
    
    Opal.defn(self, '$global', TMP_JS_global_2 = function $$global() {
      var self = this;

      return Opal.global
    }, TMP_JS_global_2.$$arity = 0);
    
    Opal.defn(self, '$in', TMP_JS_in_3 = function(property, object) {
      var self = this;

      return property in object
    }, TMP_JS_in_3.$$arity = 2);
    
    Opal.defn(self, '$instanceof', TMP_JS_instanceof_4 = function(value, func) {
      var self = this;

      return value instanceof func
    }, TMP_JS_instanceof_4.$$arity = 2);
    if ($truthy(typeof Function.prototype.bind == 'function')) {
      
      Opal.defn(self, '$new', TMP_JS_new_5 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_JS_new_5.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_JS_new_5.$$p = null;
        
        args.$insert(0, this);
        if ($truthy(block)) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, TMP_JS_new_5.$$arity = -2)
      } else {
      
      Opal.defn(self, '$new', TMP_JS_new_6 = function(func, $a_rest) {
        var self = this, args, $iter = TMP_JS_new_6.$$p, block = $iter || nil, f = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_JS_new_6.$$p = null;
        
        if ($truthy(block)) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"] = func["prototype"];
        return new f();
      }, TMP_JS_new_6.$$arity = -2)
    };
    
    Opal.defn(self, '$typeof', TMP_JS_typeof_7 = function(value) {
      var self = this;

      return typeof value
    }, TMP_JS_typeof_7.$$arity = 1);
    
    Opal.defn(self, '$void', TMP_JS_void_8 = function(expr) {
      var self = this;

      return void expr
    }, TMP_JS_void_8.$$arity = 1);
    
    Opal.defn(self, '$call', TMP_JS_call_9 = function $$call(func, $a_rest) {
      var self = this, args, $iter = TMP_JS_call_9.$$p, block = $iter || nil, g = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_JS_call_9.$$p = null;
      
      g = self.$global();
      if ($truthy(block)) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, TMP_JS_call_9.$$arity = -2);
    Opal.alias(self, "method_missing", "call");
    self.$extend(self);
  })($nesting[0], $nesting)
};
