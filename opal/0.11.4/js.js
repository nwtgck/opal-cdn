/* Generated by Opal 0.11.99.dev */
Opal.modules["js"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy;

  Opal.add_stubs(['$insert', '$<<', '$global', '$extend']);
  return (function($base, $parent_nesting) {
    function $JS() {};
    var self = $JS = $module($base, 'JS', $JS);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_JS_delete_1, TMP_JS_global_2, TMP_JS_in_3, TMP_JS_instanceof_4, TMP_JS_new_5, TMP_JS_new_6, TMP_JS_typeof_7, TMP_JS_void_8, TMP_JS_call_9;

    
    
    Opal.def(self, '$delete', TMP_JS_delete_1 = function(object, property) {
      var self = this;

      return delete object[property]
    }, TMP_JS_delete_1.$$arity = 2);
    
    Opal.def(self, '$global', TMP_JS_global_2 = function $$global() {
      var self = this;

      return Opal.global;
    }, TMP_JS_global_2.$$arity = 0);
    
    Opal.def(self, '$in', TMP_JS_in_3 = function(property, object) {
      var self = this;

      return property in object
    }, TMP_JS_in_3.$$arity = 2);
    
    Opal.def(self, '$instanceof', TMP_JS_instanceof_4 = function(value, func) {
      var self = this;

      return value instanceof func
    }, TMP_JS_instanceof_4.$$arity = 2);
    if ($truthy(typeof Function.prototype.bind == 'function')) {
      
      Opal.def(self, '$new', TMP_JS_new_5 = function(func, $a) {
        var $iter = TMP_JS_new_5.$$p, block = $iter || nil, $post_args, args, self = this;

        if ($iter) TMP_JS_new_5.$$p = null;
        
        
        if ($iter) TMP_JS_new_5.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        args.$insert(0, this);
        if ($truthy(block)) {
          args['$<<'](block)};
        return new (func.bind.apply(func, args))();
      }, TMP_JS_new_5.$$arity = -2)
    } else {
      
      Opal.def(self, '$new', TMP_JS_new_6 = function(func, $a) {
        var $iter = TMP_JS_new_6.$$p, block = $iter || nil, $post_args, args, self = this, f = nil;

        if ($iter) TMP_JS_new_6.$$p = null;
        
        
        if ($iter) TMP_JS_new_6.$$p = null;;
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        args = $post_args;;
        if ($truthy(block)) {
          args['$<<'](block)};
        f = function(){return func.apply(this, args)};
        f["prototype"] = func["prototype"];
        return new f();;
      }, TMP_JS_new_6.$$arity = -2)
    };
    
    Opal.def(self, '$typeof', TMP_JS_typeof_7 = function(value) {
      var self = this;

      return typeof value
    }, TMP_JS_typeof_7.$$arity = 1);
    
    Opal.def(self, '$void', TMP_JS_void_8 = function(expr) {
      var self = this;

      return void expr
    }, TMP_JS_void_8.$$arity = 1);
    
    Opal.def(self, '$call', TMP_JS_call_9 = function $$call(func, $a) {
      var $iter = TMP_JS_call_9.$$p, block = $iter || nil, $post_args, args, self = this, g = nil;

      if ($iter) TMP_JS_call_9.$$p = null;
      
      
      if ($iter) TMP_JS_call_9.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      g = self.$global();
      if ($truthy(block)) {
        args['$<<'](block)};
      return g[func].apply(g, args);
    }, TMP_JS_call_9.$$arity = -2);
    Opal.alias(self, "method_missing", "call");
    self.$extend(self);
  })($nesting[0], $nesting)
};
