/* Generated by Opal 0.11.99.dev */
Opal.modules["strscan"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $send = Opal.send;

  Opal.add_stubs(['$attr_reader', '$anchor', '$scan_until', '$length', '$size', '$rest', '$pos=', '$-', '$private']);
  return (function($base, $super, $parent_nesting) {
    function $StringScanner(){};
    var self = $StringScanner = $klass($base, $super, 'StringScanner', $StringScanner);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_StringScanner_initialize_1, TMP_StringScanner_beginning_of_line$q_2, TMP_StringScanner_scan_3, TMP_StringScanner_scan_until_4, TMP_StringScanner_$$_5, TMP_StringScanner_check_6, TMP_StringScanner_check_until_7, TMP_StringScanner_peek_8, TMP_StringScanner_eos$q_9, TMP_StringScanner_exist$q_10, TMP_StringScanner_skip_11, TMP_StringScanner_skip_until_12, TMP_StringScanner_get_byte_13, TMP_StringScanner_match$q_14, TMP_StringScanner_pos$eq_15, TMP_StringScanner_matched_size_16, TMP_StringScanner_post_match_17, TMP_StringScanner_pre_match_18, TMP_StringScanner_reset_19, TMP_StringScanner_rest_20, TMP_StringScanner_rest$q_21, TMP_StringScanner_rest_size_22, TMP_StringScanner_terminate_23, TMP_StringScanner_unscan_24, TMP_StringScanner_anchor_25;

    def.pos = def.string = def.working = def.matched = def.prev_pos = def.match = nil;
    
    self.$attr_reader("pos");
    self.$attr_reader("matched");
    
    Opal.def(self, '$initialize', TMP_StringScanner_initialize_1 = function $$initialize(string) {
      var self = this;

      
      self.string = string;
      self.pos = 0;
      self.matched = nil;
      self.working = string;
      return (self.match = []);
    }, TMP_StringScanner_initialize_1.$$arity = 1);
    self.$attr_reader("string");
    
    Opal.def(self, '$beginning_of_line?', TMP_StringScanner_beginning_of_line$q_2 = function() {
      var self = this;

      return self.pos === 0 || self.string.charAt(self.pos - 1) === "\n"
    }, TMP_StringScanner_beginning_of_line$q_2.$$arity = 0);
    Opal.alias(self, "bol?", "beginning_of_line?");
    
    Opal.def(self, '$scan', TMP_StringScanner_scan_3 = function $$scan(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else if (typeof(result) === 'object') {
        self.prev_pos = self.pos;
        self.pos     += result[0].length;
        self.working  = self.working.substring(result[0].length);
        self.matched  = result[0];
        self.match    = result;

        return result[0];
      }
      else if (typeof(result) === 'string') {
        self.pos     += result.length;
        self.working  = self.working.substring(result.length);

        return result;
      }
      else {
        return nil;
      }
    ;
    }, TMP_StringScanner_scan_3.$$arity = 1);
    
    Opal.def(self, '$scan_until', TMP_StringScanner_scan_until_4 = function $$scan_until(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var pos     = self.pos,
          working = self.working,
          result;

      while (true) {
        result   = pattern.exec(working);
        pos     += 1;
        working  = working.substr(1);

        if (result == null) {
          if (working.length === 0) {
            return self.matched = nil;
          }

          continue;
        }

        self.matched  = self.string.substr(self.pos, pos - self.pos - 1 + result[0].length);
        self.prev_pos = pos - 1;
        self.pos      = pos;
        self.working  = working.substr(result[0].length);

        return self.matched;
      }
    ;
    }, TMP_StringScanner_scan_until_4.$$arity = 1);
    
    Opal.def(self, '$[]', TMP_StringScanner_$$_5 = function(idx) {
      var self = this;

      
      var match = self.match;

      if (idx < 0) {
        idx += match.length;
      }

      if (idx < 0 || idx >= match.length) {
        return nil;
      }

      if (match[idx] == null) {
        return nil;
      }

      return match[idx];
    
    }, TMP_StringScanner_$$_5.$$arity = 1);
    
    Opal.def(self, '$check', TMP_StringScanner_check_6 = function $$check(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }

      return self.matched = result[0];
    ;
    }, TMP_StringScanner_check_6.$$arity = 1);
    
    Opal.def(self, '$check_until', TMP_StringScanner_check_until_7 = function $$check_until(pattern) {
      var self = this;

      
      var prev_pos = self.prev_pos,
          pos      = self.pos;

      var result = self.$scan_until(pattern);

      if (result !== nil) {
        self.matched = result.substr(-1);
        self.working = self.string.substr(pos);
      }

      self.prev_pos = prev_pos;
      self.pos      = pos;

      return result;
    
    }, TMP_StringScanner_check_until_7.$$arity = 1);
    
    Opal.def(self, '$peek', TMP_StringScanner_peek_8 = function $$peek(length) {
      var self = this;

      return self.working.substring(0, length)
    }, TMP_StringScanner_peek_8.$$arity = 1);
    
    Opal.def(self, '$eos?', TMP_StringScanner_eos$q_9 = function() {
      var self = this;

      return self.working.length === 0
    }, TMP_StringScanner_eos$q_9.$$arity = 0);
    
    Opal.def(self, '$exist?', TMP_StringScanner_exist$q_10 = function(pattern) {
      var self = this;

      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else if (result.index == 0) {
        return 0;
      }
      else {
        return result.index + 1;
      }
    
    }, TMP_StringScanner_exist$q_10.$$arity = 1);
    
    Opal.def(self, '$skip', TMP_StringScanner_skip_11 = function $$skip(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return self.matched = nil;
      }
      else {
        var match_str = result[0];
        var match_len = match_str.length;

        self.matched   = match_str;
        self.prev_pos  = self.pos;
        self.pos      += match_len;
        self.working   = self.working.substring(match_len);

        return match_len;
      }
    ;
    }, TMP_StringScanner_skip_11.$$arity = 1);
    
    Opal.def(self, '$skip_until', TMP_StringScanner_skip_until_12 = function $$skip_until(pattern) {
      var self = this;

      
      var result = self.$scan_until(pattern);

      if (result === nil) {
        return nil;
      }
      else {
        self.matched = result.substr(-1);

        return result.length;
      }
    
    }, TMP_StringScanner_skip_until_12.$$arity = 1);
    
    Opal.def(self, '$get_byte', TMP_StringScanner_get_byte_13 = function $$get_byte() {
      var self = this;

      
      var result = nil;

      if (self.pos < self.string.length) {
        self.prev_pos  = self.pos;
        self.pos      += 1;
        result      = self.matched = self.working.substring(0, 1);
        self.working   = self.working.substring(1);
      }
      else {
        self.matched = nil;
      }

      return result;
    
    }, TMP_StringScanner_get_byte_13.$$arity = 0);
    Opal.alias(self, "getch", "get_byte");
    
    Opal.def(self, '$match?', TMP_StringScanner_match$q_14 = function(pattern) {
      var self = this;

      
      pattern = self.$anchor(pattern);
      
      var result = pattern.exec(self.working);

      if (result == null) {
        return nil;
      }
      else {
        self.prev_pos = self.pos;

        return result[0].length;
      }
    ;
    }, TMP_StringScanner_match$q_14.$$arity = 1);
    
    Opal.def(self, '$pos=', TMP_StringScanner_pos$eq_15 = function(pos) {
      var self = this;

      
      
      if (pos < 0) {
        pos += self.string.$length();
      }
    ;
      self.pos = pos;
      return (self.working = self.string.slice(pos));
    }, TMP_StringScanner_pos$eq_15.$$arity = 1);
    
    Opal.def(self, '$matched_size', TMP_StringScanner_matched_size_16 = function $$matched_size() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.matched.length
    
    }, TMP_StringScanner_matched_size_16.$$arity = 0);
    
    Opal.def(self, '$post_match', TMP_StringScanner_post_match_17 = function $$post_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(self.pos);
    
    }, TMP_StringScanner_post_match_17.$$arity = 0);
    
    Opal.def(self, '$pre_match', TMP_StringScanner_pre_match_18 = function $$pre_match() {
      var self = this;

      
      if (self.matched === nil) {
        return nil;
      }

      return self.string.substr(0, self.prev_pos);
    
    }, TMP_StringScanner_pre_match_18.$$arity = 0);
    
    Opal.def(self, '$reset', TMP_StringScanner_reset_19 = function $$reset() {
      var self = this;

      
      self.working = self.string;
      self.matched = nil;
      return (self.pos = 0);
    }, TMP_StringScanner_reset_19.$$arity = 0);
    
    Opal.def(self, '$rest', TMP_StringScanner_rest_20 = function $$rest() {
      var self = this;

      return self.working
    }, TMP_StringScanner_rest_20.$$arity = 0);
    
    Opal.def(self, '$rest?', TMP_StringScanner_rest$q_21 = function() {
      var self = this;

      return self.working.length !== 0
    }, TMP_StringScanner_rest$q_21.$$arity = 0);
    
    Opal.def(self, '$rest_size', TMP_StringScanner_rest_size_22 = function $$rest_size() {
      var self = this;

      return self.$rest().$size()
    }, TMP_StringScanner_rest_size_22.$$arity = 0);
    
    Opal.def(self, '$terminate', TMP_StringScanner_terminate_23 = function $$terminate() {
      var self = this, $writer = nil;

      
      self.match = nil;
      
      $writer = [self.string.$length()];
      $send(self, 'pos=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, TMP_StringScanner_terminate_23.$$arity = 0);
    
    Opal.def(self, '$unscan', TMP_StringScanner_unscan_24 = function $$unscan() {
      var self = this;

      
      self.pos = self.prev_pos;
      self.prev_pos = nil;
      self.match = nil;
      return self;
    }, TMP_StringScanner_unscan_24.$$arity = 0);
    self.$private();
    return (Opal.def(self, '$anchor', TMP_StringScanner_anchor_25 = function $$anchor(pattern) {
      var self = this;

      
      var flags = pattern.toString().match(/\/([^\/]+)$/);
      flags = flags ? flags[1] : undefined;
      return new RegExp('^(?:' + pattern.source + ')', flags);
    
    }, TMP_StringScanner_anchor_25.$$arity = 1), nil) && 'anchor';
  })($nesting[0], null, $nesting)
};
