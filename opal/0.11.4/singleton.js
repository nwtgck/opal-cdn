/* Generated by Opal 0.11.99.dev */
Opal.modules["singleton"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$raise', '$class', '$__init__', '$instance_eval', '$new', '$extend']);
  return (function($base, $parent_nesting) {
    function $Singleton() {};
    var self = $Singleton = $module($base, 'Singleton', $Singleton);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Singleton_clone_1, TMP_Singleton_dup_2;

    
    
    Opal.def(self, '$clone', TMP_Singleton_clone_1 = function $$clone() {
      var self = this;

      return self.$raise($$($nesting, 'TypeError'), "" + "can't clone instance of singleton " + (self.$class()))
    }, TMP_Singleton_clone_1.$$arity = 0);
    
    Opal.def(self, '$dup', TMP_Singleton_dup_2 = function $$dup() {
      var self = this;

      return self.$raise($$($nesting, 'TypeError'), "" + "can't dup instance of singleton " + (self.$class()))
    }, TMP_Singleton_dup_2.$$arity = 0);
    (function($base, $parent_nesting) {
      function $SingletonClassMethods() {};
      var self = $SingletonClassMethods = $module($base, 'SingletonClassMethods', $SingletonClassMethods);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_SingletonClassMethods_clone_3, TMP_SingletonClassMethods_inherited_4;

      
      
      Opal.def(self, '$clone', TMP_SingletonClassMethods_clone_3 = function $$clone() {
        var $iter = TMP_SingletonClassMethods_clone_3.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_SingletonClassMethods_clone_3.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        return $$($nesting, 'Singleton').$__init__($send(self, Opal.find_super_dispatcher(self, 'clone', TMP_SingletonClassMethods_clone_3, false), $zuper, $iter))
      }, TMP_SingletonClassMethods_clone_3.$$arity = 0);
      
      Opal.def(self, '$inherited', TMP_SingletonClassMethods_inherited_4 = function $$inherited(sub_klass) {
        var $iter = TMP_SingletonClassMethods_inherited_4.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_SingletonClassMethods_inherited_4.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'inherited', TMP_SingletonClassMethods_inherited_4, false), $zuper, $iter);
        return $$($nesting, 'Singleton').$__init__(sub_klass);
      }, TMP_SingletonClassMethods_inherited_4.$$arity = 1);
    })($nesting[0], $nesting);
    (function(self, $parent_nesting) {
      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP___init___5, TMP_included_8;

      
      
      Opal.def(self, '$__init__', TMP___init___5 = function $$__init__(klass) {
        var TMP_6, TMP_instance_7, self = this;

        
        $send(klass, 'instance_eval', [], (TMP_6 = function(){var self = TMP_6.$$s || this;

        return (self.singleton__instance__ = nil)}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6));
        Opal.defs(klass, '$instance', TMP_instance_7 = function $$instance() {
          var self = this;
          if (self.singleton__instance__ == null) self.singleton__instance__ = nil;

          
          if ($truthy(self.singleton__instance__)) {
            return self.singleton__instance__};
          return (self.singleton__instance__ = self.$new());
        }, TMP_instance_7.$$arity = 0);
        return klass;
      }, TMP___init___5.$$arity = 1);
      return (Opal.def(self, '$included', TMP_included_8 = function $$included(klass) {
        var $iter = TMP_included_8.$$p, $yield = $iter || nil, self = this, $zuper = nil, $zuper_i = nil, $zuper_ii = nil;

        if ($iter) TMP_included_8.$$p = null;
        // Prepare super implicit arguments
        for($zuper_i = 0, $zuper_ii = arguments.length, $zuper = new Array($zuper_ii); $zuper_i < $zuper_ii; $zuper_i++) {
          $zuper[$zuper_i] = arguments[$zuper_i];
        }
        
        $send(self, Opal.find_super_dispatcher(self, 'included', TMP_included_8, false), $zuper, $iter);
        klass.$extend($$($nesting, 'SingletonClassMethods'));
        return $$($nesting, 'Singleton').$__init__(klass);
      }, TMP_included_8.$$arity = 1), nil) && 'included';
    })(Opal.get_singleton_class($$($nesting, 'Singleton')), $nesting);
  })($nesting[0], $nesting)
};
