/* Generated by Opal 0.11.4 */
Opal.modules["benchmark"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_times(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs * rhs : lhs['$*'](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$sync', '$sync=', '$-', '$+', '$empty?', '$print', '$*', '$new', '$===', '$each', '$grep', '$ljust', '$shift', '$label', '$format', '$list', '$nil?', '$benchmark', '$to_proc', '$width', '$puts', '$length', '$inject', '$measure', '$rjust', '$map', '$start', '$tap', '$times', '$clock_gettime', '$utime', '$stime', '$cutime', '$cstime', '$module_function', '$raise', '$to_s', '$<', '$<<', '$attr_reader', '$real', '$memberwise', '$gsub', '$dup', '$%', '$total', '$protected', '$__send__']);
  return (function($base, $parent_nesting) {
    var $Benchmark, self = $Benchmark = $module($base, 'Benchmark');

    var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Benchmark_benchmark_1, TMP_Benchmark_bm_3, TMP_Benchmark_bmbm_4, $a, $b, TMP_Benchmark_measure_8, TMP_Benchmark_realtime_9;

    
    Opal.const_set($nesting[0], 'BENCHMARK_VERSION', "2002-04-25");
    
    Opal.defn(self, '$benchmark', TMP_Benchmark_benchmark_1 = function $$benchmark(caption, label_width, format, $a_rest) {
      var $b, TMP_2, self = this, labels, $iter = TMP_Benchmark_benchmark_1.$$p, $yield = $iter || nil, sync = nil, $writer = nil, report = nil, results = nil;

      if (caption == null) {
        caption = "";
      }
      if (label_width == null) {
        label_width = nil;
      }
      if (format == null) {
        format = nil;
      }
      var $args_len = arguments.length, $rest_len = $args_len - 3;
      if ($rest_len < 0) { $rest_len = 0; }
      labels = new Array($rest_len);
      for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
        labels[$arg_idx - 3] = arguments[$arg_idx];
      }
      if ($iter) TMP_Benchmark_benchmark_1.$$p = null;
      return (function() { try {
      
      sync = Opal.const_get_relative($nesting, 'STDOUT').$sync();
      
      $writer = [true];
      $send(Opal.const_get_relative($nesting, 'STDOUT'), 'sync=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      label_width = ($truthy($b = label_width) ? $b : 0);
      label_width = $rb_plus(label_width, 1);
      format = ($truthy($b = format) ? $b : Opal.const_get_relative($nesting, 'FORMAT'));
      if ($truthy(caption['$empty?']())) {
        } else {
        self.$print($rb_plus($rb_times(" ", label_width), caption))
      };
      report = Opal.const_get_relative($nesting, 'Report').$new(label_width, format);
      results = Opal.yield1($yield, report);
      ($truthy($b = Opal.const_get_relative($nesting, 'Array')['$==='](results)) ? $send(results.$grep(Opal.const_get_relative($nesting, 'Tms')), 'each', [], (TMP_2 = function(t){var self = TMP_2.$$s || this, $a, $c;
if (t == null) t = nil;
      return self.$print(($truthy($a = ($truthy($c = labels.$shift()) ? $c : t.$label())) ? $a : "").$ljust(label_width), t.$format(format))}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2)) : $b);
      return report.$list();
      } finally {
        (function() {if ($truthy(sync['$nil?']())) {
          return nil
          } else {
          
          $writer = [sync];
          $send(Opal.const_get_relative($nesting, 'STDOUT'), 'sync=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }; return nil; })()
      }; })()
    }, TMP_Benchmark_benchmark_1.$$arity = -1);
    
    Opal.defn(self, '$bm', TMP_Benchmark_bm_3 = function $$bm(label_width, $a_rest) {
      var self = this, labels, $iter = TMP_Benchmark_bm_3.$$p, blk = $iter || nil;

      if (label_width == null) {
        label_width = 0;
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      labels = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        labels[$arg_idx - 1] = arguments[$arg_idx];
      }
      if ($iter) TMP_Benchmark_bm_3.$$p = null;
      return $send(self, 'benchmark', [Opal.const_get_relative($nesting, 'CAPTION'), label_width, Opal.const_get_relative($nesting, 'FORMAT')].concat(Opal.to_a(labels)), blk.$to_proc())
    }, TMP_Benchmark_bm_3.$$arity = -1);
    
    Opal.defn(self, '$bmbm', TMP_Benchmark_bmbm_4 = function $$bmbm(width) {
      var TMP_5, TMP_6, self = this, $iter = TMP_Benchmark_bmbm_4.$$p, $yield = $iter || nil, job = nil, sync = nil, $writer = nil, ets = nil;

      if (width == null) {
        width = 0;
      }
      if ($iter) TMP_Benchmark_bmbm_4.$$p = null;
      return (function() { try {
      
      job = Opal.const_get_relative($nesting, 'Job').$new(width);
      Opal.yield1($yield, job);
      width = $rb_plus(job.$width(), 1);
      sync = Opal.const_get_relative($nesting, 'STDOUT').$sync();
      
      $writer = [true];
      $send(Opal.const_get_relative($nesting, 'STDOUT'), 'sync=', Opal.to_a($writer));
      $writer[$rb_minus($writer["length"], 1)];;
      self.$puts("Rehearsal ".$ljust($rb_plus(width, Opal.const_get_relative($nesting, 'CAPTION').$length()), "-"));
      ets = $send(job.$list(), 'inject', [Opal.const_get_relative($nesting, 'Tms').$new()], (TMP_5 = function(sum, $a){var self = TMP_5.$$s || this, $a_args, label, item, res = nil;

        if ($a == null) {
          $a = nil;
        }
        $a = Opal.to_ary($a);
        $a_args = Opal.slice.call($a, 0, $a.length);
        label = $a_args.splice(0,1)[0];
        if (label == null) {
          label = nil;
        }
        item = $a_args.splice(0,1)[0];
        if (item == null) {
          item = nil;
        }if (sum == null) sum = nil;
      
        self.$print(label.$ljust(width));
        res = $send(Opal.const_get_relative($nesting, 'Benchmark'), 'measure', [], item.$to_proc());
        self.$print(res.$format());
        return $rb_plus(sum, res);}, TMP_5.$$s = self, TMP_5.$$arity = 2, TMP_5.$$has_top_level_mlhs_arg = true, TMP_5)).$format("total: %tsec");
      self.$print(((("" + " ") + (ets)) + "\n\n").$rjust($rb_plus($rb_plus(width, Opal.const_get_relative($nesting, 'CAPTION').$length()), 2), "-"));
      self.$print($rb_plus($rb_times(" ", width), Opal.const_get_relative($nesting, 'CAPTION')));
      return $send(job.$list(), 'map', [], (TMP_6 = function(label, item){var self = TMP_6.$$s || this, TMP_7;
if (label == null) label = nil;if (item == null) item = nil;
      
        Opal.const_get_relative($nesting, 'GC').$start();
        self.$print(label.$ljust(width));
        return $send($send(Opal.const_get_relative($nesting, 'Benchmark'), 'measure', [label], item.$to_proc()), 'tap', [], (TMP_7 = function(res){var self = TMP_7.$$s || this;
if (res == null) res = nil;
        return self.$print(res)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6));
      } finally {
        (function() {if ($truthy(sync['$nil?']())) {
          return nil
          } else {
          
          $writer = [sync];
          $send(Opal.const_get_relative($nesting, 'STDOUT'), 'sync=', Opal.to_a($writer));
          return $writer[$rb_minus($writer["length"], 1)];
        }; return nil; })()
      }; })()
    }, TMP_Benchmark_bmbm_4.$$arity = -1);
    
    if ($truthy((($b = Opal.const_get_relative($nesting, 'Process', 'skip_raise')) && ($a = Opal.const_get_qualified($b, 'CLOCK_MONOTONIC', 'skip_raise')) ? 'constant' : nil))) {Opal.const_set($nesting[0], 'BENCHMARK_CLOCK', Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Process'), 'CLOCK_MONOTONIC'))}
    else {Opal.const_set($nesting[0], 'BENCHMARK_CLOCK', Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Process'), 'CLOCK_REALTIME'))};
    
    Opal.defn(self, '$measure', TMP_Benchmark_measure_8 = function $$measure(label) {
      var $a, self = this, $iter = TMP_Benchmark_measure_8.$$p, $yield = $iter || nil, t0 = nil, r0 = nil, t1 = nil, r1 = nil;

      if (label == null) {
        label = "";
      }
      if ($iter) TMP_Benchmark_measure_8.$$p = null;
      
      $a = [Opal.const_get_relative($nesting, 'Process').$times(), Opal.const_get_relative($nesting, 'Process').$clock_gettime(Opal.const_get_relative($nesting, 'BENCHMARK_CLOCK'))], (t0 = $a[0]), (r0 = $a[1]), $a;
      Opal.yieldX($yield, []);
      $a = [Opal.const_get_relative($nesting, 'Process').$times(), Opal.const_get_relative($nesting, 'Process').$clock_gettime(Opal.const_get_relative($nesting, 'BENCHMARK_CLOCK'))], (t1 = $a[0]), (r1 = $a[1]), $a;
      return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms').$new($rb_minus(t1.$utime(), t0.$utime()), $rb_minus(t1.$stime(), t0.$stime()), $rb_minus(t1.$cutime(), t0.$cutime()), $rb_minus(t1.$cstime(), t0.$cstime()), $rb_minus(r1, r0), label);
    }, TMP_Benchmark_measure_8.$$arity = -1);
    
    Opal.defn(self, '$realtime', TMP_Benchmark_realtime_9 = function $$realtime() {
      var self = this, $iter = TMP_Benchmark_realtime_9.$$p, $yield = $iter || nil, r0 = nil;

      if ($iter) TMP_Benchmark_realtime_9.$$p = null;
      
      r0 = Opal.const_get_relative($nesting, 'Process').$clock_gettime(Opal.const_get_relative($nesting, 'BENCHMARK_CLOCK'));
      Opal.yieldX($yield, []);
      return $rb_minus(Opal.const_get_relative($nesting, 'Process').$clock_gettime(Opal.const_get_relative($nesting, 'BENCHMARK_CLOCK')), r0);
    }, TMP_Benchmark_realtime_9.$$arity = 0);
    self.$module_function("benchmark", "measure", "realtime", "bm", "bmbm");
    (function($base, $super, $parent_nesting) {
      function $Job(){};
      var self = $Job = $klass($base, $super, 'Job', $Job);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Job_initialize_10, TMP_Job_item_11;

      def.width = def.list = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Job_initialize_10 = function $$initialize(width) {
        var self = this;

        
        self.width = width;
        return (self.list = []);
      }, TMP_Job_initialize_10.$$arity = 1);
      
      Opal.defn(self, '$item', TMP_Job_item_11 = function $$item(label) {
        var self = this, $iter = TMP_Job_item_11.$$p, blk = $iter || nil, w = nil;

        if (label == null) {
          label = "";
        }
        if ($iter) TMP_Job_item_11.$$p = null;
        
        if ((blk !== nil)) {
          } else {
          self.$raise(Opal.const_get_relative($nesting, 'ArgumentError'), "no block")
        };
        label = label.$to_s();
        w = label.$length();
        if ($truthy($rb_lt(self.width, w))) {
          self.width = w};
        self.list['$<<']([label, blk]);
        return self;
      }, TMP_Job_item_11.$$arity = -1);
      Opal.alias(self, "report", "item");
      self.$attr_reader("list");
      return self.$attr_reader("width");
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Report(){};
      var self = $Report = $klass($base, $super, 'Report', $Report);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Report_initialize_12, TMP_Report_item_13;

      def.width = def.list = def.format = nil;
      
      
      Opal.defn(self, '$initialize', TMP_Report_initialize_12 = function $$initialize(width, format) {
        var $a, self = this;

        if (width == null) {
          width = 0;
        }
        if (format == null) {
          format = nil;
        }
        return $a = [width, format, []], (self.width = $a[0]), (self.format = $a[1]), (self.list = $a[2]), $a
      }, TMP_Report_initialize_12.$$arity = -1);
      
      Opal.defn(self, '$item', TMP_Report_item_13 = function $$item(label, $a_rest) {
        var self = this, format, $iter = TMP_Report_item_13.$$p, blk = $iter || nil, res = nil;

        if (label == null) {
          label = "";
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        format = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          format[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ($iter) TMP_Report_item_13.$$p = null;
        
        self.$print(label.$to_s().$ljust(self.width));
        self.list['$<<']((res = $send(Opal.const_get_relative($nesting, 'Benchmark'), 'measure', [label], blk.$to_proc())));
        self.$print($send(res, 'format', [self.format].concat(Opal.to_a(format))));
        return res;
      }, TMP_Report_item_13.$$arity = -1);
      Opal.alias(self, "report", "item");
      return self.$attr_reader("list");
    })($nesting[0], null, $nesting);
    (function($base, $super, $parent_nesting) {
      function $Tms(){};
      var self = $Tms = $klass($base, $super, 'Tms', $Tms);

      var def = self.$$proto, $nesting = [self].concat($parent_nesting), TMP_Tms_initialize_14, TMP_Tms_add_15, TMP_Tms_add$B_16, TMP_Tms_$_17, TMP_Tms_$_18, TMP_Tms_$_19, TMP_Tms_$_20, TMP_Tms_format_28, TMP_Tms_to_s_29, TMP_Tms_to_a_30, TMP_Tms_memberwise_31;

      def.utime = def.stime = def.cutime = def.cstime = def.label = def.real = nil;
      
      Opal.const_set($nesting[0], 'CAPTION', "      user     system      total        real\n");
      Opal.const_set($nesting[0], 'FORMAT', "%10.6u %10.6y %10.6t %10.6r\n");
      self.$attr_reader("utime");
      self.$attr_reader("stime");
      self.$attr_reader("cutime");
      self.$attr_reader("cstime");
      self.$attr_reader("real");
      self.$attr_reader("total");
      self.$attr_reader("label");
      
      Opal.defn(self, '$initialize', TMP_Tms_initialize_14 = function $$initialize(utime, stime, cutime, cstime, real, label) {
        var $a, self = this;

        if (utime == null) {
          utime = 0.0;
        }
        if (stime == null) {
          stime = 0.0;
        }
        if (cutime == null) {
          cutime = 0.0;
        }
        if (cstime == null) {
          cstime = 0.0;
        }
        if (real == null) {
          real = 0.0;
        }
        if (label == null) {
          label = nil;
        }
        
        $a = [utime, stime, cutime, cstime, real, label.$to_s()], (self.utime = $a[0]), (self.stime = $a[1]), (self.cutime = $a[2]), (self.cstime = $a[3]), (self.real = $a[4]), (self.label = $a[5]), $a;
        return (self.total = $rb_plus($rb_plus($rb_plus(self.utime, self.stime), self.cutime), self.cstime));
      }, TMP_Tms_initialize_14.$$arity = -1);
      
      Opal.defn(self, '$add', TMP_Tms_add_15 = function $$add() {
        var self = this, $iter = TMP_Tms_add_15.$$p, blk = $iter || nil;

        if ($iter) TMP_Tms_add_15.$$p = null;
        return $rb_plus(self, $send(Opal.const_get_relative($nesting, 'Benchmark'), 'measure', [], blk.$to_proc()))
      }, TMP_Tms_add_15.$$arity = 0);
      
      Opal.defn(self, '$add!', TMP_Tms_add$B_16 = function() {
        var self = this, $iter = TMP_Tms_add$B_16.$$p, blk = $iter || nil, t = nil;

        if ($iter) TMP_Tms_add$B_16.$$p = null;
        
        t = $send(Opal.const_get_relative($nesting, 'Benchmark'), 'measure', [], blk.$to_proc());
        self.utime = $rb_plus(self.$utime(), t.$utime());
        self.stime = $rb_plus(self.$stime(), t.$stime());
        self.cutime = $rb_plus(self.$cutime(), t.$cutime());
        self.cstime = $rb_plus(self.$cstime(), t.$cstime());
        self.real = $rb_plus(self.$real(), t.$real());
        return self;
      }, TMP_Tms_add$B_16.$$arity = 0);
      
      Opal.defn(self, '$+', TMP_Tms_$_17 = function(other) {
        var self = this;

        return self.$memberwise("+", other)
      }, TMP_Tms_$_17.$$arity = 1);
      
      Opal.defn(self, '$-', TMP_Tms_$_18 = function(other) {
        var self = this;

        return self.$memberwise("-", other)
      }, TMP_Tms_$_18.$$arity = 1);
      
      Opal.defn(self, '$*', TMP_Tms_$_19 = function(x) {
        var self = this;

        return self.$memberwise("*", x)
      }, TMP_Tms_$_19.$$arity = 1);
      
      Opal.defn(self, '$/', TMP_Tms_$_20 = function(x) {
        var self = this;

        return self.$memberwise("/", x)
      }, TMP_Tms_$_20.$$arity = 1);
      
      Opal.defn(self, '$format', TMP_Tms_format_28 = function $$format(format, $a_rest) {
        var $b, TMP_21, TMP_22, TMP_23, TMP_24, TMP_25, TMP_26, TMP_27, self = this, args, str = nil;

        if (format == null) {
          format = nil;
        }
        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        
        str = $send($send($send($send($send($send($send(($truthy($b = format) ? $b : Opal.const_get_relative($nesting, 'FORMAT')).$dup(), 'gsub', [/(%[-+.\d]*)n/], (TMP_21 = function(){var self = TMP_21.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "s")['$%'](self.$label())}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21)), 'gsub', [/(%[-+.\d]*)u/], (TMP_22 = function(){var self = TMP_22.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f")['$%'](self.$utime())}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22)), 'gsub', [/(%[-+.\d]*)y/], (TMP_23 = function(){var self = TMP_23.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f")['$%'](self.$stime())}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23)), 'gsub', [/(%[-+.\d]*)U/], (TMP_24 = function(){var self = TMP_24.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f")['$%'](self.$cutime())}, TMP_24.$$s = self, TMP_24.$$arity = 0, TMP_24)), 'gsub', [/(%[-+.\d]*)Y/], (TMP_25 = function(){var self = TMP_25.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f")['$%'](self.$cstime())}, TMP_25.$$s = self, TMP_25.$$arity = 0, TMP_25)), 'gsub', [/(%[-+.\d]*)t/], (TMP_26 = function(){var self = TMP_26.$$s || this, $a;

        return (("" + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f")['$%'](self.$total())}, TMP_26.$$s = self, TMP_26.$$arity = 0, TMP_26)), 'gsub', [/(%[-+.\d]*)r/], (TMP_27 = function(){var self = TMP_27.$$s || this, $a;

        return ((("" + "(") + ((($a = $gvars['~']) === nil ? nil : $a['$[]'](1)))) + "f)")['$%'](self.$real())}, TMP_27.$$s = self, TMP_27.$$arity = 0, TMP_27));
        if ($truthy(format)) {
          return str['$%'](args)
          } else {
          return str
        };
      }, TMP_Tms_format_28.$$arity = -1);
      
      Opal.defn(self, '$to_s', TMP_Tms_to_s_29 = function $$to_s() {
        var self = this;

        return self.$format()
      }, TMP_Tms_to_s_29.$$arity = 0);
      
      Opal.defn(self, '$to_a', TMP_Tms_to_a_30 = function $$to_a() {
        var self = this;

        return [self.label, self.utime, self.stime, self.cutime, self.cstime, self.real]
      }, TMP_Tms_to_a_30.$$arity = 0);
      self.$protected();
      return (Opal.defn(self, '$memberwise', TMP_Tms_memberwise_31 = function $$memberwise(op, x) {
        var self = this, $case = nil;

        return (function() {$case = x;
        if (Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms')['$===']($case)) {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms').$new(self.$utime().$__send__(op, x.$utime()), self.$stime().$__send__(op, x.$stime()), self.$cutime().$__send__(op, x.$cutime()), self.$cstime().$__send__(op, x.$cstime()), self.$real().$__send__(op, x.$real()))}
        else {return Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms').$new(self.$utime().$__send__(op, x), self.$stime().$__send__(op, x), self.$cutime().$__send__(op, x), self.$cstime().$__send__(op, x), self.$real().$__send__(op, x))}})()
      }, TMP_Tms_memberwise_31.$$arity = 2), nil) && 'memberwise';
    })($nesting[0], null, $nesting);
    Opal.const_set($nesting[0], 'CAPTION', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms'), 'CAPTION'));
    Opal.const_set($nesting[0], 'FORMAT', Opal.const_get_qualified(Opal.const_get_qualified(Opal.const_get_relative($nesting, 'Benchmark'), 'Tms'), 'FORMAT'));
  })($nesting[0], $nesting)
};
