Opal.modules["nashorn/io"]=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var nil=Opal.nil,$send=(Opal.const_get_qualified,Opal.const_get_relative,Opal.breaker,Opal.slice,Opal.send),$gvars=Opal.gvars,$writer=nil;return null==$gvars.stdout&&($gvars.stdout=nil),null==$gvars.stderr&&($gvars.stderr=nil),Opal.add_stubs(["$write_proc=","$-"]),$writer=[function(s){print(s)}],$send($gvars.stdout,"write_proc=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)],$writer=[function(s){print(s)}],$send($gvars.stderr,"write_proc=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},Opal.modules["nashorn/file"]=function(Opal){Opal.top;var $nesting=[],nil=Opal.nil,$klass=(Opal.const_get_qualified,Opal.const_get_relative,Opal.breaker,Opal.slice,Opal.klass);return function($base,$super,$parent_nesting){function $File(){}var TMP_File_read_1,TMP_File_file$q_2,TMP_File_readable$q_3,self=$File=$klass($base,null,"File",$File);self.prototype,[self].concat($parent_nesting);return Opal.defs(self,"$read",TMP_File_read_1=function(path){var Paths=Java.type("java.nio.file.Paths"),data=[];return Java.type("java.nio.file.Files").readAllLines(Paths.get(path),Java.type("java.nio.charset.StandardCharsets").UTF_8).forEach(function(line){data.push(line)}),data.join("\n")},TMP_File_read_1.$$arity=1),Opal.defs(self,"$file?",TMP_File_file$q_2=function(path){var Files=Java.type("java.nio.file.Files");return Files.exists(path)&&Files.isRegularFile(path)},TMP_File_file$q_2.$$arity=1),Opal.defs(self,"$readable?",TMP_File_readable$q_3=function(path){var Files=Java.type("java.nio.file.Files");return Files.exists(path)&&Files.isReadable(path)},TMP_File_readable$q_3.$$arity=1),nil&&"readable?"}($nesting[0],0,$nesting)},Opal.modules.nashorn=function(Opal){var self=Opal.top,$nesting=[],$module=(Opal.nil,Opal.const_get_qualified,Opal.const_get_relative,Opal.breaker,Opal.slice,Opal.module);return Opal.add_stubs(["$require"]),function($base,$parent_nesting){function $Nashorn(){}var self=$Nashorn=$module($base,"Nashorn",$Nashorn);self.prototype,[self].concat($parent_nesting)}($nesting[0],$nesting),self.$require("nashorn/io"),self.$require("nashorn/file")};
