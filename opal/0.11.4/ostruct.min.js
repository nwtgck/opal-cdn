Opal.modules.ostruct=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_plus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs+rhs:lhs["$+"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$klass=(Opal.breaker,Opal.slice,Opal.klass),$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$range=Opal.range;return Opal.add_stubs(["$each_pair","$new_ostruct_member","$[]=","$-","$[]","$to_sym","$>","$length","$raise","$new","$end_with?","$!=","$enum_for","$is_a?","$==","$instance_variable_get","$===","$eql?","$dup","$to_n","$hash","$attr_reader","$__send__","$singleton_class","$delete","$respond_to?","$define_singleton_method","$__id__","$class","$any?","$+","$join","$map","$inspect"]),function($base,$super,$parent_nesting){function $OpenStruct(){}var TMP_OpenStruct_initialize_1,TMP_OpenStruct_$$_3,TMP_OpenStruct_$$$eq_4,TMP_OpenStruct_method_missing_5,TMP_OpenStruct_each_pair_6,TMP_OpenStruct_$eq$eq_8,TMP_OpenStruct_$eq$eq$eq_9,TMP_OpenStruct_eql$q_10,TMP_OpenStruct_to_h_11,TMP_OpenStruct_to_n_12,TMP_OpenStruct_hash_13,TMP_OpenStruct_delete_field_14,TMP_OpenStruct_new_ostruct_member_15,TMP_OpenStruct_inspect_18,ostruct_ids,self=$OpenStruct=$klass($base,null,"OpenStruct",$OpenStruct),def=self.prototype,$nesting=[self].concat($parent_nesting);return def.table=nil,Opal.def(self,"$initialize",TMP_OpenStruct_initialize_1=function(hash){var TMP_2;return null==hash&&(hash=nil),this.table=$hash2([],{}),$truthy(hash)?$send(hash,"each_pair",[],((TMP_2=function(key,value){var $writer,self=TMP_2.$$s||this;return null==self.table&&(self.table=nil),null==key&&(key=nil),null==value&&(value=nil),$writer=[self.$new_ostruct_member(key),value],$send(self.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,TMP_2.$$arity=2,TMP_2)):nil},TMP_OpenStruct_initialize_1.$$arity=-1),Opal.def(self,"$[]",TMP_OpenStruct_$$_3=function(name){return this.table["$[]"](name.$to_sym())},TMP_OpenStruct_$$_3.$$arity=1),Opal.def(self,"$[]=",TMP_OpenStruct_$$$eq_4=function(name,value){var $writer;return $writer=[this.$new_ostruct_member(name),value],$send(this.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},TMP_OpenStruct_$$$eq_4.$$arity=2),Opal.def(self,"$method_missing",TMP_OpenStruct_method_missing_5=function(name,$a){var $post_args,args,lhs,rhs,$writer=nil;return $post_args=Opal.slice.call(arguments,1,arguments.length),$truthy((lhs=(args=$post_args).$length(),rhs=2,"number"==typeof lhs&&"number"==typeof rhs?lhs>rhs:lhs["$>"](rhs)))&&this.$raise($$($nesting,"NoMethodError").$new("undefined method `"+name+"' for #<OpenStruct>",name)),$truthy(name["$end_with?"]("="))?($truthy(args.$length()["$!="](1))&&this.$raise($$($nesting,"ArgumentError"),"wrong number of arguments (0 for 1)"),$writer=[this.$new_ostruct_member(name["$[]"]($range(0,-2,!1))),args["$[]"](0)],$send(this.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]):this.table["$[]"](name.$to_sym())},TMP_OpenStruct_method_missing_5.$$arity=-2),Opal.def(self,"$each_pair",TMP_OpenStruct_each_pair_6=function(){var TMP_7,$iter=TMP_OpenStruct_each_pair_6.$$p,$yield=$iter||nil;return $iter&&(TMP_OpenStruct_each_pair_6.$$p=null),$yield===nil?this.$enum_for("each_pair"):$send(this.table,"each_pair",[],((TMP_7=function(pair){TMP_7.$$s;return null==pair&&(pair=nil),Opal.yield1($yield,pair)}).$$s=this,TMP_7.$$arity=1,TMP_7))},TMP_OpenStruct_each_pair_6.$$arity=0),Opal.def(self,"$==",TMP_OpenStruct_$eq$eq_8=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$=="](other.$instance_variable_get("@table"))},TMP_OpenStruct_$eq$eq_8.$$arity=1),Opal.def(self,"$===",TMP_OpenStruct_$eq$eq$eq_9=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$==="](other.$instance_variable_get("@table"))},TMP_OpenStruct_$eq$eq$eq_9.$$arity=1),Opal.def(self,"$eql?",TMP_OpenStruct_eql$q_10=function(other){return!!$truthy(other["$is_a?"]($$($nesting,"OpenStruct")))&&this.table["$eql?"](other.$instance_variable_get("@table"))},TMP_OpenStruct_eql$q_10.$$arity=1),Opal.def(self,"$to_h",TMP_OpenStruct_to_h_11=function(){return this.table.$dup()},TMP_OpenStruct_to_h_11.$$arity=0),Opal.def(self,"$to_n",TMP_OpenStruct_to_n_12=function(){return this.table.$to_n()},TMP_OpenStruct_to_n_12.$$arity=0),Opal.def(self,"$hash",TMP_OpenStruct_hash_13=function(){return this.table.$hash()},TMP_OpenStruct_hash_13.$$arity=0),self.$attr_reader("table"),Opal.def(self,"$delete_field",TMP_OpenStruct_delete_field_14=function(name){var sym;sym=name.$to_sym();try{this.$singleton_class().$__send__("remove_method",sym,sym+"=")}catch($err){if(!Opal.rescue($err,[$$($nesting,"NameError")]))throw $err;Opal.pop_exception()}return this.table.$delete(sym)},TMP_OpenStruct_delete_field_14.$$arity=1),Opal.def(self,"$new_ostruct_member",TMP_OpenStruct_new_ostruct_member_15=function(name){var TMP_16,TMP_17;return name=name.$to_sym(),$truthy(this["$respond_to?"](name))||($send(this,"define_singleton_method",[name],((TMP_16=function(){var self=TMP_16.$$s||this;return null==self.table&&(self.table=nil),self.table["$[]"](name)}).$$s=this,TMP_16.$$arity=0,TMP_16)),$send(this,"define_singleton_method",[name+"="],((TMP_17=function(x){var $writer,self=TMP_17.$$s||this;return null==self.table&&(self.table=nil),null==x&&(x=nil),$writer=[name,x],$send(self.table,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,TMP_17.$$arity=1,TMP_17))),name},TMP_OpenStruct_new_ostruct_member_15.$$arity=1),Opal.def(self,"$inspect",TMP_OpenStruct_inspect_18=function(){var TMP_19,self=this,result=nil,top=void 0===ostruct_ids,ostruct_id=self.$__id__();return function(){try{return result="#<"+self.$class(),top&&(ostruct_ids={}),ostruct_ids.hasOwnProperty(ostruct_id)?result+" ...>":(ostruct_ids[ostruct_id]=!0,$truthy(self.table["$any?"]())&&(result=$rb_plus(result," ")),result=$rb_plus(result=$rb_plus(result,$send(self.$each_pair(),"map",[],(TMP_19=function(name,value){TMP_19.$$s;return null==name&&(name=nil),null==value&&(value=nil),name+"="+value.$inspect()},TMP_19.$$s=self,TMP_19.$$arity=2,TMP_19)).$join(", ")),">"))}finally{top&&(ostruct_ids=void 0)}}()},TMP_OpenStruct_inspect_18.$$arity=0),Opal.alias(self,"to_s","inspect")}($nesting[0],0,$nesting)};
