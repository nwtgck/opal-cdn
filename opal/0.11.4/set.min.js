Opal.modules.set=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}function $rb_lt(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<rhs:lhs["$<"](rhs)}function $rb_le(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs<=rhs:lhs["$<="](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$$=(Opal.const_get_qualified,Opal.const_get_relative),$klass=(Opal.breaker,Opal.slice,Opal.klass),$hash2=Opal.hash2,$truthy=Opal.truthy,$send=Opal.send,$module=Opal.module;return Opal.add_stubs(["$include","$new","$nil?","$===","$raise","$each","$add","$merge","$class","$respond_to?","$subtract","$dup","$join","$to_a","$equal?","$instance_of?","$==","$instance_variable_get","$is_a?","$size","$all?","$include?","$[]=","$-","$enum_for","$[]","$<<","$replace","$delete","$select","$each_key","$to_proc","$empty?","$eql?","$instance_eval","$clear","$<","$<=","$keys"]),function($base,$super,$parent_nesting){function $Set(){}var TMP_Set_$$_1,TMP_Set_initialize_2,TMP_Set_dup_4,TMP_Set_$_5,TMP_Set_inspect_6,TMP_Set_$eq$eq_7,TMP_Set_add_9,TMP_Set_classify_10,TMP_Set_collect$B_13,TMP_Set_delete_15,TMP_Set_delete$q_16,TMP_Set_delete_if_17,TMP_Set_add$q_20,TMP_Set_each_21,TMP_Set_empty$q_22,TMP_Set_eql$q_23,TMP_Set_clear_25,TMP_Set_include$q_26,TMP_Set_merge_27,TMP_Set_replace_29,TMP_Set_size_30,TMP_Set_subtract_31,TMP_Set_$_33,TMP_Set_superset$q_34,TMP_Set_proper_superset$q_36,TMP_Set_subset$q_38,TMP_Set_proper_subset$q_40,TMP_Set_to_a_42,self=$Set=$klass($base,null,"Set",$Set),def=self.prototype,$nesting=[self].concat($parent_nesting);def.hash=nil,self.$include($$($nesting,"Enumerable")),Opal.defs(self,"$[]",TMP_Set_$$_1=function($a){var ary;return ary=Opal.slice.call(arguments,0,arguments.length),this.$new(ary)},TMP_Set_$$_1.$$arity=-1),Opal.def(self,"$initialize",TMP_Set_initialize_2=function(enum$){var TMP_3,$iter=TMP_Set_initialize_2.$$p,block=$iter||nil;return $iter&&(TMP_Set_initialize_2.$$p=null),$iter&&(TMP_Set_initialize_2.$$p=null),null==enum$&&(enum$=nil),this.hash=$hash2([],{}),$truthy(enum$["$nil?"]())?nil:($truthy($$($nesting,"Enumerable")["$==="](enum$))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),$truthy(block)?$send(enum$,"each",[],((TMP_3=function(item){var self=TMP_3.$$s||this;return null==item&&(item=nil),self.$add(Opal.yield1(block,item))}).$$s=this,TMP_3.$$arity=1,TMP_3)):this.$merge(enum$))},TMP_Set_initialize_2.$$arity=-1),Opal.def(self,"$dup",TMP_Set_dup_4=function(){return this.$class().$new().$merge(this)},TMP_Set_dup_4.$$arity=0),Opal.def(self,"$-",TMP_Set_$_5=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$subtract(enum$)},TMP_Set_$_5.$$arity=1),Opal.alias(self,"difference","-"),Opal.def(self,"$inspect",TMP_Set_inspect_6=function(){return"#<Set: {"+this.$to_a().$join(",")+"}>"},TMP_Set_inspect_6.$$arity=0),Opal.def(self,"$==",TMP_Set_$eq$eq_7=function(other){var $a,TMP_8;return!!$truthy(this["$equal?"](other))||($truthy(other["$instance_of?"](this.$class()))?this.hash["$=="](other.$instance_variable_get("@hash")):!!$truthy($truthy($a=other["$is_a?"]($$($nesting,"Set")))?this.$size()["$=="](other.$size()):$a)&&$send(other,"all?",[],((TMP_8=function(o){var self=TMP_8.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash["$include?"](o)}).$$s=this,TMP_8.$$arity=1,TMP_8)))},TMP_Set_$eq$eq_7.$$arity=1),Opal.def(self,"$add",TMP_Set_add_9=function(o){var $writer;return $writer=[o,!0],$send(this.hash,"[]=",Opal.to_a($writer)),$rb_minus($writer.length,1),this},TMP_Set_add_9.$$arity=1),Opal.alias(self,"<<","add"),Opal.def(self,"$classify",TMP_Set_classify_10=function(){var TMP_11,TMP_12,$iter=TMP_Set_classify_10.$$p,block=$iter||nil,result=nil;return $iter&&(TMP_Set_classify_10.$$p=null),$iter&&(TMP_Set_classify_10.$$p=null),block===nil?this.$enum_for("classify"):(result=$send($$($nesting,"Hash"),"new",[],((TMP_11=function(h,k){var $writer,self=TMP_11.$$s||this;return null==h&&(h=nil),null==k&&(k=nil),$writer=[k,self.$class().$new()],$send(h,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]}).$$s=this,TMP_11.$$arity=2,TMP_11)),$send(this,"each",[],((TMP_12=function(item){TMP_12.$$s;return null==item&&(item=nil),result["$[]"](Opal.yield1(block,item)).$add(item)}).$$s=this,TMP_12.$$arity=1,TMP_12)),result)},TMP_Set_classify_10.$$arity=0),Opal.def(self,"$collect!",TMP_Set_collect$B_13=function(){var TMP_14,$iter=TMP_Set_collect$B_13.$$p,block=$iter||nil,result=nil;return $iter&&(TMP_Set_collect$B_13.$$p=null),$iter&&(TMP_Set_collect$B_13.$$p=null),block===nil?this.$enum_for("collect!"):(result=this.$class().$new(),$send(this,"each",[],((TMP_14=function(item){TMP_14.$$s;return null==item&&(item=nil),result["$<<"](Opal.yield1(block,item))}).$$s=this,TMP_14.$$arity=1,TMP_14)),this.$replace(result))},TMP_Set_collect$B_13.$$arity=0),Opal.alias(self,"map!","collect!"),Opal.def(self,"$delete",TMP_Set_delete_15=function(o){return this.hash.$delete(o),this},TMP_Set_delete_15.$$arity=1),Opal.def(self,"$delete?",TMP_Set_delete$q_16=function(o){return $truthy(this["$include?"](o))?(this.$delete(o),this):nil},TMP_Set_delete$q_16.$$arity=1),Opal.def(self,"$delete_if",TMP_Set_delete_if_17=function(){var TMP_18,TMP_19,$iter=TMP_Set_delete_if_17.$$p,$yield=$iter||nil;return $iter&&(TMP_Set_delete_if_17.$$p=null),$yield===nil?this.$enum_for("delete_if"):($send($send(this,"select",[],((TMP_18=function(o){TMP_18.$$s;return null==o&&(o=nil),Opal.yield1($yield,o)}).$$s=this,TMP_18.$$arity=1,TMP_18)),"each",[],((TMP_19=function(o){var self=TMP_19.$$s||this;return null==self.hash&&(self.hash=nil),null==o&&(o=nil),self.hash.$delete(o)}).$$s=this,TMP_19.$$arity=1,TMP_19)),this)},TMP_Set_delete_if_17.$$arity=0),Opal.def(self,"$add?",TMP_Set_add$q_20=function(o){return $truthy(this["$include?"](o))?nil:this.$add(o)},TMP_Set_add$q_20.$$arity=1),Opal.def(self,"$each",TMP_Set_each_21=function(){var $iter=TMP_Set_each_21.$$p,block=$iter||nil;return $iter&&(TMP_Set_each_21.$$p=null),$iter&&(TMP_Set_each_21.$$p=null),block===nil?this.$enum_for("each"):($send(this.hash,"each_key",[],block.$to_proc()),this)},TMP_Set_each_21.$$arity=0),Opal.def(self,"$empty?",TMP_Set_empty$q_22=function(){return this.hash["$empty?"]()},TMP_Set_empty$q_22.$$arity=0),Opal.def(self,"$eql?",TMP_Set_eql$q_23=function(other){var TMP_24;return this.hash["$eql?"]($send(other,"instance_eval",[],((TMP_24=function(){var self=TMP_24.$$s||this;return null==self.hash&&(self.hash=nil),self.hash}).$$s=this,TMP_24.$$arity=0,TMP_24)))},TMP_Set_eql$q_23.$$arity=1),Opal.def(self,"$clear",TMP_Set_clear_25=function(){return this.hash.$clear(),this},TMP_Set_clear_25.$$arity=0),Opal.def(self,"$include?",TMP_Set_include$q_26=function(o){return this.hash["$include?"](o)},TMP_Set_include$q_26.$$arity=1),Opal.alias(self,"member?","include?"),Opal.def(self,"$merge",TMP_Set_merge_27=function(enum$){var TMP_28;return $send(enum$,"each",[],((TMP_28=function(item){var self=TMP_28.$$s||this;return null==item&&(item=nil),self.$add(item)}).$$s=this,TMP_28.$$arity=1,TMP_28)),this},TMP_Set_merge_27.$$arity=1),Opal.def(self,"$replace",TMP_Set_replace_29=function(enum$){return this.$clear(),this.$merge(enum$),this},TMP_Set_replace_29.$$arity=1),Opal.def(self,"$size",TMP_Set_size_30=function(){return this.hash.$size()},TMP_Set_size_30.$$arity=0),Opal.alias(self,"length","size"),Opal.def(self,"$subtract",TMP_Set_subtract_31=function(enum$){var TMP_32;return $send(enum$,"each",[],((TMP_32=function(item){var self=TMP_32.$$s||this;return null==item&&(item=nil),self.$delete(item)}).$$s=this,TMP_32.$$arity=1,TMP_32)),this},TMP_Set_subtract_31.$$arity=1),Opal.def(self,"$|",TMP_Set_$_33=function(enum$){return $truthy(enum$["$respond_to?"]("each"))||this.$raise($$($nesting,"ArgumentError"),"value must be enumerable"),this.$dup().$merge(enum$)},TMP_Set_$_33.$$arity=1),Opal.def(self,"$superset?",TMP_Set_superset$q_34=function(set){var TMP_35;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(this.$size(),set.$size()))&&$send(set,"all?",[],((TMP_35=function(o){var self=TMP_35.$$s||this;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,TMP_35.$$arity=1,TMP_35))},TMP_Set_superset$q_34.$$arity=1),Opal.alias(self,">=","superset?"),Opal.def(self,"$proper_superset?",TMP_Set_proper_superset$q_36=function(set){var TMP_37;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(this.$size(),set.$size()))&&$send(set,"all?",[],((TMP_37=function(o){var self=TMP_37.$$s||this;return null==o&&(o=nil),self["$include?"](o)}).$$s=this,TMP_37.$$arity=1,TMP_37))},TMP_Set_proper_superset$q_36.$$arity=1),Opal.alias(self,">","proper_superset?"),Opal.def(self,"$subset?",TMP_Set_subset$q_38=function(set){var TMP_39;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_lt(set.$size(),this.$size()))&&$send(this,"all?",[],((TMP_39=function(o){TMP_39.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,TMP_39.$$arity=1,TMP_39))},TMP_Set_subset$q_38.$$arity=1),Opal.alias(self,"<=","subset?"),Opal.def(self,"$proper_subset?",TMP_Set_proper_subset$q_40=function(set){var TMP_41;return $truthy(set["$is_a?"]($$($nesting,"Set")))||this.$raise($$($nesting,"ArgumentError"),"value must be a set"),!$truthy($rb_le(set.$size(),this.$size()))&&$send(this,"all?",[],((TMP_41=function(o){TMP_41.$$s;return null==o&&(o=nil),set["$include?"](o)}).$$s=this,TMP_41.$$arity=1,TMP_41))},TMP_Set_proper_subset$q_40.$$arity=1),Opal.alias(self,"<","proper_subset?"),Opal.alias(self,"+","|"),Opal.alias(self,"union","|"),Opal.def(self,"$to_a",TMP_Set_to_a_42=function(){return this.hash.$keys()},TMP_Set_to_a_42.$$arity=0)}($nesting[0],0,$nesting),function($base,$parent_nesting){function $Enumerable(){}var TMP_Enumerable_to_set_43,self=$Enumerable=$module($base,"Enumerable",$Enumerable),$nesting=(self.prototype,[self].concat($parent_nesting));Opal.def(self,"$to_set",TMP_Enumerable_to_set_43=function($a,$b){var $post_args,klass,args,$iter=TMP_Enumerable_to_set_43.$$p,block=$iter||nil,self=this;return $iter&&(TMP_Enumerable_to_set_43.$$p=null),$iter&&(TMP_Enumerable_to_set_43.$$p=null),($post_args=Opal.slice.call(arguments,0,arguments.length)).length>0&&(klass=$post_args[0],$post_args.splice(0,1)),null==klass&&(klass=$$($nesting,"Set")),args=$post_args,$send(klass,"new",[self].concat(Opal.to_a(args)),block.$to_proc())},TMP_Enumerable_to_set_43.$$arity=-1)}($nesting[0],$nesting)};
