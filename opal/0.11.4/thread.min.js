Opal.modules.thread=function(Opal){function $rb_minus(lhs,rhs){return"number"==typeof lhs&&"number"==typeof rhs?lhs-rhs:lhs["$-"](rhs)}Opal.top;var $nesting=[],nil=Opal.nil,$klass=(Opal.breaker,Opal.slice,Opal.klass),$truthy=Opal.truthy,$send=Opal.send,$hash2=Opal.hash2;return Opal.add_stubs(["$allocate","$core_initialize!","$current","$fail","$[]","$coerce_key_name","$[]=","$-","$key?","$keys","$private","$coerce_to!","$public","$clear","$empty?","$size","$shift","$push","$each","$to_proc","$locked?","$lock","$unlock"]),function($base,$super,$parent_nesting){function $ThreadError(){}var self=$ThreadError=$klass($base,$super,"ThreadError",$ThreadError);self.$$proto,[self].concat($parent_nesting)}($nesting[0],Opal.const_get_relative($nesting,"StandardError"),$nesting),function($base,$super,$parent_nesting){function $Thread(){}var TMP_Thread_current_1,TMP_Thread_list_2,TMP_Thread_initialize_3,TMP_Thread_$$_4,TMP_Thread_$$$eq_5,TMP_Thread_key$q_6,TMP_Thread_keys_7,TMP_Thread_thread_variable_get_8,TMP_Thread_thread_variable_set_9,TMP_Thread_thread_variable$q_10,TMP_Thread_thread_variables_11,TMP_Thread_core_initialize$B_12,TMP_Thread_coerce_key_name_13,self=$Thread=$klass($base,null,"Thread",$Thread),def=self.$$proto,$nesting=[self].concat($parent_nesting);def.fiber_locals=def.thread_locals=nil,Opal.defs(self,"$current",TMP_Thread_current_1=function(){return null==this.current&&(this.current=nil),$truthy(this.current)||(this.current=this.$allocate(),this.current["$core_initialize!"]()),this.current},TMP_Thread_current_1.$$arity=0),Opal.defs(self,"$list",TMP_Thread_list_2=function(){return[this.$current()]},TMP_Thread_list_2.$$arity=0),Opal.defn(self,"$initialize",TMP_Thread_initialize_3=function($a_rest){var args,$args_len=arguments.length,$rest_len=$args_len-0;$rest_len<0&&($rest_len=0),args=new Array($rest_len);for(var $arg_idx=0;$arg_idx<$args_len;$arg_idx++)args[$arg_idx-0]=arguments[$arg_idx];return this.$fail(Opal.const_get_relative($nesting,"NotImplementedError"),"Thread creation not available")},TMP_Thread_initialize_3.$$arity=-1),Opal.defn(self,"$[]",TMP_Thread_$$_4=function(key){return this.fiber_locals["$[]"](this.$coerce_key_name(key))},TMP_Thread_$$_4.$$arity=1),Opal.defn(self,"$[]=",TMP_Thread_$$$eq_5=function(key,value){var $writer;return $writer=[this.$coerce_key_name(key),value],$send(this.fiber_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},TMP_Thread_$$$eq_5.$$arity=2),Opal.defn(self,"$key?",TMP_Thread_key$q_6=function(key){return this.fiber_locals["$key?"](this.$coerce_key_name(key))},TMP_Thread_key$q_6.$$arity=1),Opal.defn(self,"$keys",TMP_Thread_keys_7=function(){return this.fiber_locals.$keys()},TMP_Thread_keys_7.$$arity=0),Opal.defn(self,"$thread_variable_get",TMP_Thread_thread_variable_get_8=function(key){return this.thread_locals["$[]"](this.$coerce_key_name(key))},TMP_Thread_thread_variable_get_8.$$arity=1),Opal.defn(self,"$thread_variable_set",TMP_Thread_thread_variable_set_9=function(key,value){var $writer;return $writer=[this.$coerce_key_name(key),value],$send(this.thread_locals,"[]=",Opal.to_a($writer)),$writer[$rb_minus($writer.length,1)]},TMP_Thread_thread_variable_set_9.$$arity=2),Opal.defn(self,"$thread_variable?",TMP_Thread_thread_variable$q_10=function(key){return this.thread_locals["$key?"](this.$coerce_key_name(key))},TMP_Thread_thread_variable$q_10.$$arity=1),Opal.defn(self,"$thread_variables",TMP_Thread_thread_variables_11=function(){return this.thread_locals.$keys()},TMP_Thread_thread_variables_11.$$arity=0),self.$private(),Opal.defn(self,"$core_initialize!",TMP_Thread_core_initialize$B_12=function(){return this.thread_locals=$hash2([],{}),this.fiber_locals=$hash2([],{})},TMP_Thread_core_initialize$B_12.$$arity=0),Opal.defn(self,"$coerce_key_name",TMP_Thread_coerce_key_name_13=function(key){return Opal.const_get_relative($nesting,"Opal")["$coerce_to!"](key,Opal.const_get_relative($nesting,"String"),"to_s")},TMP_Thread_coerce_key_name_13.$$arity=1),self.$public(),function($base,$super,$parent_nesting){function $Queue(){}var TMP_Queue_initialize_14,TMP_Queue_clear_15,TMP_Queue_empty$q_16,TMP_Queue_size_17,TMP_Queue_pop_18,TMP_Queue_push_19,TMP_Queue_each_20,self=$Queue=$klass($base,null,"Queue",$Queue),def=self.$$proto,$nesting=[self].concat($parent_nesting);def.storage=nil,Opal.defn(self,"$initialize",TMP_Queue_initialize_14=function(){return this.$clear()},TMP_Queue_initialize_14.$$arity=0),Opal.defn(self,"$clear",TMP_Queue_clear_15=function(){return this.storage=[]},TMP_Queue_clear_15.$$arity=0),Opal.defn(self,"$empty?",TMP_Queue_empty$q_16=function(){return this.storage["$empty?"]()},TMP_Queue_empty$q_16.$$arity=0),Opal.defn(self,"$size",TMP_Queue_size_17=function(){return this.storage.$size()},TMP_Queue_size_17.$$arity=0),Opal.alias(self,"length","size"),Opal.defn(self,"$pop",TMP_Queue_pop_18=function(non_block){return null==non_block&&(non_block=!1),$truthy(this["$empty?"]())&&($truthy(non_block)&&this.$fail(Opal.const_get_relative($nesting,"ThreadError"),"Queue empty"),this.$fail(Opal.const_get_relative($nesting,"ThreadError"),"Deadlock")),this.storage.$shift()},TMP_Queue_pop_18.$$arity=-1),Opal.alias(self,"shift","pop"),Opal.alias(self,"deq","pop"),Opal.defn(self,"$push",TMP_Queue_push_19=function(value){return this.storage.$push(value)},TMP_Queue_push_19.$$arity=1),Opal.alias(self,"<<","push"),Opal.alias(self,"enq","push"),Opal.defn(self,"$each",TMP_Queue_each_20=function(){var $iter=TMP_Queue_each_20.$$p,block=$iter||nil;return $iter&&(TMP_Queue_each_20.$$p=null),$send(this.storage,"each",[],block.$to_proc())},TMP_Queue_each_20.$$arity=0)}($nesting[0],0,$nesting)}($nesting[0],0,$nesting),Opal.const_set($nesting[0],"Queue",Opal.const_get_qualified(Opal.const_get_relative($nesting,"Thread"),"Queue")),function($base,$super,$parent_nesting){function $Mutex(){}var TMP_Mutex_initialize_21,TMP_Mutex_lock_22,TMP_Mutex_locked$q_23,TMP_Mutex_owned$q_24,TMP_Mutex_try_lock_25,TMP_Mutex_unlock_26,TMP_Mutex_synchronize_27,self=$Mutex=$klass($base,null,"Mutex",$Mutex),def=self.$$proto,$nesting=[self].concat($parent_nesting);return def.locked=nil,Opal.defn(self,"$initialize",TMP_Mutex_initialize_21=function(){return this.locked=!1},TMP_Mutex_initialize_21.$$arity=0),Opal.defn(self,"$lock",TMP_Mutex_lock_22=function(){return $truthy(this.locked)&&this.$fail(Opal.const_get_relative($nesting,"ThreadError"),"Deadlock"),this.locked=!0,this},TMP_Mutex_lock_22.$$arity=0),Opal.defn(self,"$locked?",TMP_Mutex_locked$q_23=function(){return this.locked},TMP_Mutex_locked$q_23.$$arity=0),Opal.defn(self,"$owned?",TMP_Mutex_owned$q_24=function(){return this.locked},TMP_Mutex_owned$q_24.$$arity=0),Opal.defn(self,"$try_lock",TMP_Mutex_try_lock_25=function(){return!$truthy(this["$locked?"]())&&(this.$lock(),!0)},TMP_Mutex_try_lock_25.$$arity=0),Opal.defn(self,"$unlock",TMP_Mutex_unlock_26=function(){return $truthy(this.locked)||this.$fail(Opal.const_get_relative($nesting,"ThreadError"),"Mutex not locked"),this.locked=!1,this},TMP_Mutex_unlock_26.$$arity=0),Opal.defn(self,"$synchronize",TMP_Mutex_synchronize_27=function(){var self=this,$iter=TMP_Mutex_synchronize_27.$$p,$yield=$iter||nil;return $iter&&(TMP_Mutex_synchronize_27.$$p=null),self.$lock(),function(){try{return Opal.yieldX($yield,[])}finally{self.$unlock()}}()},TMP_Mutex_synchronize_27.$$arity=0),nil&&"synchronize"}($nesting[0],0,$nesting)};
