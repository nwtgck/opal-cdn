/* Generated by Opal 0.11.99.dev */
Opal.modules["template"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$[]', '$[]=', '$-', '$keys', '$attr_reader', '$instance_exec', '$new', '$to_proc', '$<<', '$join']);
  return (function($base, $super, $parent_nesting) {
    function $Template(){};
    var self = $Template = $klass($base, $super, 'Template', $Template);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Template_$$_1, TMP_Template_$$$eq_2, TMP_Template_paths_3, TMP_Template_initialize_4, TMP_Template_inspect_5, TMP_Template_render_6;

    def.name = def.body = nil;
    
    self._cache = $hash2([], {});
    Opal.defs(self, '$[]', TMP_Template_$$_1 = function(name) {
      var $a, self = this;
      if (self._cache == null) self._cache = nil;

      return ($truthy($a = self._cache['$[]'](name)) ? $a : self._cache['$[]']("" + "templates/" + (name)))
    }, TMP_Template_$$_1.$$arity = 1);
    Opal.defs(self, '$[]=', TMP_Template_$$$eq_2 = function(name, instance) {
      var self = this, $writer = nil;
      if (self._cache == null) self._cache = nil;

      
      $writer = [name, instance];
      $send(self._cache, '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];
    }, TMP_Template_$$$eq_2.$$arity = 2);
    Opal.defs(self, '$paths', TMP_Template_paths_3 = function $$paths() {
      var self = this;
      if (self._cache == null) self._cache = nil;

      return self._cache.$keys()
    }, TMP_Template_paths_3.$$arity = 0);
    self.$attr_reader("body");
    
    Opal.def(self, '$initialize', TMP_Template_initialize_4 = function $$initialize(name) {
      var $iter = TMP_Template_initialize_4.$$p, body = $iter || nil, $a, self = this, $writer = nil;

      if ($iter) TMP_Template_initialize_4.$$p = null;
      
      
      if ($iter) TMP_Template_initialize_4.$$p = null;;
      $a = [name, body], (self.name = $a[0]), (self.body = $a[1]), $a;
      
      $writer = [name, self];
      $send($$($nesting, 'Template'), '[]=', Opal.to_a($writer));
      return $writer[$rb_minus($writer["length"], 1)];;
    }, TMP_Template_initialize_4.$$arity = 1);
    
    Opal.def(self, '$inspect', TMP_Template_inspect_5 = function $$inspect() {
      var self = this;

      return "" + "#<Template: '" + (self.name) + "'>"
    }, TMP_Template_inspect_5.$$arity = 0);
    
    Opal.def(self, '$render', TMP_Template_render_6 = function $$render(ctx) {
      var self = this;

      
      
      if (ctx == null) {
        ctx = self;
      };
      return $send(ctx, 'instance_exec', [$$($nesting, 'OutputBuffer').$new()], self.body.$to_proc());
    }, TMP_Template_render_6.$$arity = -1);
    return (function($base, $super, $parent_nesting) {
      function $OutputBuffer(){};
      var self = $OutputBuffer = $klass($base, $super, 'OutputBuffer', $OutputBuffer);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_OutputBuffer_initialize_7, TMP_OutputBuffer_append_8, TMP_OutputBuffer_join_9;

      def.buffer = nil;
      
      
      Opal.def(self, '$initialize', TMP_OutputBuffer_initialize_7 = function $$initialize() {
        var self = this;

        return (self.buffer = [])
      }, TMP_OutputBuffer_initialize_7.$$arity = 0);
      
      Opal.def(self, '$append', TMP_OutputBuffer_append_8 = function $$append(str) {
        var self = this;

        return self.buffer['$<<'](str)
      }, TMP_OutputBuffer_append_8.$$arity = 1);
      Opal.alias(self, "append=", "append");
      return (Opal.def(self, '$join', TMP_OutputBuffer_join_9 = function $$join() {
        var self = this;

        return self.buffer.$join()
      }, TMP_OutputBuffer_join_9.$$arity = 0), nil) && 'join';
    })($nesting[0], null, $nesting);
  })($nesting[0], null, $nesting)
};
