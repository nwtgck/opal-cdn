/* Generated by Opal 0.11.99.dev */
Opal.modules["logger"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$to_h', '$map', '$constants', '$const_get', '$to_s', '$format', '$chr', '$strftime', '$message_as_string', '$===', '$+', '$message', '$class', '$join', '$backtrace', '$inspect', '$attr_reader', '$attr_accessor', '$new', '$key', '$upcase', '$raise', '$add', '$to_proc', '$<=', '$<', '$write', '$call', '$[]', '$now']);
  return (function($base, $super, $parent_nesting) {
    function $Logger(){};
    var self = $Logger = $klass($base, $super, 'Logger', $Logger);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Logger_1, TMP_Logger_initialize_4, TMP_Logger_level$eq_5, TMP_Logger_info_6, TMP_Logger_debug_7, TMP_Logger_warn_8, TMP_Logger_error_9, TMP_Logger_fatal_10, TMP_Logger_unknown_11, TMP_Logger_info$q_12, TMP_Logger_debug$q_13, TMP_Logger_warn$q_14, TMP_Logger_error$q_15, TMP_Logger_fatal$q_16, TMP_Logger_add_17;

    def.level = def.progname = def.pipe = def.formatter = nil;
    
    (function($base, $parent_nesting) {
      function $Severity() {};
      var self = $Severity = $module($base, 'Severity', $Severity);

      var def = self.prototype, $nesting = [self].concat($parent_nesting);

      
      Opal.const_set($nesting[0], 'DEBUG', 0);
      Opal.const_set($nesting[0], 'INFO', 1);
      Opal.const_set($nesting[0], 'WARN', 2);
      Opal.const_set($nesting[0], 'ERROR', 3);
      Opal.const_set($nesting[0], 'FATAL', 4);
      Opal.const_set($nesting[0], 'UNKNOWN', 5);
    })($nesting[0], $nesting);
    self.$include($$($nesting, 'Severity'));
    Opal.const_set($nesting[0], 'SEVERITY_LABELS', $send($$($nesting, 'Severity').$constants(), 'map', [], (TMP_Logger_1 = function(s){var self = TMP_Logger_1.$$s || this;

    
      
      if (s == null) {
        s = nil;
      };
      return [$$($nesting, 'Severity').$const_get(s), s.$to_s()];}, TMP_Logger_1.$$s = self, TMP_Logger_1.$$arity = 1, TMP_Logger_1)).$to_h());
    (function($base, $super, $parent_nesting) {
      function $Formatter(){};
      var self = $Formatter = $klass($base, $super, 'Formatter', $Formatter);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Formatter_call_2, TMP_Formatter_message_as_string_3;

      
      Opal.const_set($nesting[0], 'MESSAGE_FORMAT', "%s, [%s] %5s -- %s: %s\n");
      Opal.const_set($nesting[0], 'DATE_TIME_FORMAT', "%Y-%m-%dT%H:%M:%S.%6N");
      
      Opal.def(self, '$call', TMP_Formatter_call_2 = function $$call(severity, time, progname, msg) {
        var self = this;

        return self.$format($$($nesting, 'MESSAGE_FORMAT'), severity.$chr(), time.$strftime($$($nesting, 'DATE_TIME_FORMAT')), severity, progname, self.$message_as_string(msg))
      }, TMP_Formatter_call_2.$$arity = 4);
      return (Opal.def(self, '$message_as_string', TMP_Formatter_message_as_string_3 = function $$message_as_string(msg) {
        var $a, self = this, $case = nil;

        return (function() {$case = msg;
        if ($$$('::', 'String')['$===']($case)) {return msg}
        else if ($$$('::', 'Exception')['$===']($case)) {return $rb_plus("" + (msg.$message()) + " (" + (msg.$class()) + ")\n", ($truthy($a = msg.$backtrace()) ? $a : []).$join("\n"))}
        else {return msg.$inspect()}})()
      }, TMP_Formatter_message_as_string_3.$$arity = 1), nil) && 'message_as_string';
    })($nesting[0], null, $nesting);
    self.$attr_reader("level");
    self.$attr_accessor("progname");
    self.$attr_accessor("formatter");
    
    Opal.def(self, '$initialize', TMP_Logger_initialize_4 = function $$initialize(pipe) {
      var self = this;

      
      self.pipe = pipe;
      self.level = $$($nesting, 'DEBUG');
      return (self.formatter = $$($nesting, 'Formatter').$new());
    }, TMP_Logger_initialize_4.$$arity = 1);
    
    Opal.def(self, '$level=', TMP_Logger_level$eq_5 = function(severity) {
      var self = this, level = nil;

      if ($truthy($$$('::', 'Integer')['$==='](severity))) {
        return (self.level = severity)
      } else if ($truthy((level = $$($nesting, 'SEVERITY_LABELS').$key(severity.$to_s().$upcase())))) {
        return (self.level = level)
      } else {
        return self.$raise($$($nesting, 'ArgumentError'), "" + "invalid log level: " + (severity))
      }
    }, TMP_Logger_level$eq_5.$$arity = 1);
    
    Opal.def(self, '$info', TMP_Logger_info_6 = function $$info(progname) {
      var $iter = TMP_Logger_info_6.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_info_6.$$p = null;
      
      
      if ($iter) TMP_Logger_info_6.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'INFO'), nil, progname], block.$to_proc());
    }, TMP_Logger_info_6.$$arity = -1);
    
    Opal.def(self, '$debug', TMP_Logger_debug_7 = function $$debug(progname) {
      var $iter = TMP_Logger_debug_7.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_debug_7.$$p = null;
      
      
      if ($iter) TMP_Logger_debug_7.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'DEBUG'), nil, progname], block.$to_proc());
    }, TMP_Logger_debug_7.$$arity = -1);
    
    Opal.def(self, '$warn', TMP_Logger_warn_8 = function $$warn(progname) {
      var $iter = TMP_Logger_warn_8.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_warn_8.$$p = null;
      
      
      if ($iter) TMP_Logger_warn_8.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'WARN'), nil, progname], block.$to_proc());
    }, TMP_Logger_warn_8.$$arity = -1);
    
    Opal.def(self, '$error', TMP_Logger_error_9 = function $$error(progname) {
      var $iter = TMP_Logger_error_9.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_error_9.$$p = null;
      
      
      if ($iter) TMP_Logger_error_9.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'ERROR'), nil, progname], block.$to_proc());
    }, TMP_Logger_error_9.$$arity = -1);
    
    Opal.def(self, '$fatal', TMP_Logger_fatal_10 = function $$fatal(progname) {
      var $iter = TMP_Logger_fatal_10.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_fatal_10.$$p = null;
      
      
      if ($iter) TMP_Logger_fatal_10.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'FATAL'), nil, progname], block.$to_proc());
    }, TMP_Logger_fatal_10.$$arity = -1);
    
    Opal.def(self, '$unknown', TMP_Logger_unknown_11 = function $$unknown(progname) {
      var $iter = TMP_Logger_unknown_11.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Logger_unknown_11.$$p = null;
      
      
      if ($iter) TMP_Logger_unknown_11.$$p = null;;
      
      if (progname == null) {
        progname = nil;
      };
      return $send(self, 'add', [$$($nesting, 'UNKNOWN'), nil, progname], block.$to_proc());
    }, TMP_Logger_unknown_11.$$arity = -1);
    
    Opal.def(self, '$info?', TMP_Logger_info$q_12 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'INFO'))
    }, TMP_Logger_info$q_12.$$arity = 0);
    
    Opal.def(self, '$debug?', TMP_Logger_debug$q_13 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'DEBUG'))
    }, TMP_Logger_debug$q_13.$$arity = 0);
    
    Opal.def(self, '$warn?', TMP_Logger_warn$q_14 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'WARN'))
    }, TMP_Logger_warn$q_14.$$arity = 0);
    
    Opal.def(self, '$error?', TMP_Logger_error$q_15 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'ERROR'))
    }, TMP_Logger_error$q_15.$$arity = 0);
    
    Opal.def(self, '$fatal?', TMP_Logger_fatal$q_16 = function() {
      var self = this;

      return $rb_le(self.level, $$($nesting, 'FATAL'))
    }, TMP_Logger_fatal$q_16.$$arity = 0);
    return (Opal.def(self, '$add', TMP_Logger_add_17 = function $$add(severity, message, progname) {
      var $iter = TMP_Logger_add_17.$$p, block = $iter || nil, $a, self = this;

      if ($iter) TMP_Logger_add_17.$$p = null;
      
      
      if ($iter) TMP_Logger_add_17.$$p = null;;
      
      if (message == null) {
        message = nil;
      };
      
      if (progname == null) {
        progname = nil;
      };
      if ($truthy($rb_lt((severity = ($truthy($a = severity) ? $a : $$($nesting, 'UNKNOWN'))), self.level))) {
        return true};
      progname = ($truthy($a = progname) ? $a : self.progname);
      if ($truthy(message)) {
      } else if ((block !== nil)) {
        message = Opal.yieldX(block, [])
      } else {
        
        message = progname;
        progname = self.progname;
      };
      self.pipe.$write(self.formatter.$call(($truthy($a = $$($nesting, 'SEVERITY_LABELS')['$[]'](severity)) ? $a : "ANY"), $$$('::', 'Time').$now(), progname, message));
      return true;
    }, TMP_Logger_add_17.$$arity = -2), nil) && 'add';
  })($nesting[0], null, $nesting)
};
