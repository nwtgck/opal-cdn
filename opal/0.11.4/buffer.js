/* Generated by Opal 0.11.99.dev */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $truthy = Opal.truthy, $send = Opal.send, $hash2 = Opal.hash2, $range = Opal.range, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$warn', '$include', '$is_a?', '$map', '$to_a', '$_Array', '$method_missing', '$bind', '$instance_method', '$slice', '$-', '$length', '$[]=', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  
  (function($base, $parent_nesting) {
    function $Native() {};
    var self = $Native = $module($base, 'Native', $Native);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Native_is_a$q_1, TMP_Native_try_convert_2, TMP_Native_convert_3, TMP_Native_call_4, TMP_Native_proc_5, TMP_Native_included_22;

    
    Opal.defs(self, '$is_a?', TMP_Native_is_a$q_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    
    }, TMP_Native_is_a$q_1.$$arity = 2);
    Opal.defs(self, '$try_convert', TMP_Native_try_convert_2 = function $$try_convert(value, default$) {
      var self = this;

      
      
      if (default$ == null) {
        default$ = nil;
      };
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_Native_try_convert_2.$$arity = -2);
    Opal.defs(self, '$convert', TMP_Native_convert_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($$($nesting, 'ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    
    }, TMP_Native_convert_3.$$arity = 1);
    Opal.defs(self, '$call', TMP_Native_call_4 = function $$call(obj, key, $a) {
      var $iter = TMP_Native_call_4.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Native_call_4.$$p = null;
      
      
      if ($iter) TMP_Native_call_4.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 2, arguments.length);
      
      args = $post_args;;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_Native_call_4.$$arity = -3);
    Opal.defs(self, '$proc', TMP_Native_proc_5 = function $$proc() {
      var $iter = TMP_Native_proc_5.$$p, block = $iter || nil, TMP_6, self = this;

      if ($iter) TMP_Native_proc_5.$$p = null;
      
      
      if ($iter) TMP_Native_proc_5.$$p = null;;
      if ($truthy(block)) {
      } else {
        self.$raise($$($nesting, 'LocalJumpError'), "no block given")
      };
      return $send($$$('::', 'Kernel'), 'proc', [], (TMP_6 = function($a){var self = TMP_6.$$s || this, $post_args, args, TMP_7, instance = nil;

      
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        args = $post_args;;
        $send(args, 'map!', [], (TMP_7 = function(arg){var self = TMP_7.$$s || this;

        
          
          if (arg == null) {
            arg = nil;
          };
          return self.$Native(arg);}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7));
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6));
    }, TMP_Native_proc_5.$$arity = 0);
    (function($base, $parent_nesting) {
      function $Helpers() {};
      var self = $Helpers = $module($base, 'Helpers', $Helpers);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Helpers_alias_native_8, TMP_Helpers_native_reader_12, TMP_Helpers_native_writer_15, TMP_Helpers_native_accessor_18;

      
      
      Opal.def(self, '$alias_native', TMP_Helpers_alias_native_8 = function $$alias_native(new$, $a, $b) {
        var $post_args, $kwargs, old, as, TMP_9, TMP_10, TMP_11, $iter = TMP_Helpers_alias_native_8.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_Helpers_alias_native_8.$$p = null;
        
        
        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        
        $kwargs = Opal.extract_kwargs($post_args);
        
        if ($kwargs == null) {
          $kwargs = $hash2([], {});
        } else if (!$kwargs.$$is_hash) {
          throw Opal.ArgumentError.$new('expected kwargs');
        };
        
        if ($post_args.length > 0) {
          old = $post_args[0];
          $post_args.splice(0, 1);
        }
        if (old == null) {
          old = new$;
        };
        
        as = $kwargs.$$smap["as"];
        if (as == null) {
          as = nil
        };
        if ($truthy(old['$end_with?']("="))) {
          return $send(self, 'define_method', [new$], (TMP_9 = function(value){var self = TMP_9.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          
            
            if (value == null) {
              value = nil;
            };
            self["native"][old['$[]']($range(0, -2, false))] = $$($nesting, 'Native').$convert(value);
            return value;}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9))
        } else if ($truthy(as)) {
          return $send(self, 'define_method', [new$], (TMP_10 = function($c){var self = TMP_10.$$s || this, $iter = TMP_10.$$p, block = $iter || nil, $post_args, args, value = nil;
            if (self["native"] == null) self["native"] = nil;

          
            
            if ($iter) TMP_10.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            value = $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());
            if ($truthy(value)) {
              return as.$new(value.$to_n())
            } else {
              return nil
            };}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10))
        } else {
          return $send(self, 'define_method', [new$], (TMP_11 = function($c){var self = TMP_11.$$s || this, $iter = TMP_11.$$p, block = $iter || nil, $post_args, args;
            if (self["native"] == null) self["native"] = nil;

          
            
            if ($iter) TMP_11.$$p = null;;
            
            $post_args = Opal.slice.call(arguments, 0, arguments.length);
            
            args = $post_args;;
            return $send($$($nesting, 'Native'), 'call', [self["native"], old].concat(Opal.to_a(args)), block.$to_proc());}, TMP_11.$$s = self, TMP_11.$$arity = -1, TMP_11))
        };
      }, TMP_Helpers_alias_native_8.$$arity = -2);
      
      Opal.def(self, '$native_reader', TMP_Helpers_native_reader_12 = function $$native_reader($a) {
        var $post_args, names, TMP_13, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], (TMP_13 = function(name){var self = TMP_13.$$s || this, TMP_14;

        
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', [name], (TMP_14 = function(){var self = TMP_14.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_14.$$s = self, TMP_14.$$arity = 0, TMP_14));}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13));
      }, TMP_Helpers_native_reader_12.$$arity = -1);
      
      Opal.def(self, '$native_writer', TMP_Helpers_native_writer_15 = function $$native_writer($a) {
        var $post_args, names, TMP_16, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        return $send(names, 'each', [], (TMP_16 = function(name){var self = TMP_16.$$s || this, TMP_17;

        
          
          if (name == null) {
            name = nil;
          };
          return $send(self, 'define_method', ["" + (name) + "="], (TMP_17 = function(value){var self = TMP_17.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          
            
            if (value == null) {
              value = nil;
            };
            return self.$Native(self["native"][name] = value);}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17));}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16));
      }, TMP_Helpers_native_writer_15.$$arity = -1);
      
      Opal.def(self, '$native_accessor', TMP_Helpers_native_accessor_18 = function $$native_accessor($a) {
        var $post_args, names, self = this;

        
        
        $post_args = Opal.slice.call(arguments, 0, arguments.length);
        
        names = $post_args;;
        $send(self, 'native_reader', Opal.to_a(names));
        return $send(self, 'native_writer', Opal.to_a(names));
      }, TMP_Helpers_native_accessor_18.$$arity = -1);
    })($nesting[0], $nesting);
    (function($base, $parent_nesting) {
      function $Wrapper() {};
      var self = $Wrapper = $module($base, 'Wrapper', $Wrapper);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Wrapper_initialize_19, TMP_Wrapper_to_n_20, TMP_Wrapper_included_21;

      
      
      Opal.def(self, '$initialize', TMP_Wrapper_initialize_19 = function $$initialize(native$) {
        var self = this;

        
        if ($truthy($$$('::', 'Kernel')['$native?'](native$))) {
        } else {
          $$$('::', 'Kernel').$raise($$($nesting, 'ArgumentError'), "" + (native$.$inspect()) + " isn't native")
        };
        return (self["native"] = native$);
      }, TMP_Wrapper_initialize_19.$$arity = 1);
      
      Opal.def(self, '$to_n', TMP_Wrapper_to_n_20 = function $$to_n() {
        var self = this;
        if (self["native"] == null) self["native"] = nil;

        return self["native"]
      }, TMP_Wrapper_to_n_20.$$arity = 0);
      Opal.defs(self, '$included', TMP_Wrapper_included_21 = function $$included(klass) {
        var self = this;

        return klass.$extend($$($nesting, 'Helpers'))
      }, TMP_Wrapper_included_21.$$arity = 1);
    })($nesting[0], $nesting);
    Opal.defs(self, '$included', TMP_Native_included_22 = function $$included(base) {
      var self = this;

      
      self.$warn("Including ::Native is deprecated. Please include Native::Wrapper instead.");
      base.$include($$($nesting, 'Wrapper'));
      return base.$extend($$($nesting, 'Helpers'));
    }, TMP_Native_included_22.$$arity = 1);
  })($nesting[0], $nesting);
  (function($base, $parent_nesting) {
    function $Kernel() {};
    var self = $Kernel = $module($base, 'Kernel', $Kernel);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Kernel_native$q_23, TMP_Kernel_Native_24, TMP_Kernel_Array_27;

    
    
    Opal.def(self, '$native?', TMP_Kernel_native$q_23 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_Kernel_native$q_23.$$arity = 1);
    
    Opal.def(self, '$Native', TMP_Kernel_Native_24 = function $$Native(obj) {
      var TMP_25, TMP_26, $iter = TMP_Kernel_Native_24.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Kernel_Native_24.$$p = null;
      if ($truthy(obj == null)) {
        return nil
      } else if ($truthy(self['$native?'](obj))) {
        return $$$($$($nesting, 'Native'), 'Object').$new(obj)
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Array')))) {
        return $send(obj, 'map', [], (TMP_25 = function(o){var self = TMP_25.$$s || this;

        
          
          if (o == null) {
            o = nil;
          };
          return self.$Native(o);}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25))
      } else if ($truthy(obj['$is_a?']($$($nesting, 'Proc')))) {
        return $send(self, 'proc', [], (TMP_26 = function($a){var self = TMP_26.$$s || this, $iter = TMP_26.$$p, block = $iter || nil, $post_args, args;

        
          
          if ($iter) TMP_26.$$p = null;;
          
          $post_args = Opal.slice.call(arguments, 0, arguments.length);
          
          args = $post_args;;
          return self.$Native($send(obj, 'call', Opal.to_a(args), block.$to_proc()));}, TMP_26.$$s = self, TMP_26.$$arity = -1, TMP_26))
      } else {
        return obj
      }
    }, TMP_Kernel_Native_24.$$arity = 1);
    Opal.alias(self, "_Array", "Array");
    
    Opal.def(self, '$Array', TMP_Kernel_Array_27 = function $$Array(object, $a) {
      var $iter = TMP_Kernel_Array_27.$$p, block = $iter || nil, $post_args, args, self = this;

      if ($iter) TMP_Kernel_Array_27.$$p = null;
      
      
      if ($iter) TMP_Kernel_Array_27.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      if ($truthy(self['$native?'](object))) {
        return $send($$$($$($nesting, 'Native'), 'Array'), 'new', [object].concat(Opal.to_a(args)), block.$to_proc()).$to_a()};
      return self.$_Array(object);
    }, TMP_Kernel_Array_27.$$arity = -2);
  })($nesting[0], $nesting);
  (function($base, $super, $parent_nesting) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Object_$eq$eq_28, TMP_Object_has_key$q_29, TMP_Object_each_30, TMP_Object_$$_31, TMP_Object_$$$eq_32, TMP_Object_merge$B_33, TMP_Object_respond_to$q_34, TMP_Object_respond_to_missing$q_35, TMP_Object_method_missing_36, TMP_Object_nil$q_37, TMP_Object_is_a$q_38, TMP_Object_instance_of$q_39, TMP_Object_class_40, TMP_Object_to_a_41, TMP_Object_inspect_42;

    def["native"] = nil;
    
    self.$include($$$($$$('::', 'Native'), 'Wrapper'));
    
    Opal.def(self, '$==', TMP_Object_$eq$eq_28 = function(other) {
      var self = this;

      return self["native"] === $$$('::', 'Native').$try_convert(other)
    }, TMP_Object_$eq$eq_28.$$arity = 1);
    
    Opal.def(self, '$has_key?', TMP_Object_has_key$q_29 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name)
    }, TMP_Object_has_key$q_29.$$arity = 1);
    Opal.alias(self, "key?", "has_key?");
    Opal.alias(self, "include?", "has_key?");
    Opal.alias(self, "member?", "has_key?");
    
    Opal.def(self, '$each', TMP_Object_each_30 = function $$each($a) {
      var $post_args, args, $iter = TMP_Object_each_30.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Object_each_30.$$p = null;
      
      
      $post_args = Opal.slice.call(arguments, 0, arguments.length);
      
      args = $post_args;;
      if (($yield !== nil)) {
        
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
      } else {
        return $send(self, 'method_missing', ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_Object_each_30.$$arity = -1);
    
    Opal.def(self, '$[]', TMP_Object_$$_31 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return $$$('::', 'Native').$call(self["native"], key)
      }
    
    }, TMP_Object_$$_31.$$arity = 1);
    
    Opal.def(self, '$[]=', TMP_Object_$$$eq_32 = function(key, value) {
      var self = this, native$ = nil;

      
      native$ = $$$('::', 'Native').$try_convert(value);
      if ($truthy(native$ === nil)) {
        return self["native"][key] = value
      } else {
        return self["native"][key] = native$
      };
    }, TMP_Object_$$$eq_32.$$arity = 2);
    
    Opal.def(self, '$merge!', TMP_Object_merge$B_33 = function(other) {
      var self = this;

      
      
      other = $$$('::', 'Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_Object_merge$B_33.$$arity = 1);
    
    Opal.def(self, '$respond_to?', TMP_Object_respond_to$q_34 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return $$$('::', 'Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_Object_respond_to$q_34.$$arity = -2);
    
    Opal.def(self, '$respond_to_missing?', TMP_Object_respond_to_missing$q_35 = function(name, include_all) {
      var self = this;

      
      
      if (include_all == null) {
        include_all = false;
      };
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_Object_respond_to_missing$q_35.$$arity = -2);
    
    Opal.def(self, '$method_missing', TMP_Object_method_missing_36 = function $$method_missing(mid, $a) {
      var $iter = TMP_Object_method_missing_36.$$p, block = $iter || nil, $post_args, args, self = this, $writer = nil;

      if ($iter) TMP_Object_method_missing_36.$$p = null;
      
      
      if ($iter) TMP_Object_method_missing_36.$$p = null;;
      
      $post_args = Opal.slice.call(arguments, 1, arguments.length);
      
      args = $post_args;;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return (($writer = [mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0)]), $send(self, '[]=', Opal.to_a($writer)), $writer[$rb_minus($writer["length"], 1)]);
      }
      else {
        return $send($$$('::', 'Native'), 'call', [self["native"], mid].concat(Opal.to_a(args)), block.$to_proc());
      }
    ;
    }, TMP_Object_method_missing_36.$$arity = -2);
    
    Opal.def(self, '$nil?', TMP_Object_nil$q_37 = function() {
      var self = this;

      return false
    }, TMP_Object_nil$q_37.$$arity = 0);
    
    Opal.def(self, '$is_a?', TMP_Object_is_a$q_38 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_Object_is_a$q_38.$$arity = 1);
    Opal.alias(self, "kind_of?", "is_a?");
    
    Opal.def(self, '$instance_of?', TMP_Object_instance_of$q_39 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_Object_instance_of$q_39.$$arity = 1);
    
    Opal.def(self, '$class', TMP_Object_class_40 = function() {
      var self = this;

      return self.$$class;
    }, TMP_Object_class_40.$$arity = 0);
    
    Opal.def(self, '$to_a', TMP_Object_to_a_41 = function $$to_a(options) {
      var $iter = TMP_Object_to_a_41.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Object_to_a_41.$$p = null;
      
      
      if ($iter) TMP_Object_to_a_41.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      return $send($$$($$$('::', 'Native'), 'Array'), 'new', [self["native"], options], block.$to_proc()).$to_a();
    }, TMP_Object_to_a_41.$$arity = -1);
    return (Opal.def(self, '$inspect', TMP_Object_inspect_42 = function $$inspect() {
      var self = this;

      return "" + "#<Native:" + (String(self["native"])) + ">"
    }, TMP_Object_inspect_42.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), $$($nesting, 'BasicObject'), $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Array_initialize_43, TMP_Array_each_44, TMP_Array_$$_45, TMP_Array_$$$eq_46, TMP_Array_last_47, TMP_Array_length_48, TMP_Array_inspect_49;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    self.$include($$($nesting, 'Enumerable'));
    
    Opal.def(self, '$initialize', TMP_Array_initialize_43 = function $$initialize(native$, options) {
      var $iter = TMP_Array_initialize_43.$$p, block = $iter || nil, $a, self = this;

      if ($iter) TMP_Array_initialize_43.$$p = null;
      
      
      if ($iter) TMP_Array_initialize_43.$$p = null;;
      
      if (options == null) {
        options = $hash2([], {});
      };
      $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_43, false), [native$], null);
      self.get = ($truthy($a = options['$[]']("get")) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ($truthy($a = options['$[]']("set")) ? $a : options['$[]']("access"));
      self.length = ($truthy($a = options['$[]']("length")) ? $a : "length");
      self.block = block;
      if ($truthy(self.$length() == null)) {
        return self.$raise($$($nesting, 'ArgumentError'), "no length found on the array-like object")
      } else {
        return nil
      };
    }, TMP_Array_initialize_43.$$arity = -2);
    
    Opal.def(self, '$each', TMP_Array_each_44 = function $$each() {
      var $iter = TMP_Array_each_44.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Array_each_44.$$p = null;
      
      
      if ($iter) TMP_Array_each_44.$$p = null;;
      if ($truthy(block)) {
      } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_Array_each_44.$$arity = 0);
    
    Opal.def(self, '$[]', TMP_Array_$$_45 = function(index) {
      var self = this, result = nil, $case = nil;

      
      result = (function() {$case = index;
      if ($$($nesting, 'String')['$===']($case) || $$($nesting, 'Symbol')['$===']($case)) {if ($truthy(self.named)) {
        return self["native"][self.named](index)
      } else {
        return self["native"][index]
      }}
      else if ($$($nesting, 'Integer')['$===']($case)) {if ($truthy(self.get)) {
        return self["native"][self.get](index)
      } else {
        return self["native"][index]
      }}
      else { return nil }})();
      if ($truthy(result)) {
        if ($truthy(self.block)) {
          return self.block.$call(result)
        } else {
          return self.$Native(result)
        }
      } else {
        return nil
      };
    }, TMP_Array_$$_45.$$arity = 1);
    
    Opal.def(self, '$[]=', TMP_Array_$$$eq_46 = function(index, value) {
      var self = this;

      if ($truthy(self.set)) {
        return self["native"][self.set](index, $$($nesting, 'Native').$convert(value))
      } else {
        return self["native"][index] = $$($nesting, 'Native').$convert(value)
      }
    }, TMP_Array_$$$eq_46.$$arity = 2);
    
    Opal.def(self, '$last', TMP_Array_last_47 = function $$last(count) {
      var $a, self = this, index = nil, result = nil;

      
      
      if (count == null) {
        count = nil;
      };
      if ($truthy(count)) {
        
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ($truthy($rb_ge(index, 0))) {
          
          result['$<<'](self['$[]'](index));
          index = $rb_minus(index, 1);
        };
        return result;
      } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_Array_last_47.$$arity = -1);
    
    Opal.def(self, '$length', TMP_Array_length_48 = function $$length() {
      var self = this;

      return self["native"][self.length]
    }, TMP_Array_length_48.$$arity = 0);
    Opal.alias(self, "to_ary", "to_a");
    return (Opal.def(self, '$inspect', TMP_Array_inspect_49 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect()
    }, TMP_Array_inspect_49.$$arity = 0), nil) && 'inspect';
  })($$($nesting, 'Native'), null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Numeric_to_n_50;

    return (Opal.def(self, '$to_n', TMP_Numeric_to_n_50 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_Numeric_to_n_50.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Proc_to_n_51;

    return (Opal.def(self, '$to_n', TMP_Proc_to_n_51 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Proc_to_n_51.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_String_to_n_52;

    return (Opal.def(self, '$to_n', TMP_String_to_n_52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_String_to_n_52.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Regexp_to_n_53;

    return (Opal.def(self, '$to_n', TMP_Regexp_to_n_53 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_Regexp_to_n_53.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_MatchData_to_n_54;

    def.matches = nil;
    return (Opal.def(self, '$to_n', TMP_MatchData_to_n_54 = function $$to_n() {
      var self = this;

      return self.matches
    }, TMP_MatchData_to_n_54.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Struct_to_n_55;

    return (Opal.def(self, '$to_n', TMP_Struct_to_n_55 = function $$to_n() {
      var TMP_56, self = this, result = nil;

      
      result = {};
      $send(self, 'each_pair', [], (TMP_56 = function(name, value){var self = TMP_56.$$s || this;

      
        
        if (name == null) {
          name = nil;
        };
        
        if (value == null) {
          value = nil;
        };
        return result[name] = $$($nesting, 'Native').$try_convert(value, value);}, TMP_56.$$s = self, TMP_56.$$arity = 2, TMP_56));
      return result;
    }, TMP_Struct_to_n_55.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Array_to_n_57;

    return (Opal.def(self, '$to_n', TMP_Array_to_n_57 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($$($nesting, 'Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_Array_to_n_57.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Boolean_to_n_58;

    return (Opal.def(self, '$to_n', TMP_Boolean_to_n_58 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_Boolean_to_n_58.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Time_to_n_59;

    return (Opal.def(self, '$to_n', TMP_Time_to_n_59 = function $$to_n() {
      var self = this;

      return self
    }, TMP_Time_to_n_59.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_NilClass_to_n_60;

    return (Opal.def(self, '$to_n', TMP_NilClass_to_n_60 = function $$to_n() {
      var self = this;

      return null;
    }, TMP_NilClass_to_n_60.$$arity = 0), nil) && 'to_n'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Hash_initialize_61, TMP_Hash_to_n_62;

    
    Opal.alias(self, "_initialize", "initialize");
    
    Opal.def(self, '$initialize', TMP_Hash_initialize_61 = function $$initialize(defaults) {
      var $iter = TMP_Hash_initialize_61.$$p, block = $iter || nil, self = this;

      if ($iter) TMP_Hash_initialize_61.$$p = null;
      
      
      if ($iter) TMP_Hash_initialize_61.$$p = null;;
      ;
      
      if (defaults != null &&
           (defaults.constructor === undefined ||
             defaults.constructor === Object)) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value &&
               (value.constructor === undefined ||
                 value.constructor === Object)) {
            smap[key] = $$($nesting, 'Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item &&
                   (item.constructor === undefined ||
                     item.constructor === Object)) {
                return $$($nesting, 'Hash').$new(item);
              }

              return self.$Native(item);
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return $send(self, '_initialize', [defaults], block.$to_proc());
    ;
    }, TMP_Hash_initialize_61.$$arity = -1);
    return (Opal.def(self, '$to_n', TMP_Hash_to_n_62 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $$($nesting, 'Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_Hash_to_n_62.$$arity = 0), nil) && 'to_n';
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Module_native_module_63;

    return (Opal.def(self, '$native_module', TMP_Module_native_module_63 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self
    }, TMP_Module_native_module_63.$$arity = 0), nil) && 'native_module'
  })($nesting[0], null, $nesting);
  (function($base, $super, $parent_nesting) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Class_native_alias_64, TMP_Class_native_class_65;

    
    
    Opal.def(self, '$native_alias', TMP_Class_native_alias_64 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.prototype['$' + existing_mid];
      if (!aliased) {
        self.$raise($$($nesting, 'NameError').$new("" + "undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.prototype[new_jsid] = aliased;
    
    }, TMP_Class_native_alias_64.$$arity = 2);
    return (Opal.def(self, '$native_class', TMP_Class_native_class_65 = function $$native_class() {
      var self = this;

      
      self.$native_module();
      return self["new"] = self.$new;;
    }, TMP_Class_native_class_65.$$arity = 0), nil) && 'native_class';
  })($nesting[0], null, $nesting);
  return ($gvars.$ = ($gvars.global = self.$Native(Opal.global)));
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["buffer/array"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $send = Opal.send, $truthy = Opal.truthy;

  Opal.add_stubs(['$include', '$[]', '$name_for', '$attr_reader', '$==', '$for', '$to_n', '$enum_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $Array(){};
      var self = $Array = $klass($base, $super, 'Array', $Array);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Array_for_1, TMP_Array_initialize_2, TMP_Array_bits_3, TMP_Array_$$_4, TMP_Array_$$$eq_5, TMP_Array_bytesize_6, TMP_Array_each_7, TMP_Array_length_8, TMP_Array_merge$B_9;

      def["native"] = nil;
      
      self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
      Opal.defs(self, '$for', TMP_Array_for_1 = function(bits, type) {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("" + ($$($nesting, 'Buffer').$name_for(bits, type)) + "Array")
      }, TMP_Array_for_1.$$arity = 2);
      self.$include($$($nesting, 'Enumerable'));
      self.$attr_reader("buffer", "type");
      
      Opal.def(self, '$initialize', TMP_Array_initialize_2 = function $$initialize(buffer, bits, type) {
        var $iter = TMP_Array_initialize_2.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_Array_initialize_2.$$p = null;
        
        
        if (bits == null) {
          bits = nil;
        };
        
        if (type == null) {
          type = nil;
        };
        if ($$($nesting, 'Native')['$=='](buffer)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [buffer], null)
        } else {
          
          var klass = $$($nesting, 'Array').$for(bits, type);

          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Array_initialize_2, false), [new klass(buffer.$to_n())], null)
        
        };
        self.buffer = buffer;
        return (self.type = type);
      }, TMP_Array_initialize_2.$$arity = -2);
      
      Opal.def(self, '$bits', TMP_Array_bits_3 = function $$bits() {
        var self = this;

        return self["native"].BYTES_PER_ELEMENT * 8
      }, TMP_Array_bits_3.$$arity = 0);
      
      Opal.def(self, '$[]', TMP_Array_$$_4 = function(index, offset) {
        var self = this;

        
        
        if (offset == null) {
          offset = nil;
        };
        if ($truthy(offset)) {
          return self["native"].subarray(index, offset)
        } else {
          return self["native"][index]
        };
      }, TMP_Array_$$_4.$$arity = -2);
      
      Opal.def(self, '$[]=', TMP_Array_$$$eq_5 = function(index, value) {
        var self = this;

        return self["native"][index] = value
      }, TMP_Array_$$$eq_5.$$arity = 2);
      
      Opal.def(self, '$bytesize', TMP_Array_bytesize_6 = function $$bytesize() {
        var self = this;

        return self["native"].byteLength
      }, TMP_Array_bytesize_6.$$arity = 0);
      
      Opal.def(self, '$each', TMP_Array_each_7 = function $$each() {
        var $iter = TMP_Array_each_7.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_Array_each_7.$$p = null;
        
        if (($yield !== nil)) {
        } else {
          return self.$enum_for("each")
        };
        
        for (var i = 0, length = self["native"].length; i < length; i++) {
          Opal.yield1($yield, self["native"][i])
        }
      ;
        return self;
      }, TMP_Array_each_7.$$arity = 0);
      
      Opal.def(self, '$length', TMP_Array_length_8 = function $$length() {
        var self = this;

        return self["native"].length
      }, TMP_Array_length_8.$$arity = 0);
      
      Opal.def(self, '$merge!', TMP_Array_merge$B_9 = function(other, offset) {
        var self = this;

        
        ;
        return self["native"].set(other.$to_n(), offset);
      }, TMP_Array_merge$B_9.$$arity = -2);
      return Opal.alias(self, "size", "length");
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["buffer/view"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$include', '$!', '$nil?', '$[]', '$attr_reader', '$native?', '$to_n', '$name_for']);
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.prototype, $nesting = [self].concat($parent_nesting);

    return (function($base, $super, $parent_nesting) {
      function $View(){};
      var self = $View = $klass($base, $super, 'View', $View);

      var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_View_supported$q_1, TMP_View_initialize_2, TMP_View_length_3, TMP_View_get_4, TMP_View_set_5, TMP_View_get_int8_6, TMP_View_set_int8_7, TMP_View_get_uint8_8, TMP_View_set_uint8_9, TMP_View_get_int16_10, TMP_View_set_int16_11, TMP_View_get_uint16_12, TMP_View_set_uint16_13, TMP_View_get_int32_14, TMP_View_set_int32_15, TMP_View_get_uint32_16, TMP_View_set_uint32_17, TMP_View_get_float32_18, TMP_View_set_float32_19, TMP_View_get_float64_20, TMP_View_set_float64_21;

      def["native"] = nil;
      
      self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
      Opal.defs(self, '$supported?', TMP_View_supported$q_1 = function() {
        var self = this;
        if ($gvars.$ == null) $gvars.$ = nil;

        return $gvars.$['$[]']("DataView")['$nil?']()['$!']()
      }, TMP_View_supported$q_1.$$arity = 0);
      self.$attr_reader("buffer", "offset");
      
      Opal.def(self, '$initialize', TMP_View_initialize_2 = function $$initialize(buffer, offset, length) {
        var $a, $iter = TMP_View_initialize_2.$$p, $yield = $iter || nil, self = this;

        if ($iter) TMP_View_initialize_2.$$p = null;
        
        
        if (offset == null) {
          offset = nil;
        };
        
        if (length == null) {
          length = nil;
        };
        if ($truthy(self['$native?'](buffer))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [buffer], null)
        } else if ($truthy(($truthy($a = offset) ? length : $a))) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n(), length.$to_n())], null)
        } else if ($truthy(offset)) {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n(), offset.$to_n())], null)
        } else {
          $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_View_initialize_2, false), [new DataView(buffer.$to_n())], null)
        };
        self.buffer = buffer;
        return (self.offset = offset);
      }, TMP_View_initialize_2.$$arity = -2);
      
      Opal.def(self, '$length', TMP_View_length_3 = function $$length() {
        var self = this;

        return self["native"].byteLength
      }, TMP_View_length_3.$$arity = 0);
      Opal.alias(self, "size", "length");
      
      Opal.def(self, '$get', TMP_View_get_4 = function $$get(offset, bits, type, little) {
        var self = this;

        
        
        if (bits == null) {
          bits = 8;
        };
        
        if (type == null) {
          type = "unsigned";
        };
        
        if (little == null) {
          little = false;
        };
        return self["native"]["get" + $$($nesting, 'Buffer').$name_for(bits, type)](offset, little);
      }, TMP_View_get_4.$$arity = -2);
      Opal.alias(self, "[]", "get");
      
      Opal.def(self, '$set', TMP_View_set_5 = function $$set(offset, value, bits, type, little) {
        var self = this;

        
        
        if (bits == null) {
          bits = 8;
        };
        
        if (type == null) {
          type = "unsigned";
        };
        
        if (little == null) {
          little = false;
        };
        return self["native"]["set" + $$($nesting, 'Buffer').$name_for(bits, type)](offset, value, little);
      }, TMP_View_set_5.$$arity = -3);
      Opal.alias(self, "[]=", "set");
      
      Opal.def(self, '$get_int8', TMP_View_get_int8_6 = function $$get_int8(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt8(offset, little);
      }, TMP_View_get_int8_6.$$arity = -2);
      
      Opal.def(self, '$set_int8', TMP_View_set_int8_7 = function $$set_int8(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt8(offset, value, little);
      }, TMP_View_set_int8_7.$$arity = -3);
      
      Opal.def(self, '$get_uint8', TMP_View_get_uint8_8 = function $$get_uint8(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint8(offset, little);
      }, TMP_View_get_uint8_8.$$arity = -2);
      
      Opal.def(self, '$set_uint8', TMP_View_set_uint8_9 = function $$set_uint8(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint8(offset, value, little);
      }, TMP_View_set_uint8_9.$$arity = -3);
      
      Opal.def(self, '$get_int16', TMP_View_get_int16_10 = function $$get_int16(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt16(offset, little);
      }, TMP_View_get_int16_10.$$arity = -2);
      
      Opal.def(self, '$set_int16', TMP_View_set_int16_11 = function $$set_int16(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt16(offset, value, little);
      }, TMP_View_set_int16_11.$$arity = -3);
      
      Opal.def(self, '$get_uint16', TMP_View_get_uint16_12 = function $$get_uint16(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint16(offset, little);
      }, TMP_View_get_uint16_12.$$arity = -2);
      
      Opal.def(self, '$set_uint16', TMP_View_set_uint16_13 = function $$set_uint16(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint16(offset, value, little);
      }, TMP_View_set_uint16_13.$$arity = -3);
      
      Opal.def(self, '$get_int32', TMP_View_get_int32_14 = function $$get_int32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getInt32(offset, little);
      }, TMP_View_get_int32_14.$$arity = -2);
      
      Opal.def(self, '$set_int32', TMP_View_set_int32_15 = function $$set_int32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setInt32(offset, value, little);
      }, TMP_View_set_int32_15.$$arity = -3);
      
      Opal.def(self, '$get_uint32', TMP_View_get_uint32_16 = function $$get_uint32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getUint32(offset, little);
      }, TMP_View_get_uint32_16.$$arity = -2);
      
      Opal.def(self, '$set_uint32', TMP_View_set_uint32_17 = function $$set_uint32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setUint32(offset, value, little);
      }, TMP_View_set_uint32_17.$$arity = -3);
      
      Opal.def(self, '$get_float32', TMP_View_get_float32_18 = function $$get_float32(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getFloat32(offset, little);
      }, TMP_View_get_float32_18.$$arity = -2);
      
      Opal.def(self, '$set_float32', TMP_View_set_float32_19 = function $$set_float32(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setFloat32(offset, value, little);
      }, TMP_View_set_float32_19.$$arity = -3);
      
      Opal.def(self, '$get_float64', TMP_View_get_float64_20 = function $$get_float64(offset, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].getFloat64(offset, little);
      }, TMP_View_get_float64_20.$$arity = -2);
      return (Opal.def(self, '$set_float64', TMP_View_set_float64_21 = function $$set_float64(offset, value, little) {
        var self = this;

        
        
        if (little == null) {
          little = false;
        };
        return self["native"].setFloat64(offset, value, little);
      }, TMP_View_set_float64_21.$$arity = -3), nil) && 'set_float64';
    })($nesting[0], null, $nesting)
  })($nesting[0], null, $nesting)
};

/* Generated by Opal 0.11.99.dev */
Opal.modules["buffer"] = function(Opal) {
  var self = Opal.top, $nesting = [], nil = Opal.nil, $$$ = Opal.const_get_qualified, $$ = Opal.const_get_relative, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $gvars = Opal.gvars, $truthy = Opal.truthy, $send = Opal.send;

  Opal.add_stubs(['$require', '$include', '$!', '$nil?', '$[]', '$===', '$native?', '$new']);
  
  self.$require("native");
  self.$require("buffer/array");
  self.$require("buffer/view");
  return (function($base, $super, $parent_nesting) {
    function $Buffer(){};
    var self = $Buffer = $klass($base, $super, 'Buffer', $Buffer);

    var def = self.prototype, $nesting = [self].concat($parent_nesting), TMP_Buffer_supported$q_1, TMP_Buffer_name_for_2, TMP_Buffer_initialize_3, TMP_Buffer_length_4, TMP_Buffer_to_a_5, TMP_Buffer_view_6;

    def["native"] = nil;
    
    self.$include($$$($$($nesting, 'Native'), 'Wrapper'));
    Opal.defs(self, '$supported?', TMP_Buffer_supported$q_1 = function() {
      var self = this;
      if ($gvars.$ == null) $gvars.$ = nil;

      return $gvars.$['$[]']("ArrayBuffer")['$nil?']()['$!']()
    }, TMP_Buffer_supported$q_1.$$arity = 0);
    Opal.defs(self, '$name_for', TMP_Buffer_name_for_2 = function $$name_for(bits, type) {
      var self = this, part = nil, $case = nil;

      
      part = (function() {$case = type;
      if ("unsigned"['$===']($case)) {return "Uint"}
      else if ("signed"['$===']($case)) {return "Int"}
      else if ("float"['$===']($case)) {return "Float"}
      else { return nil }})();
      return "" + (part) + (bits);
    }, TMP_Buffer_name_for_2.$$arity = 2);
    
    Opal.def(self, '$initialize', TMP_Buffer_initialize_3 = function $$initialize(size, bits) {
      var $iter = TMP_Buffer_initialize_3.$$p, $yield = $iter || nil, self = this;

      if ($iter) TMP_Buffer_initialize_3.$$p = null;
      
      
      if (bits == null) {
        bits = 8;
      };
      if ($truthy(self['$native?'](size))) {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [size], null)
      } else {
        return $send(self, Opal.find_super_dispatcher(self, 'initialize', TMP_Buffer_initialize_3, false), [new ArrayBuffer(size * (bits / 8))], null)
      };
    }, TMP_Buffer_initialize_3.$$arity = -2);
    
    Opal.def(self, '$length', TMP_Buffer_length_4 = function $$length() {
      var self = this;

      return self["native"].byteLength
    }, TMP_Buffer_length_4.$$arity = 0);
    Opal.alias(self, "size", "length");
    
    Opal.def(self, '$to_a', TMP_Buffer_to_a_5 = function $$to_a(bits, type) {
      var self = this;

      
      
      if (bits == null) {
        bits = 8;
      };
      
      if (type == null) {
        type = "unsigned";
      };
      return $$($nesting, 'Array').$new(self, bits, type);
    }, TMP_Buffer_to_a_5.$$arity = -1);
    return (Opal.def(self, '$view', TMP_Buffer_view_6 = function $$view(offset, length) {
      var self = this;

      
      
      if (offset == null) {
        offset = nil;
      };
      
      if (length == null) {
        length = nil;
      };
      return $$($nesting, 'View').$new(self, offset, length);
    }, TMP_Buffer_view_6.$$arity = -1), nil) && 'view';
  })($nesting[0], null, $nesting);
};
